
CPP_Blinky_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006238  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080064d0  080064d0  000074d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006548  08006548  00008120  2**0
                  CONTENTS
  4 .ARM          00000008  08006548  08006548  00007548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006550  08006550  00008120  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00007550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006554  08006554  00007554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  08006558  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000060  080065b8  00008060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000c0  08006618  000080c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000007ec  24000120  08006678  00008120  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2400090c  08006678  0000890c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00008120  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001e8fa  00000000  00000000  0000814e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036fa  00000000  00000000  00026a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001138  00000000  00000000  0002a148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d33  00000000  00000000  0002b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003f737  00000000  00000000  0002bfb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ae3f  00000000  00000000  0006b6ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187845  00000000  00000000  00086529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0020dd6e  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004adc  00000000  00000000  0020ddb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  00212890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000120 	.word	0x24000120
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080064b8 	.word	0x080064b8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000124 	.word	0x24000124
 80002d4:	080064b8 	.word	0x080064b8

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b96a 	b.w	80005c4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	460c      	mov	r4, r1
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14e      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000314:	4694      	mov	ip, r2
 8000316:	458c      	cmp	ip, r1
 8000318:	4686      	mov	lr, r0
 800031a:	fab2 f282 	clz	r2, r2
 800031e:	d962      	bls.n	80003e6 <__udivmoddi4+0xde>
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0320 	rsb	r3, r2, #32
 8000326:	4091      	lsls	r1, r2
 8000328:	fa20 f303 	lsr.w	r3, r0, r3
 800032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000330:	4319      	orrs	r1, r3
 8000332:	fa00 fe02 	lsl.w	lr, r0, r2
 8000336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033a:	fa1f f68c 	uxth.w	r6, ip
 800033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000346:	fb07 1114 	mls	r1, r7, r4, r1
 800034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800034e:	fb04 f106 	mul.w	r1, r4, r6
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f104 30ff 	add.w	r0, r4, #4294967295
 800035e:	f080 8112 	bcs.w	8000586 <__udivmoddi4+0x27e>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 810f 	bls.w	8000586 <__udivmoddi4+0x27e>
 8000368:	3c02      	subs	r4, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	fa1f f38e 	uxth.w	r3, lr
 8000372:	fbb1 f0f7 	udiv	r0, r1, r7
 8000376:	fb07 1110 	mls	r1, r7, r0, r1
 800037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800037e:	fb00 f606 	mul.w	r6, r0, r6
 8000382:	429e      	cmp	r6, r3
 8000384:	d90a      	bls.n	800039c <__udivmoddi4+0x94>
 8000386:	eb1c 0303 	adds.w	r3, ip, r3
 800038a:	f100 31ff 	add.w	r1, r0, #4294967295
 800038e:	f080 80fc 	bcs.w	800058a <__udivmoddi4+0x282>
 8000392:	429e      	cmp	r6, r3
 8000394:	f240 80f9 	bls.w	800058a <__udivmoddi4+0x282>
 8000398:	4463      	add	r3, ip
 800039a:	3802      	subs	r0, #2
 800039c:	1b9b      	subs	r3, r3, r6
 800039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003a2:	2100      	movs	r1, #0
 80003a4:	b11d      	cbz	r5, 80003ae <__udivmoddi4+0xa6>
 80003a6:	40d3      	lsrs	r3, r2
 80003a8:	2200      	movs	r2, #0
 80003aa:	e9c5 3200 	strd	r3, r2, [r5]
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d905      	bls.n	80003c2 <__udivmoddi4+0xba>
 80003b6:	b10d      	cbz	r5, 80003bc <__udivmoddi4+0xb4>
 80003b8:	e9c5 0100 	strd	r0, r1, [r5]
 80003bc:	2100      	movs	r1, #0
 80003be:	4608      	mov	r0, r1
 80003c0:	e7f5      	b.n	80003ae <__udivmoddi4+0xa6>
 80003c2:	fab3 f183 	clz	r1, r3
 80003c6:	2900      	cmp	r1, #0
 80003c8:	d146      	bne.n	8000458 <__udivmoddi4+0x150>
 80003ca:	42a3      	cmp	r3, r4
 80003cc:	d302      	bcc.n	80003d4 <__udivmoddi4+0xcc>
 80003ce:	4290      	cmp	r0, r2
 80003d0:	f0c0 80f0 	bcc.w	80005b4 <__udivmoddi4+0x2ac>
 80003d4:	1a86      	subs	r6, r0, r2
 80003d6:	eb64 0303 	sbc.w	r3, r4, r3
 80003da:	2001      	movs	r0, #1
 80003dc:	2d00      	cmp	r5, #0
 80003de:	d0e6      	beq.n	80003ae <__udivmoddi4+0xa6>
 80003e0:	e9c5 6300 	strd	r6, r3, [r5]
 80003e4:	e7e3      	b.n	80003ae <__udivmoddi4+0xa6>
 80003e6:	2a00      	cmp	r2, #0
 80003e8:	f040 8090 	bne.w	800050c <__udivmoddi4+0x204>
 80003ec:	eba1 040c 	sub.w	r4, r1, ip
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	fa1f f78c 	uxth.w	r7, ip
 80003f8:	2101      	movs	r1, #1
 80003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000402:	fb08 4416 	mls	r4, r8, r6, r4
 8000406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040a:	fb07 f006 	mul.w	r0, r7, r6
 800040e:	4298      	cmp	r0, r3
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x11c>
 8000412:	eb1c 0303 	adds.w	r3, ip, r3
 8000416:	f106 34ff 	add.w	r4, r6, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x11a>
 800041c:	4298      	cmp	r0, r3
 800041e:	f200 80cd 	bhi.w	80005bc <__udivmoddi4+0x2b4>
 8000422:	4626      	mov	r6, r4
 8000424:	1a1c      	subs	r4, r3, r0
 8000426:	fa1f f38e 	uxth.w	r3, lr
 800042a:	fbb4 f0f8 	udiv	r0, r4, r8
 800042e:	fb08 4410 	mls	r4, r8, r0, r4
 8000432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000436:	fb00 f707 	mul.w	r7, r0, r7
 800043a:	429f      	cmp	r7, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x148>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d202      	bcs.n	800044e <__udivmoddi4+0x146>
 8000448:	429f      	cmp	r7, r3
 800044a:	f200 80b0 	bhi.w	80005ae <__udivmoddi4+0x2a6>
 800044e:	4620      	mov	r0, r4
 8000450:	1bdb      	subs	r3, r3, r7
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	e7a5      	b.n	80003a4 <__udivmoddi4+0x9c>
 8000458:	f1c1 0620 	rsb	r6, r1, #32
 800045c:	408b      	lsls	r3, r1
 800045e:	fa22 f706 	lsr.w	r7, r2, r6
 8000462:	431f      	orrs	r7, r3
 8000464:	fa20 fc06 	lsr.w	ip, r0, r6
 8000468:	fa04 f301 	lsl.w	r3, r4, r1
 800046c:	ea43 030c 	orr.w	r3, r3, ip
 8000470:	40f4      	lsrs	r4, r6
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	0c38      	lsrs	r0, r7, #16
 8000478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800047c:	fbb4 fef0 	udiv	lr, r4, r0
 8000480:	fa1f fc87 	uxth.w	ip, r7
 8000484:	fb00 441e 	mls	r4, r0, lr, r4
 8000488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048c:	fb0e f90c 	mul.w	r9, lr, ip
 8000490:	45a1      	cmp	r9, r4
 8000492:	fa02 f201 	lsl.w	r2, r2, r1
 8000496:	d90a      	bls.n	80004ae <__udivmoddi4+0x1a6>
 8000498:	193c      	adds	r4, r7, r4
 800049a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800049e:	f080 8084 	bcs.w	80005aa <__udivmoddi4+0x2a2>
 80004a2:	45a1      	cmp	r9, r4
 80004a4:	f240 8081 	bls.w	80005aa <__udivmoddi4+0x2a2>
 80004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	eba4 0409 	sub.w	r4, r4, r9
 80004b2:	fa1f f983 	uxth.w	r9, r3
 80004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ba:	fb00 4413 	mls	r4, r0, r3, r4
 80004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c6:	45a4      	cmp	ip, r4
 80004c8:	d907      	bls.n	80004da <__udivmoddi4+0x1d2>
 80004ca:	193c      	adds	r4, r7, r4
 80004cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80004d0:	d267      	bcs.n	80005a2 <__udivmoddi4+0x29a>
 80004d2:	45a4      	cmp	ip, r4
 80004d4:	d965      	bls.n	80005a2 <__udivmoddi4+0x29a>
 80004d6:	3b02      	subs	r3, #2
 80004d8:	443c      	add	r4, r7
 80004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004de:	fba0 9302 	umull	r9, r3, r0, r2
 80004e2:	eba4 040c 	sub.w	r4, r4, ip
 80004e6:	429c      	cmp	r4, r3
 80004e8:	46ce      	mov	lr, r9
 80004ea:	469c      	mov	ip, r3
 80004ec:	d351      	bcc.n	8000592 <__udivmoddi4+0x28a>
 80004ee:	d04e      	beq.n	800058e <__udivmoddi4+0x286>
 80004f0:	b155      	cbz	r5, 8000508 <__udivmoddi4+0x200>
 80004f2:	ebb8 030e 	subs.w	r3, r8, lr
 80004f6:	eb64 040c 	sbc.w	r4, r4, ip
 80004fa:	fa04 f606 	lsl.w	r6, r4, r6
 80004fe:	40cb      	lsrs	r3, r1
 8000500:	431e      	orrs	r6, r3
 8000502:	40cc      	lsrs	r4, r1
 8000504:	e9c5 6400 	strd	r6, r4, [r5]
 8000508:	2100      	movs	r1, #0
 800050a:	e750      	b.n	80003ae <__udivmoddi4+0xa6>
 800050c:	f1c2 0320 	rsb	r3, r2, #32
 8000510:	fa20 f103 	lsr.w	r1, r0, r3
 8000514:	fa0c fc02 	lsl.w	ip, ip, r2
 8000518:	fa24 f303 	lsr.w	r3, r4, r3
 800051c:	4094      	lsls	r4, r2
 800051e:	430c      	orrs	r4, r1
 8000520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000524:	fa00 fe02 	lsl.w	lr, r0, r2
 8000528:	fa1f f78c 	uxth.w	r7, ip
 800052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000530:	fb08 3110 	mls	r1, r8, r0, r3
 8000534:	0c23      	lsrs	r3, r4, #16
 8000536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053a:	fb00 f107 	mul.w	r1, r0, r7
 800053e:	4299      	cmp	r1, r3
 8000540:	d908      	bls.n	8000554 <__udivmoddi4+0x24c>
 8000542:	eb1c 0303 	adds.w	r3, ip, r3
 8000546:	f100 36ff 	add.w	r6, r0, #4294967295
 800054a:	d22c      	bcs.n	80005a6 <__udivmoddi4+0x29e>
 800054c:	4299      	cmp	r1, r3
 800054e:	d92a      	bls.n	80005a6 <__udivmoddi4+0x29e>
 8000550:	3802      	subs	r0, #2
 8000552:	4463      	add	r3, ip
 8000554:	1a5b      	subs	r3, r3, r1
 8000556:	b2a4      	uxth	r4, r4
 8000558:	fbb3 f1f8 	udiv	r1, r3, r8
 800055c:	fb08 3311 	mls	r3, r8, r1, r3
 8000560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000564:	fb01 f307 	mul.w	r3, r1, r7
 8000568:	42a3      	cmp	r3, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x276>
 800056c:	eb1c 0404 	adds.w	r4, ip, r4
 8000570:	f101 36ff 	add.w	r6, r1, #4294967295
 8000574:	d213      	bcs.n	800059e <__udivmoddi4+0x296>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d911      	bls.n	800059e <__udivmoddi4+0x296>
 800057a:	3902      	subs	r1, #2
 800057c:	4464      	add	r4, ip
 800057e:	1ae4      	subs	r4, r4, r3
 8000580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000584:	e739      	b.n	80003fa <__udivmoddi4+0xf2>
 8000586:	4604      	mov	r4, r0
 8000588:	e6f0      	b.n	800036c <__udivmoddi4+0x64>
 800058a:	4608      	mov	r0, r1
 800058c:	e706      	b.n	800039c <__udivmoddi4+0x94>
 800058e:	45c8      	cmp	r8, r9
 8000590:	d2ae      	bcs.n	80004f0 <__udivmoddi4+0x1e8>
 8000592:	ebb9 0e02 	subs.w	lr, r9, r2
 8000596:	eb63 0c07 	sbc.w	ip, r3, r7
 800059a:	3801      	subs	r0, #1
 800059c:	e7a8      	b.n	80004f0 <__udivmoddi4+0x1e8>
 800059e:	4631      	mov	r1, r6
 80005a0:	e7ed      	b.n	800057e <__udivmoddi4+0x276>
 80005a2:	4603      	mov	r3, r0
 80005a4:	e799      	b.n	80004da <__udivmoddi4+0x1d2>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e7d4      	b.n	8000554 <__udivmoddi4+0x24c>
 80005aa:	46d6      	mov	lr, sl
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1a6>
 80005ae:	4463      	add	r3, ip
 80005b0:	3802      	subs	r0, #2
 80005b2:	e74d      	b.n	8000450 <__udivmoddi4+0x148>
 80005b4:	4606      	mov	r6, r0
 80005b6:	4623      	mov	r3, r4
 80005b8:	4608      	mov	r0, r1
 80005ba:	e70f      	b.n	80003dc <__udivmoddi4+0xd4>
 80005bc:	3e02      	subs	r6, #2
 80005be:	4463      	add	r3, ip
 80005c0:	e730      	b.n	8000424 <__udivmoddi4+0x11c>
 80005c2:	bf00      	nop

080005c4 <__aeabi_idiv0>:
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop

080005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005cc:	4b3d      	ldr	r3, [pc, #244]	@ (80006c4 <SystemInit+0xfc>)
 80005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005d2:	4a3c      	ldr	r2, [pc, #240]	@ (80006c4 <SystemInit+0xfc>)
 80005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005dc:	4b39      	ldr	r3, [pc, #228]	@ (80006c4 <SystemInit+0xfc>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	4a38      	ldr	r2, [pc, #224]	@ (80006c4 <SystemInit+0xfc>)
 80005e2:	f043 0310 	orr.w	r3, r3, #16
 80005e6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005e8:	4b37      	ldr	r3, [pc, #220]	@ (80006c8 <SystemInit+0x100>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f003 030f 	and.w	r3, r3, #15
 80005f0:	2b06      	cmp	r3, #6
 80005f2:	d807      	bhi.n	8000604 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80005f4:	4b34      	ldr	r3, [pc, #208]	@ (80006c8 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f023 030f 	bic.w	r3, r3, #15
 80005fc:	4a32      	ldr	r2, [pc, #200]	@ (80006c8 <SystemInit+0x100>)
 80005fe:	f043 0307 	orr.w	r3, r3, #7
 8000602:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000604:	4b31      	ldr	r3, [pc, #196]	@ (80006cc <SystemInit+0x104>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a30      	ldr	r2, [pc, #192]	@ (80006cc <SystemInit+0x104>)
 800060a:	f043 0301 	orr.w	r3, r3, #1
 800060e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000610:	4b2e      	ldr	r3, [pc, #184]	@ (80006cc <SystemInit+0x104>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000616:	4b2d      	ldr	r3, [pc, #180]	@ (80006cc <SystemInit+0x104>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	492c      	ldr	r1, [pc, #176]	@ (80006cc <SystemInit+0x104>)
 800061c:	4b2c      	ldr	r3, [pc, #176]	@ (80006d0 <SystemInit+0x108>)
 800061e:	4013      	ands	r3, r2
 8000620:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000622:	4b29      	ldr	r3, [pc, #164]	@ (80006c8 <SystemInit+0x100>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0308 	and.w	r3, r3, #8
 800062a:	2b00      	cmp	r3, #0
 800062c:	d007      	beq.n	800063e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800062e:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <SystemInit+0x100>)
 8000638:	f043 0307 	orr.w	r3, r3, #7
 800063c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800063e:	4b23      	ldr	r3, [pc, #140]	@ (80006cc <SystemInit+0x104>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000644:	4b21      	ldr	r3, [pc, #132]	@ (80006cc <SystemInit+0x104>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800064a:	4b20      	ldr	r3, [pc, #128]	@ (80006cc <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000650:	4b1e      	ldr	r3, [pc, #120]	@ (80006cc <SystemInit+0x104>)
 8000652:	4a20      	ldr	r2, [pc, #128]	@ (80006d4 <SystemInit+0x10c>)
 8000654:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000656:	4b1d      	ldr	r3, [pc, #116]	@ (80006cc <SystemInit+0x104>)
 8000658:	4a1f      	ldr	r2, [pc, #124]	@ (80006d8 <SystemInit+0x110>)
 800065a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800065c:	4b1b      	ldr	r3, [pc, #108]	@ (80006cc <SystemInit+0x104>)
 800065e:	4a1f      	ldr	r2, [pc, #124]	@ (80006dc <SystemInit+0x114>)
 8000660:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000662:	4b1a      	ldr	r3, [pc, #104]	@ (80006cc <SystemInit+0x104>)
 8000664:	2200      	movs	r2, #0
 8000666:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000668:	4b18      	ldr	r3, [pc, #96]	@ (80006cc <SystemInit+0x104>)
 800066a:	4a1c      	ldr	r2, [pc, #112]	@ (80006dc <SystemInit+0x114>)
 800066c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800066e:	4b17      	ldr	r3, [pc, #92]	@ (80006cc <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000674:	4b15      	ldr	r3, [pc, #84]	@ (80006cc <SystemInit+0x104>)
 8000676:	4a19      	ldr	r2, [pc, #100]	@ (80006dc <SystemInit+0x114>)
 8000678:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800067a:	4b14      	ldr	r3, [pc, #80]	@ (80006cc <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000680:	4b12      	ldr	r3, [pc, #72]	@ (80006cc <SystemInit+0x104>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a11      	ldr	r2, [pc, #68]	@ (80006cc <SystemInit+0x104>)
 8000686:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800068a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800068c:	4b0f      	ldr	r3, [pc, #60]	@ (80006cc <SystemInit+0x104>)
 800068e:	2200      	movs	r2, #0
 8000690:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000692:	4b13      	ldr	r3, [pc, #76]	@ (80006e0 <SystemInit+0x118>)
 8000694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000696:	4a12      	ldr	r2, [pc, #72]	@ (80006e0 <SystemInit+0x118>)
 8000698:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800069c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800069e:	4b11      	ldr	r3, [pc, #68]	@ (80006e4 <SystemInit+0x11c>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <SystemInit+0x120>)
 80006a4:	4013      	ands	r3, r2
 80006a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006aa:	d202      	bcs.n	80006b2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <SystemInit+0x124>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	@ (80006f0 <SystemInit+0x128>)
 80006b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80006b8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ba:	bf00      	nop
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000ed00 	.word	0xe000ed00
 80006c8:	52002000 	.word	0x52002000
 80006cc:	58024400 	.word	0x58024400
 80006d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80006d4:	02020200 	.word	0x02020200
 80006d8:	01ff0000 	.word	0x01ff0000
 80006dc:	01010280 	.word	0x01010280
 80006e0:	580000c0 	.word	0x580000c0
 80006e4:	5c001000 	.word	0x5c001000
 80006e8:	ffff0000 	.word	0xffff0000
 80006ec:	51008108 	.word	0x51008108
 80006f0:	52004000 	.word	0x52004000

080006f4 <cpp_main>:

#include "NoneBlockSystemTickDelay.h"
#include "STM32H7Led.h"
#include "BlinkingLed.h"

void cpp_main(){
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b098      	sub	sp, #96	@ 0x60
 80006f8:	af00      	add	r7, sp, #0

	BlinkingLed Led1(LD1_GPIO_Port, LD1_Pin);
 80006fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80006fe:	2201      	movs	r2, #1
 8000700:	491a      	ldr	r1, [pc, #104]	@ (800076c <cpp_main+0x78>)
 8000702:	4618      	mov	r0, r3
 8000704:	f000 fcb2 	bl	800106c <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>
	Led1.setFrequency(0.5);
 8000708:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800070c:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 8000710:	4618      	mov	r0, r3
 8000712:	f000 fd0b 	bl	800112c <_ZN11BlinkingLed12setFrequencyEf>

	BlinkingLed Led2{LD2_GPIO_Port, LD2_Pin};
 8000716:	f107 0320 	add.w	r3, r7, #32
 800071a:	2202      	movs	r2, #2
 800071c:	4914      	ldr	r1, [pc, #80]	@ (8000770 <cpp_main+0x7c>)
 800071e:	4618      	mov	r0, r3
 8000720:	f000 fca4 	bl	800106c <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>
	Led2.setFrequency(1);
 8000724:	f107 0320 	add.w	r3, r7, #32
 8000728:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800072c:	4618      	mov	r0, r3
 800072e:	f000 fcfd 	bl	800112c <_ZN11BlinkingLed12setFrequencyEf>

	BlinkingLed Led3{LD3_GPIO_Port, LD3_Pin};
 8000732:	463b      	mov	r3, r7
 8000734:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000738:	490c      	ldr	r1, [pc, #48]	@ (800076c <cpp_main+0x78>)
 800073a:	4618      	mov	r0, r3
 800073c:	f000 fc96 	bl	800106c <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>
	Led3.setFrequency(2);
 8000740:	463b      	mov	r3, r7
 8000742:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fcf0 	bl	800112c <_ZN11BlinkingLed12setFrequencyEf>

	//BlinkingLed Led2(LD2_GPIO_Port, LD2_Pin, frequency = 2, dutyCycle = 0);

	while(1){
		Led1.processBlinking();
 800074c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fcfb 	bl	800114c <_ZN11BlinkingLed15processBlinkingEv>
		Led2.processBlinking();
 8000756:	f107 0320 	add.w	r3, r7, #32
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fcf6 	bl	800114c <_ZN11BlinkingLed15processBlinkingEv>
		Led3.processBlinking();
 8000760:	463b      	mov	r3, r7
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fcf2 	bl	800114c <_ZN11BlinkingLed15processBlinkingEv>
		Led1.processBlinking();
 8000768:	bf00      	nop
 800076a:	e7ef      	b.n	800074c <cpp_main+0x58>
 800076c:	58020400 	.word	0x58020400
 8000770:	58021000 	.word	0x58021000

08000774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800077a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800077e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000780:	bf00      	nop
 8000782:	4b24      	ldr	r3, [pc, #144]	@ (8000814 <main+0xa0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d004      	beq.n	8000798 <main+0x24>
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	1e5a      	subs	r2, r3, #1
 8000792:	607a      	str	r2, [r7, #4]
 8000794:	2b00      	cmp	r3, #0
 8000796:	dcf4      	bgt.n	8000782 <main+0xe>
  if ( timeout < 0 )
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	2b00      	cmp	r3, #0
 800079c:	da01      	bge.n	80007a2 <main+0x2e>
  {
  Error_Handler();
 800079e:	f000 fa2f 	bl	8000c00 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 fdbb 	bl	800131c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f837 	bl	8000818 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <main+0xa0>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007b0:	4a18      	ldr	r2, [pc, #96]	@ (8000814 <main+0xa0>)
 80007b2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007ba:	4b16      	ldr	r3, [pc, #88]	@ (8000814 <main+0xa0>)
 80007bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007c4:	603b      	str	r3, [r7, #0]
 80007c6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007c8:	2000      	movs	r0, #0
 80007ca:	f001 fd69 	bl	80022a0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ce:	2100      	movs	r1, #0
 80007d0:	2000      	movs	r0, #0
 80007d2:	f001 fd7f 	bl	80022d4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007da:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007dc:	bf00      	nop
 80007de:	4b0d      	ldr	r3, [pc, #52]	@ (8000814 <main+0xa0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d104      	bne.n	80007f4 <main+0x80>
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	1e5a      	subs	r2, r3, #1
 80007ee:	607a      	str	r2, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	dcf4      	bgt.n	80007de <main+0x6a>
if ( timeout < 0 )
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	da01      	bge.n	80007fe <main+0x8a>
{
Error_Handler();
 80007fa:	f000 fa01 	bl	8000c00 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007fe:	f000 f959 	bl	8000ab4 <MX_GPIO_Init>
  MX_ETH_Init();
 8000802:	f000 f88d 	bl	8000920 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000806:	f000 f8d7 	bl	80009b8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800080a:	f000 f921 	bl	8000a50 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 800080e:	f7ff ff71 	bl	80006f4 <cpp_main>
 8000812:	e7fc      	b.n	800080e <main+0x9a>
 8000814:	58024400 	.word	0x58024400

08000818 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b09c      	sub	sp, #112	@ 0x70
 800081c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	224c      	movs	r2, #76	@ 0x4c
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f005 fdce 	bl	80063c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2220      	movs	r2, #32
 8000830:	2100      	movs	r1, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f005 fdc8 	bl	80063c8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000838:	2004      	movs	r0, #4
 800083a:	f001 fea7 	bl	800258c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800083e:	2300      	movs	r3, #0
 8000840:	603b      	str	r3, [r7, #0]
 8000842:	4b34      	ldr	r3, [pc, #208]	@ (8000914 <SystemClock_Config+0xfc>)
 8000844:	699b      	ldr	r3, [r3, #24]
 8000846:	4a33      	ldr	r2, [pc, #204]	@ (8000914 <SystemClock_Config+0xfc>)
 8000848:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800084c:	6193      	str	r3, [r2, #24]
 800084e:	4b31      	ldr	r3, [pc, #196]	@ (8000914 <SystemClock_Config+0xfc>)
 8000850:	699b      	ldr	r3, [r3, #24]
 8000852:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	4b2f      	ldr	r3, [pc, #188]	@ (8000918 <SystemClock_Config+0x100>)
 800085a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800085c:	4a2e      	ldr	r2, [pc, #184]	@ (8000918 <SystemClock_Config+0x100>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000864:	4b2c      	ldr	r3, [pc, #176]	@ (8000918 <SystemClock_Config+0x100>)
 8000866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000868:	f003 0301 	and.w	r3, r3, #1
 800086c:	603b      	str	r3, [r7, #0]
 800086e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000870:	bf00      	nop
 8000872:	4b28      	ldr	r3, [pc, #160]	@ (8000914 <SystemClock_Config+0xfc>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800087a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800087e:	d1f8      	bne.n	8000872 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000880:	4b26      	ldr	r3, [pc, #152]	@ (800091c <SystemClock_Config+0x104>)
 8000882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000884:	f023 0303 	bic.w	r3, r3, #3
 8000888:	4a24      	ldr	r2, [pc, #144]	@ (800091c <SystemClock_Config+0x104>)
 800088a:	f043 0302 	orr.w	r3, r3, #2
 800088e:	6293      	str	r3, [r2, #40]	@ 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000890:	2301      	movs	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000894:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000898:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089a:	2302      	movs	r3, #2
 800089c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089e:	2302      	movs	r3, #2
 80008a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80008a6:	2378      	movs	r3, #120	@ 0x78
 80008a8:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008aa:	2302      	movs	r3, #2
 80008ac:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ae:	2302      	movs	r3, #2
 80008b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b2:	2302      	movs	r3, #2
 80008b4:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008b6:	230c      	movs	r3, #12
 80008b8:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008ba:	2300      	movs	r3, #0
 80008bc:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 feca 	bl	8002660 <HAL_RCC_OscConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80008d2:	f000 f995 	bl	8000c00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d6:	233f      	movs	r3, #63	@ 0x3f
 80008d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008da:	2303      	movs	r3, #3
 80008dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008de:	2300      	movs	r3, #0
 80008e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008e2:	2308      	movs	r3, #8
 80008e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008e6:	2340      	movs	r3, #64	@ 0x40
 80008e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008ea:	2340      	movs	r3, #64	@ 0x40
 80008ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008f4:	2340      	movs	r3, #64	@ 0x40
 80008f6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008f8:	1d3b      	adds	r3, r7, #4
 80008fa:	2104      	movs	r1, #4
 80008fc:	4618      	mov	r0, r3
 80008fe:	f002 fadd 	bl	8002ebc <HAL_RCC_ClockConfig>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d001      	beq.n	800090c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000908:	f000 f97a 	bl	8000c00 <Error_Handler>
  }
}
 800090c:	bf00      	nop
 800090e:	3770      	adds	r7, #112	@ 0x70
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	58024800 	.word	0x58024800
 8000918:	58000400 	.word	0x58000400
 800091c:	58024400 	.word	0x58024400

08000920 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000924:	4b1e      	ldr	r3, [pc, #120]	@ (80009a0 <MX_ETH_Init+0x80>)
 8000926:	4a1f      	ldr	r2, [pc, #124]	@ (80009a4 <MX_ETH_Init+0x84>)
 8000928:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800092a:	4b1f      	ldr	r3, [pc, #124]	@ (80009a8 <MX_ETH_Init+0x88>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000930:	4b1d      	ldr	r3, [pc, #116]	@ (80009a8 <MX_ETH_Init+0x88>)
 8000932:	2280      	movs	r2, #128	@ 0x80
 8000934:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000936:	4b1c      	ldr	r3, [pc, #112]	@ (80009a8 <MX_ETH_Init+0x88>)
 8000938:	22e1      	movs	r2, #225	@ 0xe1
 800093a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <MX_ETH_Init+0x88>)
 800093e:	2200      	movs	r2, #0
 8000940:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000942:	4b19      	ldr	r3, [pc, #100]	@ (80009a8 <MX_ETH_Init+0x88>)
 8000944:	2200      	movs	r2, #0
 8000946:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <MX_ETH_Init+0x88>)
 800094a:	2200      	movs	r2, #0
 800094c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800094e:	4b14      	ldr	r3, [pc, #80]	@ (80009a0 <MX_ETH_Init+0x80>)
 8000950:	4a15      	ldr	r2, [pc, #84]	@ (80009a8 <MX_ETH_Init+0x88>)
 8000952:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000954:	4b12      	ldr	r3, [pc, #72]	@ (80009a0 <MX_ETH_Init+0x80>)
 8000956:	2201      	movs	r2, #1
 8000958:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800095a:	4b11      	ldr	r3, [pc, #68]	@ (80009a0 <MX_ETH_Init+0x80>)
 800095c:	4a13      	ldr	r2, [pc, #76]	@ (80009ac <MX_ETH_Init+0x8c>)
 800095e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000960:	4b0f      	ldr	r3, [pc, #60]	@ (80009a0 <MX_ETH_Init+0x80>)
 8000962:	4a13      	ldr	r2, [pc, #76]	@ (80009b0 <MX_ETH_Init+0x90>)
 8000964:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000966:	4b0e      	ldr	r3, [pc, #56]	@ (80009a0 <MX_ETH_Init+0x80>)
 8000968:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 800096c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800096e:	480c      	ldr	r0, [pc, #48]	@ (80009a0 <MX_ETH_Init+0x80>)
 8000970:	f000 fe8e 	bl	8001690 <HAL_ETH_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 f941 	bl	8000c00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800097e:	2238      	movs	r2, #56	@ 0x38
 8000980:	2100      	movs	r1, #0
 8000982:	480c      	ldr	r0, [pc, #48]	@ (80009b4 <MX_ETH_Init+0x94>)
 8000984:	f005 fd20 	bl	80063c8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000988:	4b0a      	ldr	r3, [pc, #40]	@ (80009b4 <MX_ETH_Init+0x94>)
 800098a:	2221      	movs	r2, #33	@ 0x21
 800098c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800098e:	4b09      	ldr	r3, [pc, #36]	@ (80009b4 <MX_ETH_Init+0x94>)
 8000990:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000994:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000996:	4b07      	ldr	r3, [pc, #28]	@ (80009b4 <MX_ETH_Init+0x94>)
 8000998:	2200      	movs	r2, #0
 800099a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800099c:	bf00      	nop
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	24000174 	.word	0x24000174
 80009a4:	40028000 	.word	0x40028000
 80009a8:	240007c0 	.word	0x240007c0
 80009ac:	240000c0 	.word	0x240000c0
 80009b0:	24000060 	.word	0x24000060
 80009b4:	2400013c 	.word	0x2400013c

080009b8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009bc:	4b22      	ldr	r3, [pc, #136]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009be:	4a23      	ldr	r2, [pc, #140]	@ (8000a4c <MX_USART3_UART_Init+0x94>)
 80009c0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009c2:	4b21      	ldr	r3, [pc, #132]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009c8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009d6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009dc:	4b1a      	ldr	r3, [pc, #104]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009de:	220c      	movs	r2, #12
 80009e0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009e2:	4b19      	ldr	r3, [pc, #100]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e8:	4b17      	ldr	r3, [pc, #92]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009ee:	4b16      	ldr	r3, [pc, #88]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009f4:	4b14      	ldr	r3, [pc, #80]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009fa:	4b13      	ldr	r3, [pc, #76]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a00:	4811      	ldr	r0, [pc, #68]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a02:	f004 f94f 	bl	8004ca4 <HAL_UART_Init>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000a0c:	f000 f8f8 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a10:	2100      	movs	r1, #0
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a14:	f005 f8ec 	bl	8005bf0 <HAL_UARTEx_SetTxFifoThreshold>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000a1e:	f000 f8ef 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a22:	2100      	movs	r1, #0
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a26:	f005 f921 	bl	8005c6c <HAL_UARTEx_SetRxFifoThreshold>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000a30:	f000 f8e6 	bl	8000c00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000a34:	4804      	ldr	r0, [pc, #16]	@ (8000a48 <MX_USART3_UART_Init+0x90>)
 8000a36:	f005 f8a2 	bl	8005b7e <HAL_UARTEx_DisableFifoMode>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000a40:	f000 f8de 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000a44:	bf00      	nop
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	24000224 	.word	0x24000224
 8000a4c:	40004800 	.word	0x40004800

08000a50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a56:	4a16      	ldr	r2, [pc, #88]	@ (8000ab0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000a58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000a5a:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a5c:	2209      	movs	r2, #9
 8000a5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a60:	4b12      	ldr	r3, [pc, #72]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a62:	2202      	movs	r2, #2
 8000a64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a6e:	2202      	movs	r2, #2
 8000a70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	629a      	str	r2, [r3, #40]	@ 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a98:	f001 fc30 	bl	80022fc <HAL_PCD_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000aa2:	f000 f8ad 	bl	8000c00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	240002b4 	.word	0x240002b4
 8000ab0:	40080000 	.word	0x40080000

08000ab4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b08c      	sub	sp, #48	@ 0x30
 8000ab8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aba:	f107 031c 	add.w	r3, r7, #28
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
 8000ac6:	60da      	str	r2, [r3, #12]
 8000ac8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aca:	4b4a      	ldr	r3, [pc, #296]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad0:	4a48      	ldr	r2, [pc, #288]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ada:	4b46      	ldr	r3, [pc, #280]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000adc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae0:	f003 0304 	and.w	r3, r3, #4
 8000ae4:	61bb      	str	r3, [r7, #24]
 8000ae6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ae8:	4b42      	ldr	r3, [pc, #264]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000aea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aee:	4a41      	ldr	r2, [pc, #260]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000af0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000af4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af8:	4b3e      	ldr	r3, [pc, #248]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000afe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b06:	4b3b      	ldr	r3, [pc, #236]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b0c:	4a39      	ldr	r2, [pc, #228]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b0e:	f043 0301 	orr.w	r3, r3, #1
 8000b12:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b16:	4b37      	ldr	r3, [pc, #220]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	613b      	str	r3, [r7, #16]
 8000b22:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b24:	4b33      	ldr	r3, [pc, #204]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b2a:	4a32      	ldr	r2, [pc, #200]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b2c:	f043 0302 	orr.w	r3, r3, #2
 8000b30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b34:	4b2f      	ldr	r3, [pc, #188]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b3a:	f003 0302 	and.w	r3, r3, #2
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b42:	4b2c      	ldr	r3, [pc, #176]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b48:	4a2a      	ldr	r2, [pc, #168]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b4a:	f043 0308 	orr.w	r3, r3, #8
 8000b4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b52:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b58:	f003 0308 	and.w	r3, r3, #8
 8000b5c:	60bb      	str	r3, [r7, #8]
 8000b5e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b60:	4b24      	ldr	r3, [pc, #144]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b66:	4a23      	ldr	r2, [pc, #140]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b6c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b70:	4b20      	ldr	r3, [pc, #128]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	4a1b      	ldr	r2, [pc, #108]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b86:	f043 0310 	orr.w	r3, r3, #16
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8e:	4b19      	ldr	r3, [pc, #100]	@ (8000bf4 <MX_GPIO_Init+0x140>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f003 0310 	and.w	r3, r3, #16
 8000b98:	603b      	str	r3, [r7, #0]
 8000b9a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	f244 0101 	movw	r1, #16385	@ 0x4001
 8000ba2:	4815      	ldr	r0, [pc, #84]	@ (8000bf8 <MX_GPIO_Init+0x144>)
 8000ba4:	f001 fb48 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2102      	movs	r1, #2
 8000bac:	4813      	ldr	r0, [pc, #76]	@ (8000bfc <MX_GPIO_Init+0x148>)
 8000bae:	f001 fb43 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000bb2:	f244 0301 	movw	r3, #16385	@ 0x4001
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480b      	ldr	r0, [pc, #44]	@ (8000bf8 <MX_GPIO_Init+0x144>)
 8000bcc:	f001 f984 	bl	8001ed8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000bd0:	2302      	movs	r3, #2
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	4619      	mov	r1, r3
 8000be6:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_GPIO_Init+0x148>)
 8000be8:	f001 f976 	bl	8001ed8 <HAL_GPIO_Init>

}
 8000bec:	bf00      	nop
 8000bee:	3730      	adds	r7, #48	@ 0x30
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	58024400 	.word	0x58024400
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58021000 	.word	0x58021000

08000c00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c04:	b672      	cpsid	i
}
 8000c06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <Error_Handler+0x8>

08000c0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c12:	4b0a      	ldr	r3, [pc, #40]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c18:	4a08      	ldr	r2, [pc, #32]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c1a:	f043 0302 	orr.w	r3, r3, #2
 8000c1e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c22:	4b06      	ldr	r3, [pc, #24]	@ (8000c3c <HAL_MspInit+0x30>)
 8000c24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c28:	f003 0302 	and.w	r3, r3, #2
 8000c2c:	607b      	str	r3, [r7, #4]
 8000c2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	58024400 	.word	0x58024400

08000c40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	@ 0x38
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a59      	ldr	r2, [pc, #356]	@ (8000dc4 <HAL_ETH_MspInit+0x184>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	f040 80ab 	bne.w	8000dba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000c64:	4b58      	ldr	r3, [pc, #352]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c6a:	4a57      	ldr	r2, [pc, #348]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c6c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c70:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c74:	4b54      	ldr	r3, [pc, #336]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c7e:	623b      	str	r3, [r7, #32]
 8000c80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000c82:	4b51      	ldr	r3, [pc, #324]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c88:	4a4f      	ldr	r2, [pc, #316]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000c92:	4b4d      	ldr	r3, [pc, #308]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000c98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c9c:	61fb      	str	r3, [r7, #28]
 8000c9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ca0:	4b49      	ldr	r3, [pc, #292]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000ca2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ca6:	4a48      	ldr	r2, [pc, #288]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000ca8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cac:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000cb0:	4b45      	ldr	r3, [pc, #276]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000cb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cba:	61bb      	str	r3, [r7, #24]
 8000cbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	4b42      	ldr	r3, [pc, #264]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc4:	4a40      	ldr	r2, [pc, #256]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cc6:	f043 0304 	orr.w	r3, r3, #4
 8000cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cce:	4b3e      	ldr	r3, [pc, #248]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	f003 0304 	and.w	r3, r3, #4
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a39      	ldr	r2, [pc, #228]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b36      	ldr	r3, [pc, #216]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfa:	4b33      	ldr	r3, [pc, #204]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a31      	ldr	r2, [pc, #196]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d02:	f043 0302 	orr.w	r3, r3, #2
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b2f      	ldr	r3, [pc, #188]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0302 	and.w	r3, r3, #2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d18:	4b2b      	ldr	r3, [pc, #172]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d28:	4b27      	ldr	r3, [pc, #156]	@ (8000dc8 <HAL_ETH_MspInit+0x188>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d36:	2332      	movs	r3, #50	@ 0x32
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d46:	230b      	movs	r3, #11
 8000d48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d4e:	4619      	mov	r1, r3
 8000d50:	481e      	ldr	r0, [pc, #120]	@ (8000dcc <HAL_ETH_MspInit+0x18c>)
 8000d52:	f001 f8c1 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000d56:	2386      	movs	r3, #134	@ 0x86
 8000d58:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d66:	230b      	movs	r3, #11
 8000d68:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4817      	ldr	r0, [pc, #92]	@ (8000dd0 <HAL_ETH_MspInit+0x190>)
 8000d72:	f001 f8b1 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d76:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000d88:	230b      	movs	r3, #11
 8000d8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	4810      	ldr	r0, [pc, #64]	@ (8000dd4 <HAL_ETH_MspInit+0x194>)
 8000d94:	f001 f8a0 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000d98:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da2:	2300      	movs	r3, #0
 8000da4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da6:	2300      	movs	r3, #0
 8000da8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000daa:	230b      	movs	r3, #11
 8000dac:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db2:	4619      	mov	r1, r3
 8000db4:	4808      	ldr	r0, [pc, #32]	@ (8000dd8 <HAL_ETH_MspInit+0x198>)
 8000db6:	f001 f88f 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000dba:	bf00      	nop
 8000dbc:	3738      	adds	r7, #56	@ 0x38
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40028000 	.word	0x40028000
 8000dc8:	58024400 	.word	0x58024400
 8000dcc:	58020800 	.word	0x58020800
 8000dd0:	58020000 	.word	0x58020000
 8000dd4:	58020400 	.word	0x58020400
 8000dd8:	58021800 	.word	0x58021800

08000ddc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b0b8      	sub	sp, #224	@ 0xe0
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de4:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
 8000df2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	22bc      	movs	r2, #188	@ 0xbc
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 fae3 	bl	80063c8 <memset>
  if(huart->Instance==USART3)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a25      	ldr	r2, [pc, #148]	@ (8000e9c <HAL_UART_MspInit+0xc0>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d142      	bne.n	8000e92 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e16:	f107 0310 	add.w	r3, r7, #16
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f002 fbda 	bl	80035d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e26:	f7ff feeb 	bl	8000c00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e2c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000e36:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e3c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e40:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e48:	4b15      	ldr	r3, [pc, #84]	@ (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e50:	f043 0308 	orr.w	r3, r3, #8
 8000e54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e58:	4b11      	ldr	r3, [pc, #68]	@ (8000ea0 <HAL_UART_MspInit+0xc4>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	f003 0308 	and.w	r3, r3, #8
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000e66:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6e:	2302      	movs	r3, #2
 8000e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e74:	2300      	movs	r3, #0
 8000e76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e80:	2307      	movs	r3, #7
 8000e82:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	@ (8000ea4 <HAL_UART_MspInit+0xc8>)
 8000e8e:	f001 f823 	bl	8001ed8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	37e0      	adds	r7, #224	@ 0xe0
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40004800 	.word	0x40004800
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020c00 	.word	0x58020c00

08000ea8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b0b8      	sub	sp, #224	@ 0xe0
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	22bc      	movs	r2, #188	@ 0xbc
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f005 fa7d 	bl	80063c8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a36      	ldr	r2, [pc, #216]	@ (8000fac <HAL_PCD_MspInit+0x104>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d165      	bne.n	8000fa4 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000ed8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000edc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000ee2:	2318      	movs	r3, #24
 8000ee4:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000eea:	2304      	movs	r3, #4
 8000eec:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000ef2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ef6:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	653b      	str	r3, [r7, #80]	@ 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000efc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000f00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f04:	f107 0310 	add.w	r3, r7, #16
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f002 fb63 	bl	80035d4 <HAL_RCCEx_PeriphCLKConfig>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000f14:	f7ff fe74 	bl	8000c00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000f18:	f001 fb92 	bl	8002640 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1c:	4b24      	ldr	r3, [pc, #144]	@ (8000fb0 <HAL_PCD_MspInit+0x108>)
 8000f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f22:	4a23      	ldr	r2, [pc, #140]	@ (8000fb0 <HAL_PCD_MspInit+0x108>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f2c:	4b20      	ldr	r3, [pc, #128]	@ (8000fb0 <HAL_PCD_MspInit+0x108>)
 8000f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000f3a:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000f54:	230a      	movs	r3, #10
 8000f56:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4814      	ldr	r0, [pc, #80]	@ (8000fb4 <HAL_PCD_MspInit+0x10c>)
 8000f62:	f000 ffb9 	bl	8001ed8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f6a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f7e:	4619      	mov	r1, r3
 8000f80:	480c      	ldr	r0, [pc, #48]	@ (8000fb4 <HAL_PCD_MspInit+0x10c>)
 8000f82:	f000 ffa9 	bl	8001ed8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000f86:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb0 <HAL_PCD_MspInit+0x108>)
 8000f88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f8c:	4a08      	ldr	r2, [pc, #32]	@ (8000fb0 <HAL_PCD_MspInit+0x108>)
 8000f8e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000f92:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000f96:	4b06      	ldr	r3, [pc, #24]	@ (8000fb0 <HAL_PCD_MspInit+0x108>)
 8000f98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000fa0:	60bb      	str	r3, [r7, #8]
 8000fa2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000fa4:	bf00      	nop
 8000fa6:	37e0      	adds	r7, #224	@ 0xe0
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	40080000 	.word	0x40080000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020000 	.word	0x58020000

08000fb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fbc:	bf00      	nop
 8000fbe:	e7fd      	b.n	8000fbc <NMI_Handler+0x4>

08000fc0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fc4:	bf00      	nop
 8000fc6:	e7fd      	b.n	8000fc4 <HardFault_Handler+0x4>

08000fc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fcc:	bf00      	nop
 8000fce:	e7fd      	b.n	8000fcc <MemManage_Handler+0x4>

08000fd0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fd4:	bf00      	nop
 8000fd6:	e7fd      	b.n	8000fd4 <BusFault_Handler+0x4>

08000fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fdc:	bf00      	nop
 8000fde:	e7fd      	b.n	8000fdc <UsageFault_Handler+0x4>

08000fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr

08000fee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ff2:	bf00      	nop
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffa:	4770      	bx	lr

08000ffc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800100e:	f000 f9f7 	bl	8001400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
	...

08001018 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001018:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001050 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800101c:	f7ff fad4 	bl	80005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001020:	480c      	ldr	r0, [pc, #48]	@ (8001054 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001022:	490d      	ldr	r1, [pc, #52]	@ (8001058 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001024:	4a0d      	ldr	r2, [pc, #52]	@ (800105c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001026:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001028:	e002      	b.n	8001030 <LoopCopyDataInit>

0800102a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800102a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800102c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800102e:	3304      	adds	r3, #4

08001030 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001030:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001032:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001034:	d3f9      	bcc.n	800102a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001036:	4a0a      	ldr	r2, [pc, #40]	@ (8001060 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001038:	4c0a      	ldr	r4, [pc, #40]	@ (8001064 <LoopFillZerobss+0x22>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800103c:	e001      	b.n	8001042 <LoopFillZerobss>

0800103e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800103e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001040:	3204      	adds	r2, #4

08001042 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001042:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001044:	d3fb      	bcc.n	800103e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001046:	f005 f9c7 	bl	80063d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800104a:	f7ff fb93 	bl	8000774 <main>
  bx  lr
 800104e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001050:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001054:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001058:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 800105c:	08006558 	.word	0x08006558
  ldr r2, =_sbss
 8001060:	24000120 	.word	0x24000120
  ldr r4, =_ebss
 8001064:	2400090c 	.word	0x2400090c

08001068 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001068:	e7fe      	b.n	8001068 <ADC3_IRQHandler>
	...

0800106c <_ZN11BlinkingLedC1EP12GPIO_TypeDeft>:

BlinkingLed::BlinkingLed() {
	// TODO Auto-generated constructor stub
}

BlinkingLed::BlinkingLed(GPIO_TypeDef *Port, uint16_t Pin){
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	4613      	mov	r3, r2
 8001078:	80fb      	strh	r3, [r7, #6]
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f000 f893 	bl	80011a8 <_ZN24NoneBlockSystemTickDelayC1Ev>
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	330c      	adds	r3, #12
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f908 	bl	800129c <_ZN10STM32H7LedC1Ev>
 800108c:	4a0b      	ldr	r2, [pc, #44]	@ (80010bc <_ZN11BlinkingLedC1EP12GPIO_TypeDeft+0x50>)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	4a0b      	ldr	r2, [pc, #44]	@ (80010c0 <_ZN11BlinkingLedC1EP12GPIO_TypeDeft+0x54>)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	60da      	str	r2, [r3, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800109e:	619a      	str	r2, [r3, #24]
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	2232      	movs	r2, #50	@ 0x32
 80010a4:	771a      	strb	r2, [r3, #28]
	BlinkingLed::Port = Port;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	68ba      	ldr	r2, [r7, #8]
 80010aa:	611a      	str	r2, [r3, #16]
	BlinkingLed::Pin = Pin;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	88fa      	ldrh	r2, [r7, #6]
 80010b0:	829a      	strh	r2, [r3, #20]
}
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	4618      	mov	r0, r3
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	080064e8 	.word	0x080064e8
 80010c0:	080064f8 	.word	0x080064f8

080010c4 <_ZN11BlinkingLedD1Ev>:
	BlinkingLed::Pin = Pin;
	BlinkingLed::Frequency = frequency;
	BlinkingLed::DutyCycle = dutyCycle;
}

BlinkingLed::~BlinkingLed() {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	4a09      	ldr	r2, [pc, #36]	@ (80010f4 <_ZN11BlinkingLedD1Ev+0x30>)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	4a09      	ldr	r2, [pc, #36]	@ (80010f8 <_ZN11BlinkingLedD1Ev+0x34>)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	60da      	str	r2, [r3, #12]
	// TODO Auto-generated destructor stub
}
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	330c      	adds	r3, #12
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f8ed 	bl	80012bc <_ZN10STM32H7LedD1Ev>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f000 f875 	bl	80011d4 <_ZN24NoneBlockSystemTickDelayD1Ev>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4618      	mov	r0, r3
 80010ee:	3708      	adds	r7, #8
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	080064e8 	.word	0x080064e8
 80010f8:	080064f8 	.word	0x080064f8

080010fc <_ZThn12_N11BlinkingLedD1Ev>:
#include "STM32H7Led.h"

class BlinkingLed: protected NoneBlockSystemTickDelay, STM32H7Led {
public:
	BlinkingLed();
	virtual ~BlinkingLed();
 80010fc:	f1a0 000c 	sub.w	r0, r0, #12
 8001100:	f7ff bfe0 	b.w	80010c4 <_ZN11BlinkingLedD1Ev>

08001104 <_ZN11BlinkingLedD0Ev>:
BlinkingLed::~BlinkingLed() {
 8001104:	b580      	push	{r7, lr}
 8001106:	b082      	sub	sp, #8
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
}
 800110c:	6878      	ldr	r0, [r7, #4]
 800110e:	f7ff ffd9 	bl	80010c4 <_ZN11BlinkingLedD1Ev>
 8001112:	2120      	movs	r1, #32
 8001114:	6878      	ldr	r0, [r7, #4]
 8001116:	f005 f93f 	bl	8006398 <_ZdlPvj>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4618      	mov	r0, r3
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}

08001124 <_ZThn12_N11BlinkingLedD0Ev>:
 8001124:	f1a0 000c 	sub.w	r0, r0, #12
 8001128:	f7ff bfec 	b.w	8001104 <_ZN11BlinkingLedD0Ev>

0800112c <_ZN11BlinkingLed12setFrequencyEf>:

void BlinkingLed::setDutyCycle(const uint8_t dutyCycle){
	BlinkingLed::DutyCycle = dutyCycle;
}

void BlinkingLed::setFrequency(const float_t frequency){
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	ed87 0a00 	vstr	s0, [r7]
	BlinkingLed::Frequency = frequency;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	619a      	str	r2, [r3, #24]
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
	...

0800114c <_ZN11BlinkingLed15processBlinkingEv>:

void BlinkingLed::processBlinking(){
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
	if(BlinkingLed::checkExpiration()){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 f87c 	bl	8001254 <_ZN24NoneBlockSystemTickDelay15checkExpirationEv>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf14      	ite	ne
 8001162:	2301      	movne	r3, #1
 8001164:	2300      	moveq	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d017      	beq.n	800119c <_ZN11BlinkingLed15processBlinkingEv+0x50>
		BlinkingLed::initialize(1/Frequency*1000);
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	ed93 7a06 	vldr	s14, [r3, #24]
 8001174:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800117c:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80011a4 <_ZN11BlinkingLed15processBlinkingEv+0x58>
 8001180:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001184:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001188:	ee17 1a90 	vmov	r1, s15
 800118c:	4610      	mov	r0, r2
 800118e:	f000 f841 	bl	8001214 <_ZN24NoneBlockSystemTickDelay10initializeEm>
		BlinkingLed::toggleLED();
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	330c      	adds	r3, #12
 8001196:	4618      	mov	r0, r3
 8001198:	f000 f8b0 	bl	80012fc <_ZN10STM32H7Led9toggleLEDEv>
	}
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	447a0000 	.word	0x447a0000

080011a8 <_ZN24NoneBlockSystemTickDelayC1Ev>:
 *      Author: lescher
 */

#include "NoneBlockSystemTickDelay.h"

NoneBlockSystemTickDelay::NoneBlockSystemTickDelay(){
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	4a07      	ldr	r2, [pc, #28]	@ (80011d0 <_ZN24NoneBlockSystemTickDelayC1Ev+0x28>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2200      	movs	r2, #0
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
	// TODO Auto-generated constructor stub
}
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	08006508 	.word	0x08006508

080011d4 <_ZN24NoneBlockSystemTickDelayD1Ev>:

NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay(){
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <_ZN24NoneBlockSystemTickDelayD1Ev+0x1c>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	08006508 	.word	0x08006508

080011f4 <_ZN24NoneBlockSystemTickDelayD0Ev>:
NoneBlockSystemTickDelay::~NoneBlockSystemTickDelay(){
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
}
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ffe9 	bl	80011d4 <_ZN24NoneBlockSystemTickDelayD1Ev>
 8001202:	210c      	movs	r1, #12
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f005 f8c7 	bl	8006398 <_ZdlPvj>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	3708      	adds	r7, #8
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <_ZN24NoneBlockSystemTickDelay10initializeEm>:

void NoneBlockSystemTickDelay::initialize(const uint32_t Delay){
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
	Wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	605a      	str	r2, [r3, #4]
	Tickstart = HAL_GetTick();
 8001224:	f000 f900 	bl	8001428 <HAL_GetTick>
 8001228:	4602      	mov	r2, r0
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	609a      	str	r2, [r3, #8]

	if(Wait < HAL_MAX_DELAY){
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001236:	d006      	beq.n	8001246 <_ZN24NoneBlockSystemTickDelay10initializeEm+0x32>
		Wait += (uint32_t)(uwTickFreq);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4a04      	ldr	r2, [pc, #16]	@ (8001250 <_ZN24NoneBlockSystemTickDelay10initializeEm+0x3c>)
 800123e:	7812      	ldrb	r2, [r2, #0]
 8001240:	441a      	add	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	605a      	str	r2, [r3, #4]
	}
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2400000c 	.word	0x2400000c

08001254 <_ZN24NoneBlockSystemTickDelay15checkExpirationEv>:

uint8_t NoneBlockSystemTickDelay::checkExpiration(void){
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
	if(Wait != 0){
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d015      	beq.n	8001290 <_ZN24NoneBlockSystemTickDelay15checkExpirationEv+0x3c>
		if((HAL_GetTick() - Tickstart) < Wait) return 0;
 8001264:	f000 f8e0 	bl	8001428 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	1ad2      	subs	r2, r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	429a      	cmp	r2, r3
 8001276:	bf34      	ite	cc
 8001278:	2301      	movcc	r3, #1
 800127a:	2300      	movcs	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <_ZN24NoneBlockSystemTickDelay15checkExpirationEv+0x32>
 8001282:	2300      	movs	r3, #0
 8001284:	e005      	b.n	8001292 <_ZN24NoneBlockSystemTickDelay15checkExpirationEv+0x3e>
		else {
			Wait = 0;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	605a      	str	r2, [r3, #4]
			return 255;
 800128c:	23ff      	movs	r3, #255	@ 0xff
 800128e:	e000      	b.n	8001292 <_ZN24NoneBlockSystemTickDelay15checkExpirationEv+0x3e>
		}
	} else return 255;
 8001290:	23ff      	movs	r3, #255	@ 0xff
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
	...

0800129c <_ZN10STM32H7LedC1Ev>:
 *      Author: lescher
 */

#include "STM32H7Led.h"

STM32H7Led::STM32H7Led(){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	4a04      	ldr	r2, [pc, #16]	@ (80012b8 <_ZN10STM32H7LedC1Ev+0x1c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated constructor stub
}
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4618      	mov	r0, r3
 80012ae:	370c      	adds	r7, #12
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	08006518 	.word	0x08006518

080012bc <_ZN10STM32H7LedD1Ev>:
	// TODO Auto-generated constructor stub
	STM32H7Led::Port = Port;
	STM32H7Led::Pin = Pin;
}

STM32H7Led::~STM32H7Led(){
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	4a04      	ldr	r2, [pc, #16]	@ (80012d8 <_ZN10STM32H7LedD1Ev+0x1c>)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	601a      	str	r2, [r3, #0]
	// TODO Auto-generated destructor stub
}
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	08006518 	.word	0x08006518

080012dc <_ZN10STM32H7LedD0Ev>:
STM32H7Led::~STM32H7Led(){
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
}
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ffe9 	bl	80012bc <_ZN10STM32H7LedD1Ev>
 80012ea:	210c      	movs	r1, #12
 80012ec:	6878      	ldr	r0, [r7, #4]
 80012ee:	f005 f853 	bl	8006398 <_ZdlPvj>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4618      	mov	r0, r3
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}

080012fc <_ZN10STM32H7Led9toggleLEDEv>:
void STM32H7Led::toggleLED(void){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(Port, Pin);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	891b      	ldrh	r3, [r3, #8]
 800130c:	4619      	mov	r1, r3
 800130e:	4610      	mov	r0, r2
 8001310:	f000 ffab 	bl	800226a <HAL_GPIO_TogglePin>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}

0800131c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b082      	sub	sp, #8
 8001320:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001322:	2003      	movs	r0, #3
 8001324:	f000 f982 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001328:	f001 ff7e 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 800132c:	4602      	mov	r2, r0
 800132e:	4b15      	ldr	r3, [pc, #84]	@ (8001384 <HAL_Init+0x68>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	0a1b      	lsrs	r3, r3, #8
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	4913      	ldr	r1, [pc, #76]	@ (8001388 <HAL_Init+0x6c>)
 800133a:	5ccb      	ldrb	r3, [r1, r3]
 800133c:	f003 031f 	and.w	r3, r3, #31
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001346:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <HAL_Init+0x68>)
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	f003 030f 	and.w	r3, r3, #15
 800134e:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <HAL_Init+0x6c>)
 8001350:	5cd3      	ldrb	r3, [r2, r3]
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	fa22 f303 	lsr.w	r3, r2, r3
 800135c:	4a0b      	ldr	r2, [pc, #44]	@ (800138c <HAL_Init+0x70>)
 800135e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001360:	4a0b      	ldr	r2, [pc, #44]	@ (8001390 <HAL_Init+0x74>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001366:	2000      	movs	r0, #0
 8001368:	f000 f814 	bl	8001394 <HAL_InitTick>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e002      	b.n	800137c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001376:	f7ff fc49 	bl	8000c0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800137a:	2300      	movs	r3, #0
}
 800137c:	4618      	mov	r0, r3
 800137e:	3708      	adds	r7, #8
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	58024400 	.word	0x58024400
 8001388:	080064d0 	.word	0x080064d0
 800138c:	24000004 	.word	0x24000004
 8001390:	24000000 	.word	0x24000000

08001394 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800139c:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_InitTick+0x60>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d101      	bne.n	80013a8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e021      	b.n	80013ec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013a8:	4b13      	ldr	r3, [pc, #76]	@ (80013f8 <HAL_InitTick+0x64>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_InitTick+0x60>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	4619      	mov	r1, r3
 80013b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80013ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80013be:	4618      	mov	r0, r3
 80013c0:	f000 f959 	bl	8001676 <HAL_SYSTICK_Config>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e00e      	b.n	80013ec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2b0f      	cmp	r3, #15
 80013d2:	d80a      	bhi.n	80013ea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013d4:	2200      	movs	r2, #0
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	f04f 30ff 	mov.w	r0, #4294967295
 80013dc:	f000 f931 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013e0:	4a06      	ldr	r2, [pc, #24]	@ (80013fc <HAL_InitTick+0x68>)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
 80013e8:	e000      	b.n	80013ec <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	3708      	adds	r7, #8
 80013f0:	46bd      	mov	sp, r7
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	2400000c 	.word	0x2400000c
 80013f8:	24000000 	.word	0x24000000
 80013fc:	24000008 	.word	0x24000008

08001400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001404:	4b06      	ldr	r3, [pc, #24]	@ (8001420 <HAL_IncTick+0x20>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	4b06      	ldr	r3, [pc, #24]	@ (8001424 <HAL_IncTick+0x24>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	4413      	add	r3, r2
 8001410:	4a04      	ldr	r2, [pc, #16]	@ (8001424 <HAL_IncTick+0x24>)
 8001412:	6013      	str	r3, [r2, #0]
}
 8001414:	bf00      	nop
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	2400000c 	.word	0x2400000c
 8001424:	240007c8 	.word	0x240007c8

08001428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  return uwTick;
 800142c:	4b03      	ldr	r3, [pc, #12]	@ (800143c <HAL_GetTick+0x14>)
 800142e:	681b      	ldr	r3, [r3, #0]
}
 8001430:	4618      	mov	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	240007c8 	.word	0x240007c8

08001440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001448:	f7ff ffee 	bl	8001428 <HAL_GetTick>
 800144c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001458:	d005      	beq.n	8001466 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800145a:	4b0a      	ldr	r3, [pc, #40]	@ (8001484 <HAL_Delay+0x44>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	461a      	mov	r2, r3
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	4413      	add	r3, r2
 8001464:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001466:	bf00      	nop
 8001468:	f7ff ffde 	bl	8001428 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	68bb      	ldr	r3, [r7, #8]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	68fa      	ldr	r2, [r7, #12]
 8001474:	429a      	cmp	r2, r3
 8001476:	d8f7      	bhi.n	8001468 <HAL_Delay+0x28>
  {
  }
}
 8001478:	bf00      	nop
 800147a:	bf00      	nop
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	2400000c 	.word	0x2400000c

08001488 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800148c:	4b03      	ldr	r3, [pc, #12]	@ (800149c <HAL_GetREVID+0x14>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	0c1b      	lsrs	r3, r3, #16
}
 8001492:	4618      	mov	r0, r3
 8001494:	46bd      	mov	sp, r7
 8001496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149a:	4770      	bx	lr
 800149c:	5c001000 	.word	0x5c001000

080014a0 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 80014b0:	4904      	ldr	r1, [pc, #16]	@ (80014c4 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	604b      	str	r3, [r1, #4]
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	58000400 	.word	0x58000400

080014c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014c8:	b480      	push	{r7}
 80014ca:	b085      	sub	sp, #20
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	f003 0307 	and.w	r3, r3, #7
 80014d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014d8:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <__NVIC_SetPriorityGrouping+0x40>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014e4:	4013      	ands	r3, r2
 80014e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f0:	4b06      	ldr	r3, [pc, #24]	@ (800150c <__NVIC_SetPriorityGrouping+0x44>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014f6:	4a04      	ldr	r2, [pc, #16]	@ (8001508 <__NVIC_SetPriorityGrouping+0x40>)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	60d3      	str	r3, [r2, #12]
}
 80014fc:	bf00      	nop
 80014fe:	3714      	adds	r7, #20
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr
 8001508:	e000ed00 	.word	0xe000ed00
 800150c:	05fa0000 	.word	0x05fa0000

08001510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001514:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <__NVIC_GetPriorityGrouping+0x18>)
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	0a1b      	lsrs	r3, r3, #8
 800151a:	f003 0307 	and.w	r3, r3, #7
}
 800151e:	4618      	mov	r0, r3
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	@ (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	@ (800157c <__NVIC_SetPriority+0x50>)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	@ 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	@ 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	@ (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	@ (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff47 	bl	80014c8 <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001650:	f7ff ff5e 	bl	8001510 <__NVIC_GetPriorityGrouping>
 8001654:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	6978      	ldr	r0, [r7, #20]
 800165c:	f7ff ff90 	bl	8001580 <NVIC_EncodePriority>
 8001660:	4602      	mov	r2, r0
 8001662:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff ff5f 	bl	800152c <__NVIC_SetPriority>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b082      	sub	sp, #8
 800167a:	af00      	add	r7, sp, #0
 800167c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f7ff ffb2 	bl	80015e8 <SysTick_Config>
 8001684:	4603      	mov	r3, r0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3708      	adds	r7, #8
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
	...

08001690 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e0cf      	b.n	8001842 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d106      	bne.n	80016ba <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2223      	movs	r2, #35	@ 0x23
 80016b0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f7ff fac3 	bl	8000c40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	4b64      	ldr	r3, [pc, #400]	@ (800184c <HAL_ETH_Init+0x1bc>)
 80016bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016c0:	4a62      	ldr	r2, [pc, #392]	@ (800184c <HAL_ETH_Init+0x1bc>)
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80016ca:	4b60      	ldr	r3, [pc, #384]	@ (800184c <HAL_ETH_Init+0x1bc>)
 80016cc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80016d0:	f003 0302 	and.w	r3, r3, #2
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	7a1b      	ldrb	r3, [r3, #8]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d103      	bne.n	80016e8 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f7ff fedd 	bl	80014a0 <HAL_SYSCFG_ETHInterfaceSelect>
 80016e6:	e003      	b.n	80016f0 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016e8:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 80016ec:	f7ff fed8 	bl	80014a0 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80016f0:	4b57      	ldr	r3, [pc, #348]	@ (8001850 <HAL_ETH_Init+0x1c0>)
 80016f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800170a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800170c:	f7ff fe8c 	bl	8001428 <HAL_GetTick>
 8001710:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001712:	e011      	b.n	8001738 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001714:	f7ff fe88 	bl	8001428 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001722:	d909      	bls.n	8001738 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2204      	movs	r2, #4
 8001728:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	22e0      	movs	r2, #224	@ 0xe0
 8001730:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      /* Return Error */
      return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e084      	b.n	8001842 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1e4      	bne.n	8001714 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f000 f886 	bl	800185c <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001750:	f001 fee4 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8001754:	4603      	mov	r3, r0
 8001756:	4a3f      	ldr	r2, [pc, #252]	@ (8001854 <HAL_ETH_Init+0x1c4>)
 8001758:	fba2 2303 	umull	r2, r3, r2, r3
 800175c:	0c9a      	lsrs	r2, r3, #18
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	3a01      	subs	r2, #1
 8001764:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 fa71 	bl	8001c50 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001776:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800177a:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	6812      	ldr	r2, [r2, #0]
 8001782:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001786:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800178a:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
 8001792:	f003 0303 	and.w	r3, r3, #3
 8001796:	2b00      	cmp	r3, #0
 8001798:	d009      	beq.n	80017ae <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2201      	movs	r2, #1
 800179e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	22e0      	movs	r2, #224	@ 0xe0
 80017a6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    /* Return Error */
    return HAL_ERROR;
 80017aa:	2301      	movs	r3, #1
 80017ac:	e049      	b.n	8001842 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80017b6:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80017ba:	4b27      	ldr	r3, [pc, #156]	@ (8001858 <HAL_ETH_Init+0x1c8>)
 80017bc:	4013      	ands	r3, r2
 80017be:	687a      	ldr	r2, [r7, #4]
 80017c0:	6952      	ldr	r2, [r2, #20]
 80017c2:	0051      	lsls	r1, r2, #1
 80017c4:	687a      	ldr	r2, [r7, #4]
 80017c6:	6812      	ldr	r2, [r2, #0]
 80017c8:	430b      	orrs	r3, r1
 80017ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80017ce:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fad9 	bl	8001d8a <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f000 fb1f 	bl	8001e1c <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	3305      	adds	r3, #5
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	021a      	lsls	r2, r3, #8
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	3304      	adds	r3, #4
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	430a      	orrs	r2, r1
 80017f8:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	3303      	adds	r3, #3
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	061a      	lsls	r2, r3, #24
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	3302      	adds	r3, #2
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	041b      	lsls	r3, r3, #16
 8001810:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	3301      	adds	r3, #1
 8001818:	781b      	ldrb	r3, [r3, #0]
 800181a:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800181c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800182a:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800182c:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2210      	movs	r2, #16
 800183c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	58024400 	.word	0x58024400
 8001850:	58000400 	.word	0x58000400
 8001854:	431bde83 	.word	0x431bde83
 8001858:	ffff8001 	.word	0xffff8001

0800185c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800186c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001874:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001876:	f001 fe51 	bl	800351c <HAL_RCC_GetHCLKFreq>
 800187a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d908      	bls.n	8001896 <HAL_ETH_SetMDIOClockRange+0x3a>
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4a1d      	ldr	r2, [pc, #116]	@ (80018fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d804      	bhi.n	8001896 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	e027      	b.n	80018e6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001896:	68bb      	ldr	r3, [r7, #8]
 8001898:	4a18      	ldr	r2, [pc, #96]	@ (80018fc <HAL_ETH_SetMDIOClockRange+0xa0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d908      	bls.n	80018b0 <HAL_ETH_SetMDIOClockRange+0x54>
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d204      	bcs.n	80018b0 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e01a      	b.n	80018e6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4a13      	ldr	r2, [pc, #76]	@ (8001900 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d303      	bcc.n	80018c0 <HAL_ETH_SetMDIOClockRange+0x64>
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	4a12      	ldr	r2, [pc, #72]	@ (8001904 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d911      	bls.n	80018e4 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4a10      	ldr	r2, [pc, #64]	@ (8001904 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d908      	bls.n	80018da <HAL_ETH_SetMDIOClockRange+0x7e>
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001908 <HAL_ETH_SetMDIOClockRange+0xac>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d804      	bhi.n	80018da <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d6:	60fb      	str	r3, [r7, #12]
 80018d8:	e005      	b.n	80018e6 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018e0:	60fb      	str	r3, [r7, #12]
 80018e2:	e000      	b.n	80018e6 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018e4:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
}
 80018f0:	bf00      	nop
 80018f2:	3710      	adds	r7, #16
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	01312cff 	.word	0x01312cff
 80018fc:	02160ebf 	.word	0x02160ebf
 8001900:	03938700 	.word	0x03938700
 8001904:	05f5e0ff 	.word	0x05f5e0ff
 8001908:	08f0d17f 	.word	0x08f0d17f

0800190c <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800190c:	b480      	push	{r7}
 800190e:	b085      	sub	sp, #20
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
 8001914:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800191e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	791b      	ldrb	r3, [r3, #4]
 8001924:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8001926:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	7b1b      	ldrb	r3, [r3, #12]
 800192c:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800192e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	7b5b      	ldrb	r3, [r3, #13]
 8001934:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8001936:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	7b9b      	ldrb	r3, [r3, #14]
 800193c:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800193e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	7bdb      	ldrb	r3, [r3, #15]
 8001944:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8001946:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	7c12      	ldrb	r2, [r2, #16]
 800194c:	2a00      	cmp	r2, #0
 800194e:	d102      	bne.n	8001956 <ETH_SetMACConfig+0x4a>
 8001950:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8001954:	e000      	b.n	8001958 <ETH_SetMACConfig+0x4c>
 8001956:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001958:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800195a:	683a      	ldr	r2, [r7, #0]
 800195c:	7c52      	ldrb	r2, [r2, #17]
 800195e:	2a00      	cmp	r2, #0
 8001960:	d102      	bne.n	8001968 <ETH_SetMACConfig+0x5c>
 8001962:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001966:	e000      	b.n	800196a <ETH_SetMACConfig+0x5e>
 8001968:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800196a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	7c9b      	ldrb	r3, [r3, #18]
 8001970:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001972:	431a      	orrs	r2, r3
               macconf->Speed |
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8001978:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800197e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	7f1b      	ldrb	r3, [r3, #28]
 8001984:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8001986:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	7f5b      	ldrb	r3, [r3, #29]
 800198c:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800198e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001990:	683a      	ldr	r2, [r7, #0]
 8001992:	7f92      	ldrb	r2, [r2, #30]
 8001994:	2a00      	cmp	r2, #0
 8001996:	d102      	bne.n	800199e <ETH_SetMACConfig+0x92>
 8001998:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800199c:	e000      	b.n	80019a0 <ETH_SetMACConfig+0x94>
 800199e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80019a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	7fdb      	ldrb	r3, [r3, #31]
 80019a6:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80019a8:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	f892 2020 	ldrb.w	r2, [r2, #32]
 80019b0:	2a00      	cmp	r2, #0
 80019b2:	d102      	bne.n	80019ba <ETH_SetMACConfig+0xae>
 80019b4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019b8:	e000      	b.n	80019bc <ETH_SetMACConfig+0xb0>
 80019ba:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80019bc:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80019c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80019ca:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019cc:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019d2:	4313      	orrs	r3, r2
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	4b56      	ldr	r3, [pc, #344]	@ (8001b38 <ETH_SetMACConfig+0x22c>)
 80019de:	4013      	ands	r3, r2
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	6812      	ldr	r2, [r2, #0]
 80019e4:	68f9      	ldr	r1, [r7, #12]
 80019e6:	430b      	orrs	r3, r1
 80019e8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ee:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80019f6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a00:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001a02:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8001a0a:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001a0c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001a0e:	683a      	ldr	r2, [r7, #0]
 8001a10:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8001a14:	2a00      	cmp	r2, #0
 8001a16:	d102      	bne.n	8001a1e <ETH_SetMACConfig+0x112>
 8001a18:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a1c:	e000      	b.n	8001a20 <ETH_SetMACConfig+0x114>
 8001a1e:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001a20:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4b42      	ldr	r3, [pc, #264]	@ (8001b3c <ETH_SetMACConfig+0x230>)
 8001a32:	4013      	ands	r3, r2
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	6812      	ldr	r2, [r2, #0]
 8001a38:	68f9      	ldr	r1, [r7, #12]
 8001a3a:	430b      	orrs	r3, r1
 8001a3c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001a44:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	68da      	ldr	r2, [r3, #12]
 8001a54:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <ETH_SetMACConfig+0x234>)
 8001a56:	4013      	ands	r3, r2
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	68f9      	ldr	r1, [r7, #12]
 8001a5e:	430b      	orrs	r3, r1
 8001a60:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8001a68:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a70:	683a      	ldr	r2, [r7, #0]
 8001a72:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8001a76:	2a00      	cmp	r2, #0
 8001a78:	d101      	bne.n	8001a7e <ETH_SetMACConfig+0x172>
 8001a7a:	2280      	movs	r2, #128	@ 0x80
 8001a7c:	e000      	b.n	8001a80 <ETH_SetMACConfig+0x174>
 8001a7e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a80:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a86:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001a92:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8001a96:	4013      	ands	r3, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	68f9      	ldr	r1, [r7, #12]
 8001a9e:	430b      	orrs	r3, r1
 8001aa0:	6713      	str	r3, [r2, #112]	@ 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8001aa8:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8001ab0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001abe:	f023 0103 	bic.w	r1, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8001ad6:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001aec:	683a      	ldr	r2, [r7, #0]
 8001aee:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8001af2:	2a00      	cmp	r2, #0
 8001af4:	d101      	bne.n	8001afa <ETH_SetMACConfig+0x1ee>
 8001af6:	2240      	movs	r2, #64	@ 0x40
 8001af8:	e000      	b.n	8001afc <ETH_SetMACConfig+0x1f0>
 8001afa:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001afc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8001b04:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001b06:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8001b0e:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001b10:	4313      	orrs	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8001b1c:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	430a      	orrs	r2, r1
 8001b28:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	00048083 	.word	0x00048083
 8001b3c:	c0f88000 	.word	0xc0f88000
 8001b40:	fffffef0 	.word	0xfffffef0

08001b44 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4b38      	ldr	r3, [pc, #224]	@ (8001c3c <ETH_SetDMAConfig+0xf8>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	683a      	ldr	r2, [r7, #0]
 8001b5e:	6811      	ldr	r1, [r2, #0]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	430b      	orrs	r3, r1
 8001b66:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b6a:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	791b      	ldrb	r3, [r3, #4]
 8001b70:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b76:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	7b1b      	ldrb	r3, [r3, #12]
 8001b7c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001b8a:	685a      	ldr	r2, [r3, #4]
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	@ (8001c40 <ETH_SetDMAConfig+0xfc>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001b9c:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	7b5b      	ldrb	r3, [r3, #13]
 8001ba2:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8001bb8:	4b22      	ldr	r3, [pc, #136]	@ (8001c44 <ETH_SetDMAConfig+0x100>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	68f9      	ldr	r1, [r7, #12]
 8001bc2:	430b      	orrs	r3, r1
 8001bc4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bc8:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	7d1b      	ldrb	r3, [r3, #20]
 8001bd4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bd6:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	7f5b      	ldrb	r3, [r3, #29]
 8001bdc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bde:	4313      	orrs	r3, r2
 8001be0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001bea:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8001bee:	4b16      	ldr	r3, [pc, #88]	@ (8001c48 <ETH_SetDMAConfig+0x104>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6812      	ldr	r2, [r2, #0]
 8001bf6:	68f9      	ldr	r1, [r7, #12]
 8001bf8:	430b      	orrs	r3, r1
 8001bfa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001bfe:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	7f1b      	ldrb	r3, [r3, #28]
 8001c06:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001c18:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <ETH_SetDMAConfig+0x108>)
 8001c1e:	4013      	ands	r3, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	68f9      	ldr	r1, [r7, #12]
 8001c26:	430b      	orrs	r3, r1
 8001c28:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8001c2c:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
}
 8001c30:	bf00      	nop
 8001c32:	3714      	adds	r7, #20
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	ffff87fd 	.word	0xffff87fd
 8001c40:	ffff2ffe 	.word	0xffff2ffe
 8001c44:	fffec000 	.word	0xfffec000
 8001c48:	ffc0efef 	.word	0xffc0efef
 8001c4c:	7fc0ffff 	.word	0x7fc0ffff

08001c50 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b0a4      	sub	sp, #144	@ 0x90
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	653b      	str	r3, [r7, #80]	@ 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c62:	2300      	movs	r3, #0
 8001c64:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c74:	2301      	movs	r3, #1
 8001c76:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c86:	2301      	movs	r3, #1
 8001c88:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c90:	647b      	str	r3, [r7, #68]	@ 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	66bb      	str	r3, [r7, #104]	@ 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001ca8:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8001cac:	663b      	str	r3, [r7, #96]	@ 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	637b      	str	r3, [r7, #52]	@ 0x34
  macDefaultConf.Jabber = ENABLE;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	67fb      	str	r3, [r7, #124]	@ 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	677b      	str	r3, [r7, #116]	@ 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	65bb      	str	r3, [r7, #88]	@ 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001ce8:	2320      	movs	r3, #32
 8001cea:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cfa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8001cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001d00:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d04:	643b      	str	r3, [r7, #64]	@ 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	673b      	str	r3, [r7, #112]	@ 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d34:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d38:	4619      	mov	r1, r3
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f7ff fde6 	bl	800190c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d40:	2301      	movs	r3, #1
 8001d42:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d44:	2301      	movs	r3, #1
 8001d46:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d52:	2300      	movs	r3, #0
 8001d54:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d5a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d5e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d64:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001d68:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d70:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8001d74:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d76:	f107 0308 	add.w	r3, r7, #8
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f7ff fee1 	bl	8001b44 <ETH_SetDMAConfig>
}
 8001d82:	bf00      	nop
 8001d84:	3790      	adds	r7, #144	@ 0x90
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}

08001d8a <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d8a:	b480      	push	{r7}
 8001d8c:	b085      	sub	sp, #20
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	e01d      	b.n	8001dd4 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68d9      	ldr	r1, [r3, #12]
 8001d9c:	68fa      	ldr	r2, [r7, #12]
 8001d9e:	4613      	mov	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	4413      	add	r3, r2
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	2200      	movs	r2, #0
 8001db4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001dc2:	68b9      	ldr	r1, [r7, #8]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68fa      	ldr	r2, [r7, #12]
 8001dc8:	3206      	adds	r2, #6
 8001dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	d9de      	bls.n	8001d98 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2200      	movs	r2, #0
 8001dde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001de8:	461a      	mov	r2, r3
 8001dea:	2303      	movs	r3, #3
 8001dec:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001dfc:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e0c:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
}
 8001e10:	bf00      	nop
 8001e12:	3714      	adds	r7, #20
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr

08001e1c <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b085      	sub	sp, #20
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e24:	2300      	movs	r3, #0
 8001e26:	60fb      	str	r3, [r7, #12]
 8001e28:	e023      	b.n	8001e72 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6919      	ldr	r1, [r3, #16]
 8001e2e:	68fa      	ldr	r2, [r7, #12]
 8001e30:	4613      	mov	r3, r2
 8001e32:	005b      	lsls	r3, r3, #1
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	440b      	add	r3, r1
 8001e3a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2200      	movs	r2, #0
 8001e46:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	2200      	movs	r2, #0
 8001e52:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e60:	68b9      	ldr	r1, [r7, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	3212      	adds	r2, #18
 8001e68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	3301      	adds	r3, #1
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2b03      	cmp	r3, #3
 8001e76:	d9d8      	bls.n	8001e2a <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	65da      	str	r2, [r3, #92]	@ 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	661a      	str	r2, [r3, #96]	@ 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	669a      	str	r2, [r3, #104]	@ 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	66da      	str	r2, [r3, #108]	@ 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691a      	ldr	r2, [r3, #16]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001eb2:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8001ec6:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
}
 8001eca:	bf00      	nop
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b089      	sub	sp, #36	@ 0x24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001ee6:	4b89      	ldr	r3, [pc, #548]	@ (800210c <HAL_GPIO_Init+0x234>)
 8001ee8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001eea:	e194      	b.n	8002216 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	2101      	movs	r1, #1
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef8:	4013      	ands	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f000 8186 	beq.w	8002210 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f003 0303 	and.w	r3, r3, #3
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d005      	beq.n	8001f1c <HAL_GPIO_Init+0x44>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f003 0303 	and.w	r3, r3, #3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d130      	bne.n	8001f7e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	2203      	movs	r2, #3
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	43db      	mvns	r3, r3
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	68da      	ldr	r2, [r3, #12]
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f52:	2201      	movs	r2, #1
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	091b      	lsrs	r3, r3, #4
 8001f68:	f003 0201 	and.w	r2, r3, #1
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f003 0303 	and.w	r3, r3, #3
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d017      	beq.n	8001fba <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	68db      	ldr	r3, [r3, #12]
 8001f8e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	2203      	movs	r2, #3
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	685b      	ldr	r3, [r3, #4]
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d123      	bne.n	800200e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	08da      	lsrs	r2, r3, #3
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	3208      	adds	r2, #8
 8001fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	220f      	movs	r2, #15
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	08da      	lsrs	r2, r3, #3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3208      	adds	r2, #8
 8002008:	69b9      	ldr	r1, [r7, #24]
 800200a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	2203      	movs	r2, #3
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	f003 0203 	and.w	r2, r3, #3
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	fa02 f303 	lsl.w	r3, r2, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4313      	orrs	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80e0 	beq.w	8002210 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002050:	4b2f      	ldr	r3, [pc, #188]	@ (8002110 <HAL_GPIO_Init+0x238>)
 8002052:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002056:	4a2e      	ldr	r2, [pc, #184]	@ (8002110 <HAL_GPIO_Init+0x238>)
 8002058:	f043 0302 	orr.w	r3, r3, #2
 800205c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002060:	4b2b      	ldr	r3, [pc, #172]	@ (8002110 <HAL_GPIO_Init+0x238>)
 8002062:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800206e:	4a29      	ldr	r2, [pc, #164]	@ (8002114 <HAL_GPIO_Init+0x23c>)
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	089b      	lsrs	r3, r3, #2
 8002074:	3302      	adds	r3, #2
 8002076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 0303 	and.w	r3, r3, #3
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	220f      	movs	r2, #15
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43db      	mvns	r3, r3
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	4013      	ands	r3, r2
 8002090:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	4a20      	ldr	r2, [pc, #128]	@ (8002118 <HAL_GPIO_Init+0x240>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d052      	beq.n	8002140 <HAL_GPIO_Init+0x268>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a1f      	ldr	r2, [pc, #124]	@ (800211c <HAL_GPIO_Init+0x244>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d031      	beq.n	8002106 <HAL_GPIO_Init+0x22e>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a1e      	ldr	r2, [pc, #120]	@ (8002120 <HAL_GPIO_Init+0x248>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d02b      	beq.n	8002102 <HAL_GPIO_Init+0x22a>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	@ (8002124 <HAL_GPIO_Init+0x24c>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d025      	beq.n	80020fe <HAL_GPIO_Init+0x226>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002128 <HAL_GPIO_Init+0x250>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <HAL_GPIO_Init+0x222>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a1b      	ldr	r2, [pc, #108]	@ (800212c <HAL_GPIO_Init+0x254>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d019      	beq.n	80020f6 <HAL_GPIO_Init+0x21e>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002130 <HAL_GPIO_Init+0x258>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d013      	beq.n	80020f2 <HAL_GPIO_Init+0x21a>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a19      	ldr	r2, [pc, #100]	@ (8002134 <HAL_GPIO_Init+0x25c>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d00d      	beq.n	80020ee <HAL_GPIO_Init+0x216>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a18      	ldr	r2, [pc, #96]	@ (8002138 <HAL_GPIO_Init+0x260>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d007      	beq.n	80020ea <HAL_GPIO_Init+0x212>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_GPIO_Init+0x264>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d101      	bne.n	80020e6 <HAL_GPIO_Init+0x20e>
 80020e2:	2309      	movs	r3, #9
 80020e4:	e02d      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020e6:	230a      	movs	r3, #10
 80020e8:	e02b      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020ea:	2308      	movs	r3, #8
 80020ec:	e029      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020ee:	2307      	movs	r3, #7
 80020f0:	e027      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020f2:	2306      	movs	r3, #6
 80020f4:	e025      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020f6:	2305      	movs	r3, #5
 80020f8:	e023      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020fa:	2304      	movs	r3, #4
 80020fc:	e021      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 80020fe:	2303      	movs	r3, #3
 8002100:	e01f      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 8002102:	2302      	movs	r3, #2
 8002104:	e01d      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 8002106:	2301      	movs	r3, #1
 8002108:	e01b      	b.n	8002142 <HAL_GPIO_Init+0x26a>
 800210a:	bf00      	nop
 800210c:	58000080 	.word	0x58000080
 8002110:	58024400 	.word	0x58024400
 8002114:	58000400 	.word	0x58000400
 8002118:	58020000 	.word	0x58020000
 800211c:	58020400 	.word	0x58020400
 8002120:	58020800 	.word	0x58020800
 8002124:	58020c00 	.word	0x58020c00
 8002128:	58021000 	.word	0x58021000
 800212c:	58021400 	.word	0x58021400
 8002130:	58021800 	.word	0x58021800
 8002134:	58021c00 	.word	0x58021c00
 8002138:	58022000 	.word	0x58022000
 800213c:	58022400 	.word	0x58022400
 8002140:	2300      	movs	r3, #0
 8002142:	69fa      	ldr	r2, [r7, #28]
 8002144:	f002 0203 	and.w	r2, r2, #3
 8002148:	0092      	lsls	r2, r2, #2
 800214a:	4093      	lsls	r3, r2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002152:	4938      	ldr	r1, [pc, #224]	@ (8002234 <HAL_GPIO_Init+0x35c>)
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	089b      	lsrs	r3, r3, #2
 8002158:	3302      	adds	r3, #2
 800215a:	69ba      	ldr	r2, [r7, #24]
 800215c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002160:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002168:	693b      	ldr	r3, [r7, #16]
 800216a:	43db      	mvns	r3, r3
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	4013      	ands	r3, r2
 8002170:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	4313      	orrs	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002186:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80021b4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	3301      	adds	r3, #1
 8002214:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
 8002220:	2b00      	cmp	r3, #0
 8002222:	f47f ae63 	bne.w	8001eec <HAL_GPIO_Init+0x14>
  }
}
 8002226:	bf00      	nop
 8002228:	bf00      	nop
 800222a:	3724      	adds	r7, #36	@ 0x24
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	58000400 	.word	0x58000400

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43d9      	mvns	r1, r3
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	400b      	ands	r3, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80022a8:	4a08      	ldr	r2, [pc, #32]	@ (80022cc <HAL_HSEM_FastTake+0x2c>)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3320      	adds	r3, #32
 80022ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022b2:	4a07      	ldr	r2, [pc, #28]	@ (80022d0 <HAL_HSEM_FastTake+0x30>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d101      	bne.n	80022bc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
}
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	58026400 	.word	0x58026400
 80022d0:	80000300 	.word	0x80000300

080022d4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80022de:	4906      	ldr	r1, [pc, #24]	@ (80022f8 <HAL_HSEM_Release+0x24>)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	58026400 	.word	0x58026400

080022fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022fe:	b08f      	sub	sp, #60	@ 0x3c
 8002300:	af0a      	add	r7, sp, #40	@ 0x28
 8002302:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e116      	b.n	800253c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b00      	cmp	r3, #0
 800231e:	d106      	bne.n	800232e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f7fe fdbd 	bl	8000ea8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800233a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800233e:	2b00      	cmp	r3, #0
 8002340:	d102      	bne.n	8002348 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4618      	mov	r0, r3
 800234e:	f003 fd87 	bl	8005e60 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	603b      	str	r3, [r7, #0]
 8002358:	687e      	ldr	r6, [r7, #4]
 800235a:	466d      	mov	r5, sp
 800235c:	f106 0410 	add.w	r4, r6, #16
 8002360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002368:	e894 0003 	ldmia.w	r4, {r0, r1}
 800236c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002370:	1d33      	adds	r3, r6, #4
 8002372:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002374:	6838      	ldr	r0, [r7, #0]
 8002376:	f003 fd05 	bl	8005d84 <USB_CoreInit>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d005      	beq.n	800238c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2202      	movs	r2, #2
 8002384:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	e0d7      	b.n	800253c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2100      	movs	r1, #0
 8002392:	4618      	mov	r0, r3
 8002394:	f003 fd75 	bl	8005e82 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002398:	2300      	movs	r3, #0
 800239a:	73fb      	strb	r3, [r7, #15]
 800239c:	e04a      	b.n	8002434 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800239e:	7bfa      	ldrb	r2, [r7, #15]
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	333d      	adds	r3, #61	@ 0x3d
 80023ae:	2201      	movs	r2, #1
 80023b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	333c      	adds	r3, #60	@ 0x3c
 80023c2:	7bfa      	ldrb	r2, [r7, #15]
 80023c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	7bfb      	ldrb	r3, [r7, #15]
 80023ca:	b298      	uxth	r0, r3
 80023cc:	6879      	ldr	r1, [r7, #4]
 80023ce:	4613      	mov	r3, r2
 80023d0:	00db      	lsls	r3, r3, #3
 80023d2:	4413      	add	r3, r2
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	440b      	add	r3, r1
 80023d8:	3344      	adds	r3, #68	@ 0x44
 80023da:	4602      	mov	r2, r0
 80023dc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023de:	7bfa      	ldrb	r2, [r7, #15]
 80023e0:	6879      	ldr	r1, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	00db      	lsls	r3, r3, #3
 80023e6:	4413      	add	r3, r2
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	440b      	add	r3, r1
 80023ec:	3340      	adds	r3, #64	@ 0x40
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023f2:	7bfa      	ldrb	r2, [r7, #15]
 80023f4:	6879      	ldr	r1, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3348      	adds	r3, #72	@ 0x48
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002406:	7bfa      	ldrb	r2, [r7, #15]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	00db      	lsls	r3, r3, #3
 800240e:	4413      	add	r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	334c      	adds	r3, #76	@ 0x4c
 8002416:	2200      	movs	r2, #0
 8002418:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800241a:	7bfa      	ldrb	r2, [r7, #15]
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	4613      	mov	r3, r2
 8002420:	00db      	lsls	r3, r3, #3
 8002422:	4413      	add	r3, r2
 8002424:	009b      	lsls	r3, r3, #2
 8002426:	440b      	add	r3, r1
 8002428:	3354      	adds	r3, #84	@ 0x54
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	3301      	adds	r3, #1
 8002432:	73fb      	strb	r3, [r7, #15]
 8002434:	7bfa      	ldrb	r2, [r7, #15]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	429a      	cmp	r2, r3
 800243c:	d3af      	bcc.n	800239e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
 8002442:	e044      	b.n	80024ce <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 800246c:	7bfa      	ldrb	r2, [r7, #15]
 800246e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002482:	2200      	movs	r2, #0
 8002484:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800249c:	7bfa      	ldrb	r2, [r7, #15]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	00db      	lsls	r3, r3, #3
 80024a4:	4413      	add	r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80024ae:	2200      	movs	r2, #0
 80024b0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80024b2:	7bfa      	ldrb	r2, [r7, #15]
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	4613      	mov	r3, r2
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	440b      	add	r3, r1
 80024c0:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 80024c4:	2200      	movs	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	3301      	adds	r3, #1
 80024cc:	73fb      	strb	r3, [r7, #15]
 80024ce:	7bfa      	ldrb	r2, [r7, #15]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d3b5      	bcc.n	8002444 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	687e      	ldr	r6, [r7, #4]
 80024e0:	466d      	mov	r5, sp
 80024e2:	f106 0410 	add.w	r4, r6, #16
 80024e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024f6:	1d33      	adds	r3, r6, #4
 80024f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fa:	6838      	ldr	r0, [r7, #0]
 80024fc:	f003 fd0e 	bl	8005f1c <USB_DevInit>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e014      	b.n	800253c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	2b01      	cmp	r3, #1
 8002528:	d102      	bne.n	8002530 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f80a 	bl	8002544 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f003 fecc 	bl	80062d2 <USB_DevDisconnect>

  return HAL_OK;
 800253a:	2300      	movs	r3, #0
}
 800253c:	4618      	mov	r0, r3
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002544 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2201      	movs	r2, #1
 8002556:	f8c3 2500 	str.w	r2, [r3, #1280]	@ 0x500
  hpcd->LPM_State = LPM_L0;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002572:	4b05      	ldr	r3, [pc, #20]	@ (8002588 <HAL_PCDEx_ActivateLPM+0x44>)
 8002574:	4313      	orrs	r3, r2
 8002576:	68fa      	ldr	r2, [r7, #12]
 8002578:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	10000003 	.word	0x10000003

0800258c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002594:	4b29      	ldr	r3, [pc, #164]	@ (800263c <HAL_PWREx_ConfigSupply+0xb0>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	f003 0307 	and.w	r3, r3, #7
 800259c:	2b06      	cmp	r3, #6
 800259e:	d00a      	beq.n	80025b6 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80025a0:	4b26      	ldr	r3, [pc, #152]	@ (800263c <HAL_PWREx_ConfigSupply+0xb0>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	429a      	cmp	r2, r3
 80025ac:	d001      	beq.n	80025b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e040      	b.n	8002634 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e03e      	b.n	8002634 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80025b6:	4b21      	ldr	r3, [pc, #132]	@ (800263c <HAL_PWREx_ConfigSupply+0xb0>)
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80025be:	491f      	ldr	r1, [pc, #124]	@ (800263c <HAL_PWREx_ConfigSupply+0xb0>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80025c6:	f7fe ff2f 	bl	8001428 <HAL_GetTick>
 80025ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025cc:	e009      	b.n	80025e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025ce:	f7fe ff2b 	bl	8001428 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025dc:	d901      	bls.n	80025e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e028      	b.n	8002634 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025e2:	4b16      	ldr	r3, [pc, #88]	@ (800263c <HAL_PWREx_ConfigSupply+0xb0>)
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025ee:	d1ee      	bne.n	80025ce <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b1e      	cmp	r3, #30
 80025f4:	d008      	beq.n	8002608 <HAL_PWREx_ConfigSupply+0x7c>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80025fa:	d005      	beq.n	8002608 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2b1d      	cmp	r3, #29
 8002600:	d002      	beq.n	8002608 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2b2d      	cmp	r3, #45	@ 0x2d
 8002606:	d114      	bne.n	8002632 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002608:	f7fe ff0e 	bl	8001428 <HAL_GetTick>
 800260c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800260e:	e009      	b.n	8002624 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002610:	f7fe ff0a 	bl	8001428 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800261e:	d901      	bls.n	8002624 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	e007      	b.n	8002634 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002624:	4b05      	ldr	r3, [pc, #20]	@ (800263c <HAL_PWREx_ConfigSupply+0xb0>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002630:	d1ee      	bne.n	8002610 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002632:	2300      	movs	r3, #0
}
 8002634:	4618      	mov	r0, r3
 8002636:	3710      	adds	r7, #16
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}
 800263c:	58024800 	.word	0x58024800

08002640 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002644:	4b05      	ldr	r3, [pc, #20]	@ (800265c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	4a04      	ldr	r2, [pc, #16]	@ (800265c <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800264a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800264e:	60d3      	str	r3, [r2, #12]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	58024800 	.word	0x58024800

08002660 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b08c      	sub	sp, #48	@ 0x30
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d102      	bne.n	8002674 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	f000 bc1d 	b.w	8002eae <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	2b00      	cmp	r3, #0
 800267e:	f000 8087 	beq.w	8002790 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002682:	4b99      	ldr	r3, [pc, #612]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800268c:	4b96      	ldr	r3, [pc, #600]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800268e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002690:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	2b10      	cmp	r3, #16
 8002696:	d007      	beq.n	80026a8 <HAL_RCC_OscConfig+0x48>
 8002698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269a:	2b18      	cmp	r3, #24
 800269c:	d110      	bne.n	80026c0 <HAL_RCC_OscConfig+0x60>
 800269e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a0:	f003 0303 	and.w	r3, r3, #3
 80026a4:	2b02      	cmp	r3, #2
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a8:	4b8f      	ldr	r3, [pc, #572]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d06c      	beq.n	800278e <HAL_RCC_OscConfig+0x12e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d168      	bne.n	800278e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e3f6      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c8:	d106      	bne.n	80026d8 <HAL_RCC_OscConfig+0x78>
 80026ca:	4b87      	ldr	r3, [pc, #540]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a86      	ldr	r2, [pc, #536]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e02e      	b.n	8002736 <HAL_RCC_OscConfig+0xd6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10c      	bne.n	80026fa <HAL_RCC_OscConfig+0x9a>
 80026e0:	4b81      	ldr	r3, [pc, #516]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a80      	ldr	r2, [pc, #512]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80026ea:	6013      	str	r3, [r2, #0]
 80026ec:	4b7e      	ldr	r3, [pc, #504]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a7d      	ldr	r2, [pc, #500]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80026f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	e01d      	b.n	8002736 <HAL_RCC_OscConfig+0xd6>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002702:	d10c      	bne.n	800271e <HAL_RCC_OscConfig+0xbe>
 8002704:	4b78      	ldr	r3, [pc, #480]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	4a77      	ldr	r2, [pc, #476]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800270a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270e:	6013      	str	r3, [r2, #0]
 8002710:	4b75      	ldr	r3, [pc, #468]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a74      	ldr	r2, [pc, #464]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002716:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800271a:	6013      	str	r3, [r2, #0]
 800271c:	e00b      	b.n	8002736 <HAL_RCC_OscConfig+0xd6>
 800271e:	4b72      	ldr	r3, [pc, #456]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a71      	ldr	r2, [pc, #452]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b6f      	ldr	r3, [pc, #444]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a6e      	ldr	r2, [pc, #440]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002734:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d013      	beq.n	8002766 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273e:	f7fe fe73 	bl	8001428 <HAL_GetTick>
 8002742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002744:	e008      	b.n	8002758 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002746:	f7fe fe6f 	bl	8001428 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	2b64      	cmp	r3, #100	@ 0x64
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e3aa      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002758:	4b63      	ldr	r3, [pc, #396]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0f0      	beq.n	8002746 <HAL_RCC_OscConfig+0xe6>
 8002764:	e014      	b.n	8002790 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fe5f 	bl	8001428 <HAL_GetTick>
 800276a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800276e:	f7fe fe5b 	bl	8001428 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b64      	cmp	r3, #100	@ 0x64
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e396      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002780:	4b59      	ldr	r3, [pc, #356]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f0      	bne.n	800276e <HAL_RCC_OscConfig+0x10e>
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 80cb 	beq.w	8002934 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800279e:	4b52      	ldr	r3, [pc, #328]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a6:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027a8:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ac:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d007      	beq.n	80027c4 <HAL_RCC_OscConfig+0x164>
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	2b18      	cmp	r3, #24
 80027b8:	d156      	bne.n	8002868 <HAL_RCC_OscConfig+0x208>
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	f003 0303 	and.w	r3, r3, #3
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d151      	bne.n	8002868 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027c4:	4b48      	ldr	r3, [pc, #288]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d005      	beq.n	80027dc <HAL_RCC_OscConfig+0x17c>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e368      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027dc:	4b42      	ldr	r3, [pc, #264]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f023 0219 	bic.w	r2, r3, #25
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	493f      	ldr	r1, [pc, #252]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80027ea:	4313      	orrs	r3, r2
 80027ec:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027ee:	f7fe fe1b 	bl	8001428 <HAL_GetTick>
 80027f2:	6278      	str	r0, [r7, #36]	@ 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027f4:	e008      	b.n	8002808 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027f6:	f7fe fe17 	bl	8001428 <HAL_GetTick>
 80027fa:	4602      	mov	r2, r0
 80027fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	2b02      	cmp	r3, #2
 8002802:	d901      	bls.n	8002808 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8002804:	2303      	movs	r3, #3
 8002806:	e352      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002808:	4b37      	ldr	r3, [pc, #220]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	d0f0      	beq.n	80027f6 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002814:	f7fe fe38 	bl	8001488 <HAL_GetREVID>
 8002818:	4603      	mov	r3, r0
 800281a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800281e:	4293      	cmp	r3, r2
 8002820:	d817      	bhi.n	8002852 <HAL_RCC_OscConfig+0x1f2>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	2b40      	cmp	r3, #64	@ 0x40
 8002828:	d108      	bne.n	800283c <HAL_RCC_OscConfig+0x1dc>
 800282a:	4b2f      	ldr	r3, [pc, #188]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002832:	4a2d      	ldr	r2, [pc, #180]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002838:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283a:	e07b      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	4b2a      	ldr	r3, [pc, #168]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	031b      	lsls	r3, r3, #12
 800284a:	4927      	ldr	r1, [pc, #156]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800284c:	4313      	orrs	r3, r2
 800284e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002850:	e070      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	4b25      	ldr	r3, [pc, #148]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	691b      	ldr	r3, [r3, #16]
 800285e:	061b      	lsls	r3, r3, #24
 8002860:	4921      	ldr	r1, [pc, #132]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002862:	4313      	orrs	r3, r2
 8002864:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002866:	e065      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d048      	beq.n	8002902 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002870:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f023 0219 	bic.w	r2, r3, #25
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	491a      	ldr	r1, [pc, #104]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800287e:	4313      	orrs	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fdd1 	bl	8001428 <HAL_GetTick>
 8002886:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fdcd 	bl	8001428 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e308      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800289c:	4b12      	ldr	r3, [pc, #72]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0304 	and.w	r3, r3, #4
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	f7fe fdee 	bl	8001488 <HAL_GetREVID>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d81a      	bhi.n	80028ec <HAL_RCC_OscConfig+0x28c>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b40      	cmp	r3, #64	@ 0x40
 80028bc:	d108      	bne.n	80028d0 <HAL_RCC_OscConfig+0x270>
 80028be:	4b0a      	ldr	r3, [pc, #40]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80028c6:	4a08      	ldr	r2, [pc, #32]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028cc:	6053      	str	r3, [r2, #4]
 80028ce:	e031      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	031b      	lsls	r3, r3, #12
 80028de:	4902      	ldr	r1, [pc, #8]	@ (80028e8 <HAL_RCC_OscConfig+0x288>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	604b      	str	r3, [r1, #4]
 80028e4:	e026      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
 80028e6:	bf00      	nop
 80028e8:	58024400 	.word	0x58024400
 80028ec:	4b9a      	ldr	r3, [pc, #616]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	4997      	ldr	r1, [pc, #604]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	604b      	str	r3, [r1, #4]
 8002900:	e018      	b.n	8002934 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002902:	4b95      	ldr	r3, [pc, #596]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a94      	ldr	r2, [pc, #592]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002908:	f023 0301 	bic.w	r3, r3, #1
 800290c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290e:	f7fe fd8b 	bl	8001428 <HAL_GetTick>
 8002912:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002916:	f7fe fd87 	bl	8001428 <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e2c2      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002928:	4b8b      	ldr	r3, [pc, #556]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0304 	and.w	r3, r3, #4
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1f0      	bne.n	8002916 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0310 	and.w	r3, r3, #16
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80a9 	beq.w	8002a94 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002942:	4b85      	ldr	r3, [pc, #532]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	691b      	ldr	r3, [r3, #16]
 8002946:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800294a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800294c:	4b82      	ldr	r3, [pc, #520]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800294e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002950:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002952:	69bb      	ldr	r3, [r7, #24]
 8002954:	2b08      	cmp	r3, #8
 8002956:	d007      	beq.n	8002968 <HAL_RCC_OscConfig+0x308>
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b18      	cmp	r3, #24
 800295c:	d13a      	bne.n	80029d4 <HAL_RCC_OscConfig+0x374>
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	f003 0303 	and.w	r3, r3, #3
 8002964:	2b01      	cmp	r3, #1
 8002966:	d135      	bne.n	80029d4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002968:	4b7b      	ldr	r3, [pc, #492]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d005      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	69db      	ldr	r3, [r3, #28]
 8002978:	2b80      	cmp	r3, #128	@ 0x80
 800297a:	d001      	beq.n	8002980 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e296      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002980:	f7fe fd82 	bl	8001488 <HAL_GetREVID>
 8002984:	4603      	mov	r3, r0
 8002986:	f241 0203 	movw	r2, #4099	@ 0x1003
 800298a:	4293      	cmp	r3, r2
 800298c:	d817      	bhi.n	80029be <HAL_RCC_OscConfig+0x35e>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6a1b      	ldr	r3, [r3, #32]
 8002992:	2b20      	cmp	r3, #32
 8002994:	d108      	bne.n	80029a8 <HAL_RCC_OscConfig+0x348>
 8002996:	4b70      	ldr	r3, [pc, #448]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800299e:	4a6e      	ldr	r2, [pc, #440]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a6:	e075      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	069b      	lsls	r3, r3, #26
 80029b6:	4968      	ldr	r1, [pc, #416]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029bc:	e06a      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029be:	4b66      	ldr	r3, [pc, #408]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4962      	ldr	r1, [pc, #392]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029d2:	e05f      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d042      	beq.n	8002a62 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a5d      	ldr	r2, [pc, #372]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 80029e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e8:	f7fe fd1e 	bl	8001428 <HAL_GetTick>
 80029ec:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029ee:	e008      	b.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029f0:	f7fe fd1a 	bl	8001428 <HAL_GetTick>
 80029f4:	4602      	mov	r2, r0
 80029f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	2b02      	cmp	r3, #2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e255      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a02:	4b55      	ldr	r3, [pc, #340]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d0f0      	beq.n	80029f0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a0e:	f7fe fd3b 	bl	8001488 <HAL_GetREVID>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d817      	bhi.n	8002a4c <HAL_RCC_OscConfig+0x3ec>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	2b20      	cmp	r3, #32
 8002a22:	d108      	bne.n	8002a36 <HAL_RCC_OscConfig+0x3d6>
 8002a24:	4b4c      	ldr	r3, [pc, #304]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a2c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a32:	6053      	str	r3, [r2, #4]
 8002a34:	e02e      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
 8002a36:	4b48      	ldr	r3, [pc, #288]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	069b      	lsls	r3, r3, #26
 8002a44:	4944      	ldr	r1, [pc, #272]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	604b      	str	r3, [r1, #4]
 8002a4a:	e023      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
 8002a4c:	4b42      	ldr	r3, [pc, #264]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	061b      	lsls	r3, r3, #24
 8002a5a:	493f      	ldr	r1, [pc, #252]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	60cb      	str	r3, [r1, #12]
 8002a60:	e018      	b.n	8002a94 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a62:	4b3d      	ldr	r3, [pc, #244]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002a6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6e:	f7fe fcdb 	bl	8001428 <HAL_GetTick>
 8002a72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a74:	e008      	b.n	8002a88 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a76:	f7fe fcd7 	bl	8001428 <HAL_GetTick>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a7e:	1ad3      	subs	r3, r2, r3
 8002a80:	2b02      	cmp	r3, #2
 8002a82:	d901      	bls.n	8002a88 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e212      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d1f0      	bne.n	8002a76 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d036      	beq.n	8002b0e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d019      	beq.n	8002adc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aac:	4a2a      	ldr	r2, [pc, #168]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002aae:	f043 0301 	orr.w	r3, r3, #1
 8002ab2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab4:	f7fe fcb8 	bl	8001428 <HAL_GetTick>
 8002ab8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aba:	e008      	b.n	8002ace <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002abc:	f7fe fcb4 	bl	8001428 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b02      	cmp	r3, #2
 8002ac8:	d901      	bls.n	8002ace <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002aca:	2303      	movs	r3, #3
 8002acc:	e1ef      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ace:	4b22      	ldr	r3, [pc, #136]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ad0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0f0      	beq.n	8002abc <HAL_RCC_OscConfig+0x45c>
 8002ada:	e018      	b.n	8002b0e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002adc:	4b1e      	ldr	r3, [pc, #120]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ade:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ae0:	4a1d      	ldr	r2, [pc, #116]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002ae2:	f023 0301 	bic.w	r3, r3, #1
 8002ae6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fc9e 	bl	8001428 <HAL_GetTick>
 8002aec:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af0:	f7fe fc9a 	bl	8001428 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e1d5      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b02:	4b15      	ldr	r3, [pc, #84]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1f0      	bne.n	8002af0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0320 	and.w	r3, r3, #32
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d039      	beq.n	8002b8e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d01c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b22:	4b0d      	ldr	r3, [pc, #52]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a0c      	ldr	r2, [pc, #48]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b28:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fc7b 	bl	8001428 <HAL_GetTick>
 8002b32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b36:	f7fe fc77 	bl	8001428 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e1b2      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b48:	4b03      	ldr	r3, [pc, #12]	@ (8002b58 <HAL_RCC_OscConfig+0x4f8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x4d6>
 8002b54:	e01b      	b.n	8002b8e <HAL_RCC_OscConfig+0x52e>
 8002b56:	bf00      	nop
 8002b58:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b5c:	4b9b      	ldr	r3, [pc, #620]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a9a      	ldr	r2, [pc, #616]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002b66:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b68:	f7fe fc5e 	bl	8001428 <HAL_GetTick>
 8002b6c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b70:	f7fe fc5a 	bl	8001428 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e195      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b82:	4b92      	ldr	r3, [pc, #584]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d1f0      	bne.n	8002b70 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	f000 8081 	beq.w	8002c9e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b9c:	4b8c      	ldr	r3, [pc, #560]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a8b      	ldr	r2, [pc, #556]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ba6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002ba8:	f7fe fc3e 	bl	8001428 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002bb0:	f7fe fc3a 	bl	8001428 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b64      	cmp	r3, #100	@ 0x64
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e175      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bc2:	4b83      	ldr	r3, [pc, #524]	@ (8002dd0 <HAL_RCC_OscConfig+0x770>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d0f0      	beq.n	8002bb0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d106      	bne.n	8002be4 <HAL_RCC_OscConfig+0x584>
 8002bd6:	4b7d      	ldr	r3, [pc, #500]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bda:	4a7c      	ldr	r2, [pc, #496]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bdc:	f043 0301 	orr.w	r3, r3, #1
 8002be0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002be2:	e02d      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d10c      	bne.n	8002c06 <HAL_RCC_OscConfig+0x5a6>
 8002bec:	4b77      	ldr	r3, [pc, #476]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bf0:	4a76      	ldr	r2, [pc, #472]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bf2:	f023 0301 	bic.w	r3, r3, #1
 8002bf6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002bf8:	4b74      	ldr	r3, [pc, #464]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a73      	ldr	r2, [pc, #460]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	f023 0304 	bic.w	r3, r3, #4
 8002c02:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c04:	e01c      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	2b05      	cmp	r3, #5
 8002c0c:	d10c      	bne.n	8002c28 <HAL_RCC_OscConfig+0x5c8>
 8002c0e:	4b6f      	ldr	r3, [pc, #444]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c12:	4a6e      	ldr	r2, [pc, #440]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c14:	f043 0304 	orr.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c1a:	4b6c      	ldr	r3, [pc, #432]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1e:	4a6b      	ldr	r2, [pc, #428]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f043 0301 	orr.w	r3, r3, #1
 8002c24:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c26:	e00b      	b.n	8002c40 <HAL_RCC_OscConfig+0x5e0>
 8002c28:	4b68      	ldr	r3, [pc, #416]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c2c:	4a67      	ldr	r2, [pc, #412]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c34:	4b65      	ldr	r3, [pc, #404]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c38:	4a64      	ldr	r2, [pc, #400]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d015      	beq.n	8002c74 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fbee 	bl	8001428 <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe fbea 	bl	8001428 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e123      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c66:	4b59      	ldr	r3, [pc, #356]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d0ee      	beq.n	8002c50 <HAL_RCC_OscConfig+0x5f0>
 8002c72:	e014      	b.n	8002c9e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c74:	f7fe fbd8 	bl	8001428 <HAL_GetTick>
 8002c78:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c7a:	e00a      	b.n	8002c92 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c7c:	f7fe fbd4 	bl	8001428 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e10d      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c92:	4b4e      	ldr	r3, [pc, #312]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002c94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1ee      	bne.n	8002c7c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f000 8102 	beq.w	8002eac <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ca8:	4b48      	ldr	r3, [pc, #288]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002caa:	691b      	ldr	r3, [r3, #16]
 8002cac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cb0:	2b18      	cmp	r3, #24
 8002cb2:	f000 80bd 	beq.w	8002e30 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	f040 809e 	bne.w	8002dfc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cc0:	4b42      	ldr	r3, [pc, #264]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a41      	ldr	r2, [pc, #260]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ccc:	f7fe fbac 	bl	8001428 <HAL_GetTick>
 8002cd0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cd4:	f7fe fba8 	bl	8001428 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e0e3      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce6:	4b39      	ldr	r3, [pc, #228]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d1f0      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf2:	4b36      	ldr	r3, [pc, #216]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002cf4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002cf6:	4b37      	ldr	r3, [pc, #220]	@ (8002dd4 <HAL_RCC_OscConfig+0x774>)
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d02:	0112      	lsls	r2, r2, #4
 8002d04:	430a      	orrs	r2, r1
 8002d06:	4931      	ldr	r1, [pc, #196]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d10:	3b01      	subs	r3, #1
 8002d12:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	025b      	lsls	r3, r3, #9
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	431a      	orrs	r2, r3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	3b01      	subs	r3, #1
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d34:	3b01      	subs	r3, #1
 8002d36:	061b      	lsls	r3, r3, #24
 8002d38:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d3c:	4923      	ldr	r1, [pc, #140]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d42:	4b22      	ldr	r3, [pc, #136]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d46:	4a21      	ldr	r2, [pc, #132]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d48:	f023 0301 	bic.w	r3, r3, #1
 8002d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d4e:	4b1f      	ldr	r3, [pc, #124]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d50:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d52:	4b21      	ldr	r3, [pc, #132]	@ (8002dd8 <HAL_RCC_OscConfig+0x778>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d5a:	00d2      	lsls	r2, r2, #3
 8002d5c:	491b      	ldr	r1, [pc, #108]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d62:	4b1a      	ldr	r3, [pc, #104]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d66:	f023 020c 	bic.w	r2, r3, #12
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d6e:	4917      	ldr	r1, [pc, #92]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d74:	4b15      	ldr	r3, [pc, #84]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d78:	f023 0202 	bic.w	r2, r3, #2
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d80:	4912      	ldr	r1, [pc, #72]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d86:	4b11      	ldr	r3, [pc, #68]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d8a:	4a10      	ldr	r2, [pc, #64]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d92:	4b0e      	ldr	r3, [pc, #56]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d96:	4a0d      	ldr	r2, [pc, #52]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002d98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002da4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002da8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002daa:	4b08      	ldr	r3, [pc, #32]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dae:	4a07      	ldr	r2, [pc, #28]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002db0:	f043 0301 	orr.w	r3, r3, #1
 8002db4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002db6:	4b05      	ldr	r3, [pc, #20]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a04      	ldr	r2, [pc, #16]	@ (8002dcc <HAL_RCC_OscConfig+0x76c>)
 8002dbc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc2:	f7fe fb31 	bl	8001428 <HAL_GetTick>
 8002dc6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc8:	e011      	b.n	8002dee <HAL_RCC_OscConfig+0x78e>
 8002dca:	bf00      	nop
 8002dcc:	58024400 	.word	0x58024400
 8002dd0:	58024800 	.word	0x58024800
 8002dd4:	fffffc0c 	.word	0xfffffc0c
 8002dd8:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ddc:	f7fe fb24 	bl	8001428 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b02      	cmp	r3, #2
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e05f      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dee:	4b32      	ldr	r3, [pc, #200]	@ (8002eb8 <HAL_RCC_OscConfig+0x858>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d0f0      	beq.n	8002ddc <HAL_RCC_OscConfig+0x77c>
 8002dfa:	e057      	b.n	8002eac <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8002eb8 <HAL_RCC_OscConfig+0x858>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a2d      	ldr	r2, [pc, #180]	@ (8002eb8 <HAL_RCC_OscConfig+0x858>)
 8002e02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e08:	f7fe fb0e 	bl	8001428 <HAL_GetTick>
 8002e0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e0e:	e008      	b.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e10:	f7fe fb0a 	bl	8001428 <HAL_GetTick>
 8002e14:	4602      	mov	r2, r0
 8002e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e18:	1ad3      	subs	r3, r2, r3
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e045      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e22:	4b25      	ldr	r3, [pc, #148]	@ (8002eb8 <HAL_RCC_OscConfig+0x858>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1f0      	bne.n	8002e10 <HAL_RCC_OscConfig+0x7b0>
 8002e2e:	e03d      	b.n	8002eac <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e30:	4b21      	ldr	r3, [pc, #132]	@ (8002eb8 <HAL_RCC_OscConfig+0x858>)
 8002e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e34:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e36:	4b20      	ldr	r3, [pc, #128]	@ (8002eb8 <HAL_RCC_OscConfig+0x858>)
 8002e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e3a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d031      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f003 0203 	and.w	r2, r3, #3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d12a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	091b      	lsrs	r3, r3, #4
 8002e56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d122      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d11a      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	0a5b      	lsrs	r3, r3, #9
 8002e76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e7e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e80:	429a      	cmp	r2, r3
 8002e82:	d111      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	0c1b      	lsrs	r3, r3, #16
 8002e88:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e90:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d108      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	0e1b      	lsrs	r3, r3, #24
 8002e9a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d001      	beq.n	8002eac <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e000      	b.n	8002eae <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3730      	adds	r7, #48	@ 0x30
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	58024400 	.word	0x58024400

08002ebc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e19c      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b8a      	ldr	r3, [pc, #552]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 030f 	and.w	r3, r3, #15
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d910      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b87      	ldr	r3, [pc, #540]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 020f 	bic.w	r2, r3, #15
 8002ee6:	4985      	ldr	r1, [pc, #532]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b83      	ldr	r3, [pc, #524]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 030f 	and.w	r3, r3, #15
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e184      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d010      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	691a      	ldr	r2, [r3, #16]
 8002f10:	4b7b      	ldr	r3, [pc, #492]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d908      	bls.n	8002f2e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f1c:	4b78      	ldr	r3, [pc, #480]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	4975      	ldr	r1, [pc, #468]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d010      	beq.n	8002f5c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	4b70      	ldr	r3, [pc, #448]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f40:	69db      	ldr	r3, [r3, #28]
 8002f42:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d908      	bls.n	8002f5c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	69db      	ldr	r3, [r3, #28]
 8002f4e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	695b      	ldr	r3, [r3, #20]
 8002f56:	496a      	ldr	r1, [pc, #424]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0310 	and.w	r3, r3, #16
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	699a      	ldr	r2, [r3, #24]
 8002f6c:	4b64      	ldr	r3, [pc, #400]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d908      	bls.n	8002f8a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f78:	4b61      	ldr	r3, [pc, #388]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f7a:	69db      	ldr	r3, [r3, #28]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	495e      	ldr	r1, [pc, #376]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0320 	and.w	r3, r3, #32
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d010      	beq.n	8002fb8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	69da      	ldr	r2, [r3, #28]
 8002f9a:	4b59      	ldr	r3, [pc, #356]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002f9c:	6a1b      	ldr	r3, [r3, #32]
 8002f9e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d908      	bls.n	8002fb8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002fa6:	4b56      	ldr	r3, [pc, #344]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	4953      	ldr	r1, [pc, #332]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d010      	beq.n	8002fe6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	4b4d      	ldr	r3, [pc, #308]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d908      	bls.n	8002fe6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fd4:	4b4a      	ldr	r3, [pc, #296]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002fd6:	699b      	ldr	r3, [r3, #24]
 8002fd8:	f023 020f 	bic.w	r2, r3, #15
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4947      	ldr	r1, [pc, #284]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d055      	beq.n	800309e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002ff2:	4b43      	ldr	r3, [pc, #268]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	4940      	ldr	r1, [pc, #256]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8003000:	4313      	orrs	r3, r2
 8003002:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d107      	bne.n	800301c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800300c:	4b3c      	ldr	r3, [pc, #240]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d121      	bne.n	800305c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0f6      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	2b03      	cmp	r3, #3
 8003022:	d107      	bne.n	8003034 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003024:	4b36      	ldr	r3, [pc, #216]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800302c:	2b00      	cmp	r3, #0
 800302e:	d115      	bne.n	800305c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003030:	2301      	movs	r3, #1
 8003032:	e0ea      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d107      	bne.n	800304c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800303c:	4b30      	ldr	r3, [pc, #192]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003044:	2b00      	cmp	r3, #0
 8003046:	d109      	bne.n	800305c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0de      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800304c:	4b2c      	ldr	r3, [pc, #176]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0304 	and.w	r3, r3, #4
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e0d6      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800305c:	4b28      	ldr	r3, [pc, #160]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 800305e:	691b      	ldr	r3, [r3, #16]
 8003060:	f023 0207 	bic.w	r2, r3, #7
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	4925      	ldr	r1, [pc, #148]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 800306a:	4313      	orrs	r3, r2
 800306c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800306e:	f7fe f9db 	bl	8001428 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003074:	e00a      	b.n	800308c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003076:	f7fe f9d7 	bl	8001428 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003084:	4293      	cmp	r3, r2
 8003086:	d901      	bls.n	800308c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	e0be      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308c:	4b1c      	ldr	r3, [pc, #112]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 800308e:	691b      	ldr	r3, [r3, #16]
 8003090:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	00db      	lsls	r3, r3, #3
 800309a:	429a      	cmp	r2, r3
 800309c:	d1eb      	bne.n	8003076 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 0302 	and.w	r3, r3, #2
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d010      	beq.n	80030cc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68da      	ldr	r2, [r3, #12]
 80030ae:	4b14      	ldr	r3, [pc, #80]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d208      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ba:	4b11      	ldr	r3, [pc, #68]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 80030bc:	699b      	ldr	r3, [r3, #24]
 80030be:	f023 020f 	bic.w	r2, r3, #15
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	490e      	ldr	r1, [pc, #56]	@ (8003100 <HAL_RCC_ClockConfig+0x244>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 030f 	and.w	r3, r3, #15
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d214      	bcs.n	8003104 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b08      	ldr	r3, [pc, #32]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 020f 	bic.w	r2, r3, #15
 80030e2:	4906      	ldr	r1, [pc, #24]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ea:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <HAL_RCC_ClockConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 030f 	and.w	r3, r3, #15
 80030f2:	683a      	ldr	r2, [r7, #0]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d005      	beq.n	8003104 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e086      	b.n	800320a <HAL_RCC_ClockConfig+0x34e>
 80030fc:	52002000 	.word	0x52002000
 8003100:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0304 	and.w	r3, r3, #4
 800310c:	2b00      	cmp	r3, #0
 800310e:	d010      	beq.n	8003132 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	691a      	ldr	r2, [r3, #16]
 8003114:	4b3f      	ldr	r3, [pc, #252]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 8003116:	699b      	ldr	r3, [r3, #24]
 8003118:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800311c:	429a      	cmp	r2, r3
 800311e:	d208      	bcs.n	8003132 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003120:	4b3c      	ldr	r3, [pc, #240]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	4939      	ldr	r1, [pc, #228]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 800312e:	4313      	orrs	r3, r2
 8003130:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0308 	and.w	r3, r3, #8
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	695a      	ldr	r2, [r3, #20]
 8003142:	4b34      	ldr	r3, [pc, #208]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 8003144:	69db      	ldr	r3, [r3, #28]
 8003146:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800314a:	429a      	cmp	r2, r3
 800314c:	d208      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800314e:	4b31      	ldr	r3, [pc, #196]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 8003150:	69db      	ldr	r3, [r3, #28]
 8003152:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	492e      	ldr	r1, [pc, #184]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 800315c:	4313      	orrs	r3, r2
 800315e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0310 	and.w	r3, r3, #16
 8003168:	2b00      	cmp	r3, #0
 800316a:	d010      	beq.n	800318e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	4b28      	ldr	r3, [pc, #160]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003178:	429a      	cmp	r2, r3
 800317a:	d208      	bcs.n	800318e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800317c:	4b25      	ldr	r3, [pc, #148]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	4922      	ldr	r1, [pc, #136]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 800318a:	4313      	orrs	r3, r2
 800318c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	d010      	beq.n	80031bc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	69da      	ldr	r2, [r3, #28]
 800319e:	4b1d      	ldr	r3, [pc, #116]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d208      	bcs.n	80031bc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80031aa:	4b1a      	ldr	r3, [pc, #104]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 80031ac:	6a1b      	ldr	r3, [r3, #32]
 80031ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	4917      	ldr	r1, [pc, #92]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80031bc:	f000 f834 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b14      	ldr	r3, [pc, #80]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 030f 	and.w	r3, r3, #15
 80031cc:	4912      	ldr	r1, [pc, #72]	@ (8003218 <HAL_RCC_ClockConfig+0x35c>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	f003 031f 	and.w	r3, r3, #31
 80031d4:	fa22 f303 	lsr.w	r3, r2, r3
 80031d8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031da:	4b0e      	ldr	r3, [pc, #56]	@ (8003214 <HAL_RCC_ClockConfig+0x358>)
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	f003 030f 	and.w	r3, r3, #15
 80031e2:	4a0d      	ldr	r2, [pc, #52]	@ (8003218 <HAL_RCC_ClockConfig+0x35c>)
 80031e4:	5cd3      	ldrb	r3, [r2, r3]
 80031e6:	f003 031f 	and.w	r3, r3, #31
 80031ea:	693a      	ldr	r2, [r7, #16]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
 80031f0:	4a0a      	ldr	r2, [pc, #40]	@ (800321c <HAL_RCC_ClockConfig+0x360>)
 80031f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031f4:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <HAL_RCC_ClockConfig+0x364>)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031fa:	4b0a      	ldr	r3, [pc, #40]	@ (8003224 <HAL_RCC_ClockConfig+0x368>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4618      	mov	r0, r3
 8003200:	f7fe f8c8 	bl	8001394 <HAL_InitTick>
 8003204:	4603      	mov	r3, r0
 8003206:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003208:	7bfb      	ldrb	r3, [r7, #15]
}
 800320a:	4618      	mov	r0, r3
 800320c:	3718      	adds	r7, #24
 800320e:	46bd      	mov	sp, r7
 8003210:	bd80      	pop	{r7, pc}
 8003212:	bf00      	nop
 8003214:	58024400 	.word	0x58024400
 8003218:	080064d0 	.word	0x080064d0
 800321c:	24000004 	.word	0x24000004
 8003220:	24000000 	.word	0x24000000
 8003224:	24000008 	.word	0x24000008

08003228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	@ 0x24
 800322c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800322e:	4bb3      	ldr	r3, [pc, #716]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003230:	691b      	ldr	r3, [r3, #16]
 8003232:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003236:	2b18      	cmp	r3, #24
 8003238:	f200 8155 	bhi.w	80034e6 <HAL_RCC_GetSysClockFreq+0x2be>
 800323c:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <HAL_RCC_GetSysClockFreq+0x1c>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	080032a9 	.word	0x080032a9
 8003248:	080034e7 	.word	0x080034e7
 800324c:	080034e7 	.word	0x080034e7
 8003250:	080034e7 	.word	0x080034e7
 8003254:	080034e7 	.word	0x080034e7
 8003258:	080034e7 	.word	0x080034e7
 800325c:	080034e7 	.word	0x080034e7
 8003260:	080034e7 	.word	0x080034e7
 8003264:	080032cf 	.word	0x080032cf
 8003268:	080034e7 	.word	0x080034e7
 800326c:	080034e7 	.word	0x080034e7
 8003270:	080034e7 	.word	0x080034e7
 8003274:	080034e7 	.word	0x080034e7
 8003278:	080034e7 	.word	0x080034e7
 800327c:	080034e7 	.word	0x080034e7
 8003280:	080034e7 	.word	0x080034e7
 8003284:	080032d5 	.word	0x080032d5
 8003288:	080034e7 	.word	0x080034e7
 800328c:	080034e7 	.word	0x080034e7
 8003290:	080034e7 	.word	0x080034e7
 8003294:	080034e7 	.word	0x080034e7
 8003298:	080034e7 	.word	0x080034e7
 800329c:	080034e7 	.word	0x080034e7
 80032a0:	080034e7 	.word	0x080034e7
 80032a4:	080032db 	.word	0x080032db
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80032a8:	4b94      	ldr	r3, [pc, #592]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d009      	beq.n	80032c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80032b4:	4b91      	ldr	r3, [pc, #580]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	08db      	lsrs	r3, r3, #3
 80032ba:	f003 0303 	and.w	r3, r3, #3
 80032be:	4a90      	ldr	r2, [pc, #576]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032c0:	fa22 f303 	lsr.w	r3, r2, r3
 80032c4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80032c6:	e111      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80032c8:	4b8d      	ldr	r3, [pc, #564]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80032ca:	61bb      	str	r3, [r7, #24]
    break;
 80032cc:	e10e      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032ce:	4b8d      	ldr	r3, [pc, #564]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032d0:	61bb      	str	r3, [r7, #24]
    break;
 80032d2:	e10b      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003508 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032d6:	61bb      	str	r3, [r7, #24]
    break;
 80032d8:	e108      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032da:	4b88      	ldr	r3, [pc, #544]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032e4:	4b85      	ldr	r3, [pc, #532]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	091b      	lsrs	r3, r3, #4
 80032ea:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032ee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032f0:	4b82      	ldr	r3, [pc, #520]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f4:	f003 0301 	and.w	r3, r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032fa:	4b80      	ldr	r3, [pc, #512]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80032fe:	08db      	lsrs	r3, r3, #3
 8003300:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003304:	68fa      	ldr	r2, [r7, #12]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	ee07 3a90 	vmov	s15, r3
 800330e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003312:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80e1 	beq.w	80034e0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	2b02      	cmp	r3, #2
 8003322:	f000 8083 	beq.w	800342c <HAL_RCC_GetSysClockFreq+0x204>
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b02      	cmp	r3, #2
 800332a:	f200 80a1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x248>
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <HAL_RCC_GetSysClockFreq+0x114>
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d056      	beq.n	80033e8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800333a:	e099      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800333c:	4b6f      	ldr	r3, [pc, #444]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d02d      	beq.n	80033a4 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003348:	4b6c      	ldr	r3, [pc, #432]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	4a6b      	ldr	r2, [pc, #428]	@ (8003500 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	ee07 3a90 	vmov	s15, r3
 8003360:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	ee07 3a90 	vmov	s15, r3
 800336a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800336e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003372:	4b62      	ldr	r3, [pc, #392]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003376:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003382:	ed97 6a02 	vldr	s12, [r7, #8]
 8003386:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2e4>
 800338a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003392:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003396:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800339a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80033a2:	e087      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	ee07 3a90 	vmov	s15, r3
 80033aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033ae:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003510 <HAL_RCC_GetSysClockFreq+0x2e8>
 80033b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b6:	4b51      	ldr	r3, [pc, #324]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80033ca:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80033da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033e6:	e065      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	ee07 3a90 	vmov	s15, r3
 80033ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033f2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033fa:	4b40      	ldr	r3, [pc, #256]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800340a:	ed97 6a02 	vldr	s12, [r7, #8]
 800340e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800341a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800341e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800342a:	e043      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	ee07 3a90 	vmov	s15, r3
 8003432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003436:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003518 <HAL_RCC_GetSysClockFreq+0x2f0>
 800343a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800343e:	4b2f      	ldr	r3, [pc, #188]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800344e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003452:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800345a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800345e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800346a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800346e:	e021      	b.n	80034b4 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	ee07 3a90 	vmov	s15, r3
 8003476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800347a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003514 <HAL_RCC_GetSysClockFreq+0x2ec>
 800347e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003482:	4b1e      	ldr	r3, [pc, #120]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800348a:	ee07 3a90 	vmov	s15, r3
 800348e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003492:	ed97 6a02 	vldr	s12, [r7, #8]
 8003496:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800350c <HAL_RCC_GetSysClockFreq+0x2e4>
 800349a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800349e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80034b2:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80034b4:	4b11      	ldr	r3, [pc, #68]	@ (80034fc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	0a5b      	lsrs	r3, r3, #9
 80034ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80034be:	3301      	adds	r3, #1
 80034c0:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	ee07 3a90 	vmov	s15, r3
 80034c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80034d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034d8:	ee17 3a90 	vmov	r3, s15
 80034dc:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034de:	e005      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034e0:	2300      	movs	r3, #0
 80034e2:	61bb      	str	r3, [r7, #24]
    break;
 80034e4:	e002      	b.n	80034ec <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034e6:	4b07      	ldr	r3, [pc, #28]	@ (8003504 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034e8:	61bb      	str	r3, [r7, #24]
    break;
 80034ea:	bf00      	nop
  }

  return sysclockfreq;
 80034ec:	69bb      	ldr	r3, [r7, #24]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3724      	adds	r7, #36	@ 0x24
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	58024400 	.word	0x58024400
 8003500:	03d09000 	.word	0x03d09000
 8003504:	003d0900 	.word	0x003d0900
 8003508:	007a1200 	.word	0x007a1200
 800350c:	46000000 	.word	0x46000000
 8003510:	4c742400 	.word	0x4c742400
 8003514:	4a742400 	.word	0x4a742400
 8003518:	4af42400 	.word	0x4af42400

0800351c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003522:	f7ff fe81 	bl	8003228 <HAL_RCC_GetSysClockFreq>
 8003526:	4602      	mov	r2, r0
 8003528:	4b10      	ldr	r3, [pc, #64]	@ (800356c <HAL_RCC_GetHCLKFreq+0x50>)
 800352a:	699b      	ldr	r3, [r3, #24]
 800352c:	0a1b      	lsrs	r3, r3, #8
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	490f      	ldr	r1, [pc, #60]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x54>)
 8003534:	5ccb      	ldrb	r3, [r1, r3]
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	fa22 f303 	lsr.w	r3, r2, r3
 800353e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003540:	4b0a      	ldr	r3, [pc, #40]	@ (800356c <HAL_RCC_GetHCLKFreq+0x50>)
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	4a09      	ldr	r2, [pc, #36]	@ (8003570 <HAL_RCC_GetHCLKFreq+0x54>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	f003 031f 	and.w	r3, r3, #31
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	fa22 f303 	lsr.w	r3, r2, r3
 8003556:	4a07      	ldr	r2, [pc, #28]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x58>)
 8003558:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800355a:	4a07      	ldr	r2, [pc, #28]	@ (8003578 <HAL_RCC_GetHCLKFreq+0x5c>)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003560:	4b04      	ldr	r3, [pc, #16]	@ (8003574 <HAL_RCC_GetHCLKFreq+0x58>)
 8003562:	681b      	ldr	r3, [r3, #0]
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	58024400 	.word	0x58024400
 8003570:	080064d0 	.word	0x080064d0
 8003574:	24000004 	.word	0x24000004
 8003578:	24000000 	.word	0x24000000

0800357c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003580:	f7ff ffcc 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	@ (80035a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	@ (80035a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58024400 	.word	0x58024400
 80035a4:	080064d0 	.word	0x080064d0

080035a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80035ac:	f7ff ffb6 	bl	800351c <HAL_RCC_GetHCLKFreq>
 80035b0:	4602      	mov	r2, r0
 80035b2:	4b06      	ldr	r3, [pc, #24]	@ (80035cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b4:	69db      	ldr	r3, [r3, #28]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	4904      	ldr	r1, [pc, #16]	@ (80035d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80035be:	5ccb      	ldrb	r3, [r1, r3]
 80035c0:	f003 031f 	and.w	r3, r3, #31
 80035c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	58024400 	.word	0x58024400
 80035d0:	080064d0 	.word	0x080064d0

080035d4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035dc:	2300      	movs	r3, #0
 80035de:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035e0:	2300      	movs	r3, #0
 80035e2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d03f      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80035f4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035f8:	d02a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035fe:	d824      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003600:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003604:	d018      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003606:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800360a:	d81e      	bhi.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800360c:	2b00      	cmp	r3, #0
 800360e:	d003      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003610:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003614:	d007      	beq.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003616:	e018      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003618:	4ba3      	ldr	r3, [pc, #652]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800361c:	4aa2      	ldr	r2, [pc, #648]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800361e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003622:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003624:	e015      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	3304      	adds	r3, #4
 800362a:	2102      	movs	r1, #2
 800362c:	4618      	mov	r0, r3
 800362e:	f001 f9d5 	bl	80049dc <RCCEx_PLL2_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003636:	e00c      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	3324      	adds	r3, #36	@ 0x24
 800363c:	2102      	movs	r1, #2
 800363e:	4618      	mov	r0, r3
 8003640:	f001 fa7e 	bl	8004b40 <RCCEx_PLL3_Config>
 8003644:	4603      	mov	r3, r0
 8003646:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003648:	e003      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	75fb      	strb	r3, [r7, #23]
      break;
 800364e:	e000      	b.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003650:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003652:	7dfb      	ldrb	r3, [r7, #23]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003658:	4b93      	ldr	r3, [pc, #588]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800365a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800365c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003664:	4990      	ldr	r1, [pc, #576]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003666:	4313      	orrs	r3, r2
 8003668:	650b      	str	r3, [r1, #80]	@ 0x50
 800366a:	e001      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800366c:	7dfb      	ldrb	r3, [r7, #23]
 800366e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003678:	2b00      	cmp	r3, #0
 800367a:	d03d      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003680:	2b04      	cmp	r3, #4
 8003682:	d826      	bhi.n	80036d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003684:	a201      	add	r2, pc, #4	@ (adr r2, 800368c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368a:	bf00      	nop
 800368c:	080036a1 	.word	0x080036a1
 8003690:	080036af 	.word	0x080036af
 8003694:	080036c1 	.word	0x080036c1
 8003698:	080036d9 	.word	0x080036d9
 800369c:	080036d9 	.word	0x080036d9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036a0:	4b81      	ldr	r3, [pc, #516]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036a4:	4a80      	ldr	r2, [pc, #512]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036ac:	e015      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2100      	movs	r1, #0
 80036b4:	4618      	mov	r0, r3
 80036b6:	f001 f991 	bl	80049dc <RCCEx_PLL2_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036be:	e00c      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	3324      	adds	r3, #36	@ 0x24
 80036c4:	2100      	movs	r1, #0
 80036c6:	4618      	mov	r0, r3
 80036c8:	f001 fa3a 	bl	8004b40 <RCCEx_PLL3_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036d0:	e003      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	75fb      	strb	r3, [r7, #23]
      break;
 80036d6:	e000      	b.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036da:	7dfb      	ldrb	r3, [r7, #23]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d109      	bne.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036e0:	4b71      	ldr	r3, [pc, #452]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036e4:	f023 0207 	bic.w	r2, r3, #7
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036ec:	496e      	ldr	r1, [pc, #440]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	650b      	str	r3, [r1, #80]	@ 0x50
 80036f2:	e001      	b.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036f4:	7dfb      	ldrb	r3, [r7, #23]
 80036f6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003700:	2b00      	cmp	r3, #0
 8003702:	d042      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003708:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800370c:	d02b      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800370e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003712:	d825      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003714:	2bc0      	cmp	r3, #192	@ 0xc0
 8003716:	d028      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003718:	2bc0      	cmp	r3, #192	@ 0xc0
 800371a:	d821      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800371c:	2b80      	cmp	r3, #128	@ 0x80
 800371e:	d016      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8003720:	2b80      	cmp	r3, #128	@ 0x80
 8003722:	d81d      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003728:	2b40      	cmp	r3, #64	@ 0x40
 800372a:	d007      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x168>
 800372c:	e018      	b.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800372e:	4b5e      	ldr	r3, [pc, #376]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003732:	4a5d      	ldr	r2, [pc, #372]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003738:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800373a:	e017      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	3304      	adds	r3, #4
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f001 f94a 	bl	80049dc <RCCEx_PLL2_Config>
 8003748:	4603      	mov	r3, r0
 800374a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800374c:	e00e      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	3324      	adds	r3, #36	@ 0x24
 8003752:	2100      	movs	r1, #0
 8003754:	4618      	mov	r0, r3
 8003756:	f001 f9f3 	bl	8004b40 <RCCEx_PLL3_Config>
 800375a:	4603      	mov	r3, r0
 800375c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800375e:	e005      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	75fb      	strb	r3, [r7, #23]
      break;
 8003764:	e002      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8003766:	bf00      	nop
 8003768:	e000      	b.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800376a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800376c:	7dfb      	ldrb	r3, [r7, #23]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d109      	bne.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003772:	4b4d      	ldr	r3, [pc, #308]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003774:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003776:	f423 72e0 	bic.w	r2, r3, #448	@ 0x1c0
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800377e:	494a      	ldr	r1, [pc, #296]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	650b      	str	r3, [r1, #80]	@ 0x50
 8003784:	e001      	b.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003786:	7dfb      	ldrb	r3, [r7, #23]
 8003788:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003792:	2b00      	cmp	r3, #0
 8003794:	d049      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800379c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037a0:	d030      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80037a2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037a6:	d82a      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037a8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037ac:	d02c      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80037ae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80037b2:	d824      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037b8:	d018      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x218>
 80037ba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037be:	d81e      	bhi.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80037c4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80037c8:	d007      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x206>
 80037ca:	e018      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037cc:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	4a35      	ldr	r2, [pc, #212]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d8:	e017      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	3304      	adds	r3, #4
 80037de:	2100      	movs	r1, #0
 80037e0:	4618      	mov	r0, r3
 80037e2:	f001 f8fb 	bl	80049dc <RCCEx_PLL2_Config>
 80037e6:	4603      	mov	r3, r0
 80037e8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037ea:	e00e      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	3324      	adds	r3, #36	@ 0x24
 80037f0:	2100      	movs	r1, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	f001 f9a4 	bl	8004b40 <RCCEx_PLL3_Config>
 80037f8:	4603      	mov	r3, r0
 80037fa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037fc:	e005      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
      break;
 8003802:	e002      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003804:	bf00      	nop
 8003806:	e000      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8003808:	bf00      	nop
    }

    if(ret == HAL_OK)
 800380a:	7dfb      	ldrb	r3, [r7, #23]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d10a      	bne.n	8003826 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003810:	4b25      	ldr	r3, [pc, #148]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003812:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003814:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800381e:	4922      	ldr	r1, [pc, #136]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003820:	4313      	orrs	r3, r2
 8003822:	658b      	str	r3, [r1, #88]	@ 0x58
 8003824:	e001      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003826:	7dfb      	ldrb	r3, [r7, #23]
 8003828:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003832:	2b00      	cmp	r3, #0
 8003834:	d04b      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800383c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003840:	d030      	beq.n	80038a4 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003842:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003846:	d82a      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003848:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800384c:	d02e      	beq.n	80038ac <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800384e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003852:	d824      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003854:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003858:	d018      	beq.n	800388c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800385a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800385e:	d81e      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003860:	2b00      	cmp	r3, #0
 8003862:	d003      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003864:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003868:	d007      	beq.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800386a:	e018      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800386c:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800386e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003870:	4a0d      	ldr	r2, [pc, #52]	@ (80038a8 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003872:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003876:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003878:	e019      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	3304      	adds	r3, #4
 800387e:	2100      	movs	r1, #0
 8003880:	4618      	mov	r0, r3
 8003882:	f001 f8ab 	bl	80049dc <RCCEx_PLL2_Config>
 8003886:	4603      	mov	r3, r0
 8003888:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800388a:	e010      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3324      	adds	r3, #36	@ 0x24
 8003890:	2100      	movs	r1, #0
 8003892:	4618      	mov	r0, r3
 8003894:	f001 f954 	bl	8004b40 <RCCEx_PLL3_Config>
 8003898:	4603      	mov	r3, r0
 800389a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800389c:	e007      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	75fb      	strb	r3, [r7, #23]
      break;
 80038a2:	e004      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80038a4:	bf00      	nop
 80038a6:	e002      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80038a8:	58024400 	.word	0x58024400
      break;
 80038ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d10a      	bne.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80038b4:	4b99      	ldr	r3, [pc, #612]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038b8:	f023 62e0 	bic.w	r2, r3, #117440512	@ 0x7000000
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038c2:	4996      	ldr	r1, [pc, #600]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	658b      	str	r3, [r1, #88]	@ 0x58
 80038c8:	e001      	b.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	7dfb      	ldrb	r3, [r7, #23]
 80038cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d032      	beq.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038de:	2b30      	cmp	r3, #48	@ 0x30
 80038e0:	d01c      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038e2:	2b30      	cmp	r3, #48	@ 0x30
 80038e4:	d817      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038e6:	2b20      	cmp	r3, #32
 80038e8:	d00c      	beq.n	8003904 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80038ea:	2b20      	cmp	r3, #32
 80038ec:	d813      	bhi.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80038f2:	2b10      	cmp	r3, #16
 80038f4:	d10f      	bne.n	8003916 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038f6:	4b89      	ldr	r3, [pc, #548]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fa:	4a88      	ldr	r2, [pc, #544]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003900:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003902:	e00e      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	3304      	adds	r3, #4
 8003908:	2102      	movs	r1, #2
 800390a:	4618      	mov	r0, r3
 800390c:	f001 f866 	bl	80049dc <RCCEx_PLL2_Config>
 8003910:	4603      	mov	r3, r0
 8003912:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8003914:	e005      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	75fb      	strb	r3, [r7, #23]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8003920:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d109      	bne.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003928:	4b7c      	ldr	r3, [pc, #496]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800392a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800392c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003934:	4979      	ldr	r1, [pc, #484]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003936:	4313      	orrs	r3, r2
 8003938:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800393a:	e001      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800393c:	7dfb      	ldrb	r3, [r7, #23]
 800393e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003948:	2b00      	cmp	r3, #0
 800394a:	d047      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003954:	d030      	beq.n	80039b8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003956:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800395a:	d82a      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800395c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003960:	d02c      	beq.n	80039bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003962:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003966:	d824      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003968:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800396c:	d018      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800396e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003972:	d81e      	bhi.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397c:	d007      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800397e:	e018      	b.n	80039b2 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003980:	4b66      	ldr	r3, [pc, #408]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4a65      	ldr	r2, [pc, #404]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003986:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800398a:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800398c:	e017      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2100      	movs	r1, #0
 8003994:	4618      	mov	r0, r3
 8003996:	f001 f821 	bl	80049dc <RCCEx_PLL2_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800399e:	e00e      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3324      	adds	r3, #36	@ 0x24
 80039a4:	2100      	movs	r1, #0
 80039a6:	4618      	mov	r0, r3
 80039a8:	f001 f8ca 	bl	8004b40 <RCCEx_PLL3_Config>
 80039ac:	4603      	mov	r3, r0
 80039ae:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80039b0:	e005      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	75fb      	strb	r3, [r7, #23]
      break;
 80039b6:	e002      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039b8:	bf00      	nop
 80039ba:	e000      	b.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80039bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80039be:	7dfb      	ldrb	r3, [r7, #23]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d109      	bne.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80039c4:	4b55      	ldr	r3, [pc, #340]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039c8:	f423 42e0 	bic.w	r2, r3, #28672	@ 0x7000
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039d0:	4952      	ldr	r1, [pc, #328]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	650b      	str	r3, [r1, #80]	@ 0x50
 80039d6:	e001      	b.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d8:	7dfb      	ldrb	r3, [r7, #23]
 80039da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d049      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f0:	d02e      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039f2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80039f6:	d828      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039f8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80039fc:	d02a      	beq.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80039fe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a02:	d822      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a08:	d026      	beq.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8003a0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003a0e:	d81c      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a14:	d010      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8003a16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a1a:	d816      	bhi.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x476>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d01d      	beq.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x488>
 8003a20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a24:	d111      	bne.n	8003a4a <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3304      	adds	r3, #4
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f000 ffd5 	bl	80049dc <RCCEx_PLL2_Config>
 8003a32:	4603      	mov	r3, r0
 8003a34:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a36:	e012      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3324      	adds	r3, #36	@ 0x24
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f001 f87e 	bl	8004b40 <RCCEx_PLL3_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a48:	e009      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a4e:	e006      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a50:	bf00      	nop
 8003a52:	e004      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a54:	bf00      	nop
 8003a56:	e002      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a58:	bf00      	nop
 8003a5a:	e000      	b.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a5e:	7dfb      	ldrb	r3, [r7, #23]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a64:	4b2d      	ldr	r3, [pc, #180]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a68:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a70:	492a      	ldr	r1, [pc, #168]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	650b      	str	r3, [r1, #80]	@ 0x50
 8003a76:	e001      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a78:	7dfb      	ldrb	r3, [r7, #23]
 8003a7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d04d      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a92:	d02e      	beq.n	8003af2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a98:	d828      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a9e:	d02a      	beq.n	8003af6 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003aa4:	d822      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003aa6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003aaa:	d026      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003aac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ab0:	d81c      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003ab2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ab6:	d010      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003ab8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003abc:	d816      	bhi.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003ac2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ac6:	d111      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	3304      	adds	r3, #4
 8003acc:	2101      	movs	r1, #1
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f000 ff84 	bl	80049dc <RCCEx_PLL2_Config>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003ad8:	e012      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3324      	adds	r3, #36	@ 0x24
 8003ade:	2101      	movs	r1, #1
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f001 f82d 	bl	8004b40 <RCCEx_PLL3_Config>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aea:	e009      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
      break;
 8003af0:	e006      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003af2:	bf00      	nop
 8003af4:	e004      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003af6:	bf00      	nop
 8003af8:	e002      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003afa:	bf00      	nop
 8003afc:	e000      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003afe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b00:	7dfb      	ldrb	r3, [r7, #23]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d10c      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003b06:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b0a:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003b14:	4901      	ldr	r1, [pc, #4]	@ (8003b1c <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	658b      	str	r3, [r1, #88]	@ 0x58
 8003b1a:	e003      	b.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003b1c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d02f      	beq.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b38:	d00e      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b3e:	d814      	bhi.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d015      	beq.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b44:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003b48:	d10f      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4a:	4baf      	ldr	r3, [pc, #700]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b4e:	4aae      	ldr	r2, [pc, #696]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b54:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b56:	e00c      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	3304      	adds	r3, #4
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 ff3c 	bl	80049dc <RCCEx_PLL2_Config>
 8003b64:	4603      	mov	r3, r0
 8003b66:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	75fb      	strb	r3, [r7, #23]
      break;
 8003b6e:	e000      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003b70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b72:	7dfb      	ldrb	r3, [r7, #23]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d109      	bne.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b78:	4ba3      	ldr	r3, [pc, #652]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b7c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b84:	49a0      	ldr	r1, [pc, #640]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	650b      	str	r3, [r1, #80]	@ 0x50
 8003b8a:	e001      	b.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b8c:	7dfb      	ldrb	r3, [r7, #23]
 8003b8e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d032      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ba0:	2b03      	cmp	r3, #3
 8003ba2:	d81b      	bhi.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003ba4:	a201      	add	r2, pc, #4	@ (adr r2, 8003bac <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003baa:	bf00      	nop
 8003bac:	08003be3 	.word	0x08003be3
 8003bb0:	08003bbd 	.word	0x08003bbd
 8003bb4:	08003bcb 	.word	0x08003bcb
 8003bb8:	08003be3 	.word	0x08003be3
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbc:	4b92      	ldr	r3, [pc, #584]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc0:	4a91      	ldr	r2, [pc, #580]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bc8:	e00c      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	3304      	adds	r3, #4
 8003bce:	2102      	movs	r1, #2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 ff03 	bl	80049dc <RCCEx_PLL2_Config>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bda:	e003      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	75fb      	strb	r3, [r7, #23]
      break;
 8003be0:	e000      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003be2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003be4:	7dfb      	ldrb	r3, [r7, #23]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d109      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bea:	4b87      	ldr	r3, [pc, #540]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bee:	f023 0203 	bic.w	r2, r3, #3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf6:	4984      	ldr	r1, [pc, #528]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	64cb      	str	r3, [r1, #76]	@ 0x4c
 8003bfc:	e001      	b.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bfe:	7dfb      	ldrb	r3, [r7, #23]
 8003c00:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f000 8086 	beq.w	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c10:	4b7e      	ldr	r3, [pc, #504]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a7d      	ldr	r2, [pc, #500]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c1a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c1c:	f7fd fc04 	bl	8001428 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c22:	e009      	b.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c24:	f7fd fc00 	bl	8001428 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	@ 0x64
 8003c30:	d902      	bls.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	75fb      	strb	r3, [r7, #23]
        break;
 8003c36:	e005      	b.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c38:	4b74      	ldr	r3, [pc, #464]	@ (8003e0c <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d0ef      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c44:	7dfb      	ldrb	r3, [r7, #23]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d166      	bne.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c4a:	4b6f      	ldr	r3, [pc, #444]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c4c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c54:	4053      	eors	r3, r2
 8003c56:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d013      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c66:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c68:	4b67      	ldr	r3, [pc, #412]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c6c:	4a66      	ldr	r2, [pc, #408]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c72:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c74:	4b64      	ldr	r3, [pc, #400]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c78:	4a63      	ldr	r2, [pc, #396]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c7e:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c80:	4a61      	ldr	r2, [pc, #388]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c90:	d115      	bne.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c92:	f7fd fbc9 	bl	8001428 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c98:	e00b      	b.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c9a:	f7fd fbc5 	bl	8001428 <HAL_GetTick>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d902      	bls.n	8003cb2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	75fb      	strb	r3, [r7, #23]
            break;
 8003cb0:	e005      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cb2:	4b55      	ldr	r3, [pc, #340]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ed      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d126      	bne.n	8003d12 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003cd2:	d10d      	bne.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003cd4:	4b4c      	ldr	r3, [pc, #304]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003ce2:	0919      	lsrs	r1, r3, #4
 8003ce4:	4b4a      	ldr	r3, [pc, #296]	@ (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003ce6:	400b      	ands	r3, r1
 8003ce8:	4947      	ldr	r1, [pc, #284]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	610b      	str	r3, [r1, #16]
 8003cee:	e005      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003cf0:	4b45      	ldr	r3, [pc, #276]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	4a44      	ldr	r2, [pc, #272]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cf6:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003cfa:	6113      	str	r3, [r2, #16]
 8003cfc:	4b42      	ldr	r3, [pc, #264]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cfe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d0a:	493f      	ldr	r1, [pc, #252]	@ (8003e08 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	670b      	str	r3, [r1, #112]	@ 0x70
 8003d10:	e004      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d12:	7dfb      	ldrb	r3, [r7, #23]
 8003d14:	75bb      	strb	r3, [r7, #22]
 8003d16:	e001      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d18:	7dfb      	ldrb	r3, [r7, #23]
 8003d1a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8085 	beq.w	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d2e:	2b28      	cmp	r3, #40	@ 0x28
 8003d30:	d866      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d32:	a201      	add	r2, pc, #4	@ (adr r2, 8003d38 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003e15 	.word	0x08003e15
 8003d3c:	08003e01 	.word	0x08003e01
 8003d40:	08003e01 	.word	0x08003e01
 8003d44:	08003e01 	.word	0x08003e01
 8003d48:	08003e01 	.word	0x08003e01
 8003d4c:	08003e01 	.word	0x08003e01
 8003d50:	08003e01 	.word	0x08003e01
 8003d54:	08003e01 	.word	0x08003e01
 8003d58:	08003ddd 	.word	0x08003ddd
 8003d5c:	08003e01 	.word	0x08003e01
 8003d60:	08003e01 	.word	0x08003e01
 8003d64:	08003e01 	.word	0x08003e01
 8003d68:	08003e01 	.word	0x08003e01
 8003d6c:	08003e01 	.word	0x08003e01
 8003d70:	08003e01 	.word	0x08003e01
 8003d74:	08003e01 	.word	0x08003e01
 8003d78:	08003def 	.word	0x08003def
 8003d7c:	08003e01 	.word	0x08003e01
 8003d80:	08003e01 	.word	0x08003e01
 8003d84:	08003e01 	.word	0x08003e01
 8003d88:	08003e01 	.word	0x08003e01
 8003d8c:	08003e01 	.word	0x08003e01
 8003d90:	08003e01 	.word	0x08003e01
 8003d94:	08003e01 	.word	0x08003e01
 8003d98:	08003e15 	.word	0x08003e15
 8003d9c:	08003e01 	.word	0x08003e01
 8003da0:	08003e01 	.word	0x08003e01
 8003da4:	08003e01 	.word	0x08003e01
 8003da8:	08003e01 	.word	0x08003e01
 8003dac:	08003e01 	.word	0x08003e01
 8003db0:	08003e01 	.word	0x08003e01
 8003db4:	08003e01 	.word	0x08003e01
 8003db8:	08003e15 	.word	0x08003e15
 8003dbc:	08003e01 	.word	0x08003e01
 8003dc0:	08003e01 	.word	0x08003e01
 8003dc4:	08003e01 	.word	0x08003e01
 8003dc8:	08003e01 	.word	0x08003e01
 8003dcc:	08003e01 	.word	0x08003e01
 8003dd0:	08003e01 	.word	0x08003e01
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e15 	.word	0x08003e15
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	3304      	adds	r3, #4
 8003de0:	2101      	movs	r1, #1
 8003de2:	4618      	mov	r0, r3
 8003de4:	f000 fdfa 	bl	80049dc <RCCEx_PLL2_Config>
 8003de8:	4603      	mov	r3, r0
 8003dea:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dec:	e013      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3324      	adds	r3, #36	@ 0x24
 8003df2:	2101      	movs	r1, #1
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fea3 	bl	8004b40 <RCCEx_PLL3_Config>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dfe:	e00a      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	75fb      	strb	r3, [r7, #23]
      break;
 8003e04:	e007      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003e06:	bf00      	nop
 8003e08:	58024400 	.word	0x58024400
 8003e0c:	58024800 	.word	0x58024800
 8003e10:	00ffffcf 	.word	0x00ffffcf
      break;
 8003e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e1c:	4b96      	ldr	r3, [pc, #600]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e20:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003e28:	4993      	ldr	r1, [pc, #588]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	654b      	str	r3, [r1, #84]	@ 0x54
 8003e2e:	e001      	b.n	8003e34 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	7dfb      	ldrb	r3, [r7, #23]
 8003e32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0302 	and.w	r3, r3, #2
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d038      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e44:	2b05      	cmp	r3, #5
 8003e46:	d821      	bhi.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e48:	a201      	add	r2, pc, #4	@ (adr r2, 8003e50 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4e:	bf00      	nop
 8003e50:	08003e93 	.word	0x08003e93
 8003e54:	08003e69 	.word	0x08003e69
 8003e58:	08003e7b 	.word	0x08003e7b
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e93 	.word	0x08003e93
 8003e64:	08003e93 	.word	0x08003e93
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3304      	adds	r3, #4
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f000 fdb4 	bl	80049dc <RCCEx_PLL2_Config>
 8003e74:	4603      	mov	r3, r0
 8003e76:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e78:	e00c      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	3324      	adds	r3, #36	@ 0x24
 8003e7e:	2101      	movs	r1, #1
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fe5d 	bl	8004b40 <RCCEx_PLL3_Config>
 8003e86:	4603      	mov	r3, r0
 8003e88:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e90:	e000      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003e92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e94:	7dfb      	ldrb	r3, [r7, #23]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d109      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e9a:	4b77      	ldr	r3, [pc, #476]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ea6:	4974      	ldr	r1, [pc, #464]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	654b      	str	r3, [r1, #84]	@ 0x54
 8003eac:	e001      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eae:	7dfb      	ldrb	r3, [r7, #23]
 8003eb0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d03a      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d821      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ece:	bf00      	nop
 8003ed0:	08003f13 	.word	0x08003f13
 8003ed4:	08003ee9 	.word	0x08003ee9
 8003ed8:	08003efb 	.word	0x08003efb
 8003edc:	08003f13 	.word	0x08003f13
 8003ee0:	08003f13 	.word	0x08003f13
 8003ee4:	08003f13 	.word	0x08003f13
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	3304      	adds	r3, #4
 8003eec:	2101      	movs	r1, #1
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 fd74 	bl	80049dc <RCCEx_PLL2_Config>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ef8:	e00c      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	3324      	adds	r3, #36	@ 0x24
 8003efe:	2101      	movs	r1, #1
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 fe1d 	bl	8004b40 <RCCEx_PLL3_Config>
 8003f06:	4603      	mov	r3, r0
 8003f08:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003f0a:	e003      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003f10:	e000      	b.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003f12:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f14:	7dfb      	ldrb	r3, [r7, #23]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10a      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1a:	4b57      	ldr	r3, [pc, #348]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1e:	f023 0207 	bic.w	r2, r3, #7
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f28:	4953      	ldr	r1, [pc, #332]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	658b      	str	r3, [r1, #88]	@ 0x58
 8003f2e:	e001      	b.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f003 0320 	and.w	r3, r3, #32
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d04b      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f4a:	d02e      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f50:	d828      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f56:	d02a      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f5c:	d822      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f62:	d026      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f64:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f68:	d81c      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f6a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f6e:	d010      	beq.n	8003f92 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003f70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f74:	d816      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d01d      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003f7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f7e:	d111      	bne.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	3304      	adds	r3, #4
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fd28 	bl	80049dc <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f90:	e012      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3324      	adds	r3, #36	@ 0x24
 8003f96:	2102      	movs	r1, #2
 8003f98:	4618      	mov	r0, r3
 8003f9a:	f000 fdd1 	bl	8004b40 <RCCEx_PLL3_Config>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003fa2:	e009      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	75fb      	strb	r3, [r7, #23]
      break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003faa:	bf00      	nop
 8003fac:	e004      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fae:	bf00      	nop
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003fb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fb8:	7dfb      	ldrb	r3, [r7, #23]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d10a      	bne.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc2:	f023 42e0 	bic.w	r2, r3, #1879048192	@ 0x70000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003fcc:	492a      	ldr	r1, [pc, #168]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	654b      	str	r3, [r1, #84]	@ 0x54
 8003fd2:	e001      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
 8003fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d04d      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fea:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fee:	d02e      	beq.n	800404e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003ff0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003ff4:	d828      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffa:	d02a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003ffc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004000:	d822      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8004002:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004006:	d026      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004008:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800400c:	d81c      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800400e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004012:	d010      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8004014:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004018:	d816      	bhi.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01d      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004022:	d111      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	3304      	adds	r3, #4
 8004028:	2100      	movs	r1, #0
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fcd6 	bl	80049dc <RCCEx_PLL2_Config>
 8004030:	4603      	mov	r3, r0
 8004032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004034:	e012      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3324      	adds	r3, #36	@ 0x24
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f000 fd7f 	bl	8004b40 <RCCEx_PLL3_Config>
 8004042:	4603      	mov	r3, r0
 8004044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004046:	e009      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	75fb      	strb	r3, [r7, #23]
      break;
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800404e:	bf00      	nop
 8004050:	e004      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004052:	bf00      	nop
 8004054:	e002      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004056:	bf00      	nop
 8004058:	e000      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800405a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800405c:	7dfb      	ldrb	r3, [r7, #23]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d10c      	bne.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004062:	4b05      	ldr	r3, [pc, #20]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004066:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004070:	4901      	ldr	r1, [pc, #4]	@ (8004078 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004072:	4313      	orrs	r3, r2
 8004074:	658b      	str	r3, [r1, #88]	@ 0x58
 8004076:	e003      	b.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8004078:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004088:	2b00      	cmp	r3, #0
 800408a:	d04b      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004092:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004096:	d02e      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8004098:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800409c:	d828      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800409e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a2:	d02a      	beq.n	80040fa <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80040a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040a8:	d822      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040aa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040ae:	d026      	beq.n	80040fe <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80040b0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80040b4:	d81c      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040b6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ba:	d010      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80040bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040c0:	d816      	bhi.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d01d      	beq.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80040c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ca:	d111      	bne.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	3304      	adds	r3, #4
 80040d0:	2100      	movs	r1, #0
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 fc82 	bl	80049dc <RCCEx_PLL2_Config>
 80040d8:	4603      	mov	r3, r0
 80040da:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040dc:	e012      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	3324      	adds	r3, #36	@ 0x24
 80040e2:	2102      	movs	r1, #2
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 fd2b 	bl	8004b40 <RCCEx_PLL3_Config>
 80040ea:	4603      	mov	r3, r0
 80040ec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040ee:	e009      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	75fb      	strb	r3, [r7, #23]
      break;
 80040f4:	e006      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040f6:	bf00      	nop
 80040f8:	e004      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040fa:	bf00      	nop
 80040fc:	e002      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040fe:	bf00      	nop
 8004100:	e000      	b.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8004102:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10a      	bne.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800410a:	4b9d      	ldr	r3, [pc, #628]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800410c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800410e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004118:	4999      	ldr	r1, [pc, #612]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800411a:	4313      	orrs	r3, r2
 800411c:	658b      	str	r3, [r1, #88]	@ 0x58
 800411e:	e001      	b.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004120:	7dfb      	ldrb	r3, [r7, #23]
 8004122:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b00      	cmp	r3, #0
 800412e:	d01a      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004136:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800413a:	d10a      	bne.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	3324      	adds	r3, #36	@ 0x24
 8004140:	2102      	movs	r1, #2
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fcfc 	bl	8004b40 <RCCEx_PLL3_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004152:	4b8b      	ldr	r3, [pc, #556]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004154:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004156:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004160:	4987      	ldr	r1, [pc, #540]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004162:	4313      	orrs	r3, r2
 8004164:	654b      	str	r3, [r1, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0310 	and.w	r3, r3, #16
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01a      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004178:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800417c:	d10a      	bne.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	3324      	adds	r3, #36	@ 0x24
 8004182:	2102      	movs	r1, #2
 8004184:	4618      	mov	r0, r3
 8004186:	f000 fcdb 	bl	8004b40 <RCCEx_PLL3_Config>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d001      	beq.n	8004194 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004194:	4b7a      	ldr	r3, [pc, #488]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004198:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a2:	4977      	ldr	r1, [pc, #476]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	658b      	str	r3, [r1, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d034      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041be:	d01d      	beq.n	80041fc <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80041c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041c4:	d817      	bhi.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d003      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80041ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ce:	d009      	beq.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80041d0:	e011      	b.n	80041f6 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	3304      	adds	r3, #4
 80041d6:	2100      	movs	r1, #0
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fbff 	bl	80049dc <RCCEx_PLL2_Config>
 80041de:	4603      	mov	r3, r0
 80041e0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041e2:	e00c      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	3324      	adds	r3, #36	@ 0x24
 80041e8:	2102      	movs	r1, #2
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fca8 	bl	8004b40 <RCCEx_PLL3_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041f4:	e003      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	75fb      	strb	r3, [r7, #23]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80041fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041fe:	7dfb      	ldrb	r3, [r7, #23]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d10a      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004204:	4b5e      	ldr	r3, [pc, #376]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004206:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004208:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004212:	495b      	ldr	r1, [pc, #364]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004214:	4313      	orrs	r3, r2
 8004216:	658b      	str	r3, [r1, #88]	@ 0x58
 8004218:	e001      	b.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d033      	beq.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004230:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004234:	d01c      	beq.n	8004270 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 8004236:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800423a:	d816      	bhi.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800423c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004240:	d003      	beq.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004242:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004246:	d007      	beq.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8004248:	e00f      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800424a:	4b4d      	ldr	r3, [pc, #308]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800424c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424e:	4a4c      	ldr	r2, [pc, #304]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004250:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004254:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004256:	e00c      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	3324      	adds	r3, #36	@ 0x24
 800425c:	2101      	movs	r1, #1
 800425e:	4618      	mov	r0, r3
 8004260:	f000 fc6e 	bl	8004b40 <RCCEx_PLL3_Config>
 8004264:	4603      	mov	r3, r0
 8004266:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800426a:	2301      	movs	r3, #1
 800426c:	75fb      	strb	r3, [r7, #23]
      break;
 800426e:	e000      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004272:	7dfb      	ldrb	r3, [r7, #23]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10a      	bne.n	800428e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004278:	4b41      	ldr	r3, [pc, #260]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800427c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004286:	493e      	ldr	r1, [pc, #248]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004288:	4313      	orrs	r3, r2
 800428a:	654b      	str	r3, [r1, #84]	@ 0x54
 800428c:	e001      	b.n	8004292 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800428e:	7dfb      	ldrb	r3, [r7, #23]
 8004290:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d029      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d003      	beq.n	80042ae <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80042a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042aa:	d007      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80042ac:	e00f      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042ae:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b2:	4a33      	ldr	r2, [pc, #204]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042ba:	e00b      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	2102      	movs	r1, #2
 80042c2:	4618      	mov	r0, r3
 80042c4:	f000 fb8a 	bl	80049dc <RCCEx_PLL2_Config>
 80042c8:	4603      	mov	r3, r0
 80042ca:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042cc:	e002      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	75fb      	strb	r3, [r7, #23]
      break;
 80042d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042d4:	7dfb      	ldrb	r3, [r7, #23]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d109      	bne.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042da:	4b29      	ldr	r3, [pc, #164]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	4926      	ldr	r1, [pc, #152]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	64cb      	str	r3, [r1, #76]	@ 0x4c
 80042ec:	e001      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ee:	7dfb      	ldrb	r3, [r7, #23]
 80042f0:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	3324      	adds	r3, #36	@ 0x24
 8004302:	2102      	movs	r1, #2
 8004304:	4618      	mov	r0, r3
 8004306:	f000 fc1b 	bl	8004b40 <RCCEx_PLL3_Config>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d001      	beq.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d033      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004328:	d017      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800432a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800432e:	d811      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004334:	d013      	beq.n	800435e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800433a:	d80b      	bhi.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800433c:	2b00      	cmp	r3, #0
 800433e:	d010      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004344:	d106      	bne.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004346:	4b0e      	ldr	r3, [pc, #56]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	4a0d      	ldr	r2, [pc, #52]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800434c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004350:	62d3      	str	r3, [r2, #44]	@ 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004352:	e007      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	75fb      	strb	r3, [r7, #23]
      break;
 8004358:	e004      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800435a:	bf00      	nop
 800435c:	e002      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004362:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004364:	7dfb      	ldrb	r3, [r7, #23]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d10c      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800436a:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800436c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800436e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004376:	4902      	ldr	r1, [pc, #8]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004378:	4313      	orrs	r3, r2
 800437a:	654b      	str	r3, [r1, #84]	@ 0x54
 800437c:	e004      	b.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	7dfb      	ldrb	r3, [r7, #23]
 8004386:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d008      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004394:	4b31      	ldr	r3, [pc, #196]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004396:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004398:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043a0:	492e      	ldr	r1, [pc, #184]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	650b      	str	r3, [r1, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d009      	beq.n	80043c6 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80043b2:	4b2a      	ldr	r3, [pc, #168]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80043c0:	4926      	ldr	r1, [pc, #152]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043c2:	4313      	orrs	r3, r2
 80043c4:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d008      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043d2:	4b22      	ldr	r3, [pc, #136]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043d6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043de:	491f      	ldr	r1, [pc, #124]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043e0:	4313      	orrs	r3, r2
 80043e2:	650b      	str	r3, [r1, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00d      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043f0:	4b1a      	ldr	r3, [pc, #104]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f2:	691b      	ldr	r3, [r3, #16]
 80043f4:	4a19      	ldr	r2, [pc, #100]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80043fa:	6113      	str	r3, [r2, #16]
 80043fc:	4b17      	ldr	r3, [pc, #92]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004406:	4915      	ldr	r1, [pc, #84]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004408:	4313      	orrs	r3, r2
 800440a:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	da08      	bge.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004414:	4b11      	ldr	r3, [pc, #68]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004418:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004420:	490e      	ldr	r1, [pc, #56]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004422:	4313      	orrs	r3, r2
 8004424:	64cb      	str	r3, [r1, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d009      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004432:	4b0a      	ldr	r3, [pc, #40]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004434:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004436:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004440:	4906      	ldr	r1, [pc, #24]	@ (800445c <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004442:	4313      	orrs	r3, r2
 8004444:	654b      	str	r3, [r1, #84]	@ 0x54
  }

  if (status == HAL_OK)
 8004446:	7dbb      	ldrb	r3, [r7, #22]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d101      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	e000      	b.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
}
 8004452:	4618      	mov	r0, r3
 8004454:	3718      	adds	r7, #24
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	58024400 	.word	0x58024400

08004460 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004464:	f7ff f85a 	bl	800351c <HAL_RCC_GetHCLKFreq>
 8004468:	4602      	mov	r2, r0
 800446a:	4b06      	ldr	r3, [pc, #24]	@ (8004484 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800446c:	6a1b      	ldr	r3, [r3, #32]
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	4904      	ldr	r1, [pc, #16]	@ (8004488 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004476:	5ccb      	ldrb	r3, [r1, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004480:	4618      	mov	r0, r3
 8004482:	bd80      	pop	{r7, pc}
 8004484:	58024400 	.word	0x58024400
 8004488:	080064d0 	.word	0x080064d0

0800448c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	@ 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004494:	4ba1      	ldr	r3, [pc, #644]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004498:	f003 0303 	and.w	r3, r3, #3
 800449c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800449e:	4b9f      	ldr	r3, [pc, #636]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a2:	0b1b      	lsrs	r3, r3, #12
 80044a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80044a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80044aa:	4b9c      	ldr	r3, [pc, #624]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	091b      	lsrs	r3, r3, #4
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80044b6:	4b99      	ldr	r3, [pc, #612]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ba:	08db      	lsrs	r3, r3, #3
 80044bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	fb02 f303 	mul.w	r3, r2, r3
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8111 	beq.w	80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	f000 8083 	beq.w	80045e8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	f200 80a1 	bhi.w	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d003      	beq.n	80044f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d056      	beq.n	80045a4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044f6:	e099      	b.n	800462c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044f8:	4b88      	ldr	r3, [pc, #544]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0320 	and.w	r3, r3, #32
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02d      	beq.n	8004560 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004504:	4b85      	ldr	r3, [pc, #532]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	08db      	lsrs	r3, r3, #3
 800450a:	f003 0303 	and.w	r3, r3, #3
 800450e:	4a84      	ldr	r2, [pc, #528]	@ (8004720 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004510:	fa22 f303 	lsr.w	r3, r2, r3
 8004514:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	ee07 3a90 	vmov	s15, r3
 800451c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b7b      	ldr	r3, [pc, #492]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004530:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004542:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800455e:	e087      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	ee07 3a90 	vmov	s15, r3
 8004566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004728 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800456e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004572:	4b6a      	ldr	r3, [pc, #424]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004582:	ed97 6a03 	vldr	s12, [r7, #12]
 8004586:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800458a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800458e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800459e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045a2:	e065      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800472c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b6:	4b59      	ldr	r3, [pc, #356]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045e6:	e043      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	ee07 3a90 	vmov	s15, r3
 80045ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004730 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fa:	4b48      	ldr	r3, [pc, #288]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460a:	ed97 6a03 	vldr	s12, [r7, #12]
 800460e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800461e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800462a:	e021      	b.n	8004670 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	ee07 3a90 	vmov	s15, r3
 8004632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004636:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800472c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800463a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463e:	4b37      	ldr	r3, [pc, #220]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004646:	ee07 3a90 	vmov	s15, r3
 800464a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004652:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004724 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800465a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800466a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800466e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004670:	4b2a      	ldr	r3, [pc, #168]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004672:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004674:	0a5b      	lsrs	r3, r3, #9
 8004676:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800467a:	ee07 3a90 	vmov	s15, r3
 800467e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004682:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004686:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468a:	edd7 6a07 	vldr	s13, [r7, #28]
 800468e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004692:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004696:	ee17 2a90 	vmov	r2, s15
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800469e:	4b1f      	ldr	r3, [pc, #124]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046a2:	0c1b      	lsrs	r3, r3, #16
 80046a4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046a8:	ee07 3a90 	vmov	s15, r3
 80046ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80046bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c4:	ee17 2a90 	vmov	r2, s15
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80046cc:	4b13      	ldr	r3, [pc, #76]	@ (800471c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d0:	0e1b      	lsrs	r3, r3, #24
 80046d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80046d6:	ee07 3a90 	vmov	s15, r3
 80046da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046de:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80046e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046f2:	ee17 2a90 	vmov	r2, s15
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	609a      	str	r2, [r3, #8]
}
 800470e:	bf00      	nop
 8004710:	3724      	adds	r7, #36	@ 0x24
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	58024400 	.word	0x58024400
 8004720:	03d09000 	.word	0x03d09000
 8004724:	46000000 	.word	0x46000000
 8004728:	4c742400 	.word	0x4c742400
 800472c:	4a742400 	.word	0x4a742400
 8004730:	4af42400 	.word	0x4af42400

08004734 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	@ 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800473c:	4ba1      	ldr	r3, [pc, #644]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004740:	f003 0303 	and.w	r3, r3, #3
 8004744:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8004746:	4b9f      	ldr	r3, [pc, #636]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800474a:	0d1b      	lsrs	r3, r3, #20
 800474c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004750:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004752:	4b9c      	ldr	r3, [pc, #624]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004756:	0a1b      	lsrs	r3, r3, #8
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800475e:	4b99      	ldr	r3, [pc, #612]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	08db      	lsrs	r3, r3, #3
 8004764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	fb02 f303 	mul.w	r3, r2, r3
 800476e:	ee07 3a90 	vmov	s15, r3
 8004772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004776:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 8111 	beq.w	80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b02      	cmp	r3, #2
 8004786:	f000 8083 	beq.w	8004890 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	2b02      	cmp	r3, #2
 800478e:	f200 80a1 	bhi.w	80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004792:	69bb      	ldr	r3, [r7, #24]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	2b01      	cmp	r3, #1
 800479c:	d056      	beq.n	800484c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800479e:	e099      	b.n	80048d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80047a0:	4b88      	ldr	r3, [pc, #544]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0320 	and.w	r3, r3, #32
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d02d      	beq.n	8004808 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80047ac:	4b85      	ldr	r3, [pc, #532]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	08db      	lsrs	r3, r3, #3
 80047b2:	f003 0303 	and.w	r3, r3, #3
 80047b6:	4a84      	ldr	r2, [pc, #528]	@ (80049c8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80047b8:	fa22 f303 	lsr.w	r3, r2, r3
 80047bc:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	ee07 3a90 	vmov	s15, r3
 80047c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047d6:	4b7b      	ldr	r3, [pc, #492]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004802:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004806:	e087      	b.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	ee07 3a90 	vmov	s15, r3
 800480e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004812:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049d0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481a:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800481e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482a:	ed97 6a03 	vldr	s12, [r7, #12]
 800482e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800483e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004846:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800484a:	e065      	b.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	ee07 3a90 	vmov	s15, r3
 8004852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004856:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800485a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800485e:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800486e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004872:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800487e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800488e:	e043      	b.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	ee07 3a90 	vmov	s15, r3
 8004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049d8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800489e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a2:	4b48      	ldr	r3, [pc, #288]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048d2:	e021      	b.n	8004918 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	ee07 3a90 	vmov	s15, r3
 80048da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049d4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048e6:	4b37      	ldr	r3, [pc, #220]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049cc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004906:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800490a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800490e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004916:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8004918:	4b2a      	ldr	r3, [pc, #168]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491c:	0a5b      	lsrs	r3, r3, #9
 800491e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004922:	ee07 3a90 	vmov	s15, r3
 8004926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800492e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004932:	edd7 6a07 	vldr	s13, [r7, #28]
 8004936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800493e:	ee17 2a90 	vmov	r2, s15
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8004946:	4b1f      	ldr	r3, [pc, #124]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	0c1b      	lsrs	r3, r3, #16
 800494c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004950:	ee07 3a90 	vmov	s15, r3
 8004954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004958:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800495c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004960:	edd7 6a07 	vldr	s13, [r7, #28]
 8004964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004968:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496c:	ee17 2a90 	vmov	r2, s15
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	0e1b      	lsrs	r3, r3, #24
 800497a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800497e:	ee07 3a90 	vmov	s15, r3
 8004982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004986:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800498a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800498e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499a:	ee17 2a90 	vmov	r2, s15
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80049a2:	e008      	b.n	80049b6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	609a      	str	r2, [r3, #8]
}
 80049b6:	bf00      	nop
 80049b8:	3724      	adds	r7, #36	@ 0x24
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	58024400 	.word	0x58024400
 80049c8:	03d09000 	.word	0x03d09000
 80049cc:	46000000 	.word	0x46000000
 80049d0:	4c742400 	.word	0x4c742400
 80049d4:	4a742400 	.word	0x4a742400
 80049d8:	4af42400 	.word	0x4af42400

080049dc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049e6:	2300      	movs	r3, #0
 80049e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049ea:	4b53      	ldr	r3, [pc, #332]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ee:	f003 0303 	and.w	r3, r3, #3
 80049f2:	2b03      	cmp	r3, #3
 80049f4:	d101      	bne.n	80049fa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e099      	b.n	8004b2e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049fa:	4b4f      	ldr	r3, [pc, #316]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	4a4e      	ldr	r2, [pc, #312]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a06:	f7fc fd0f 	bl	8001428 <HAL_GetTick>
 8004a0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a0c:	e008      	b.n	8004a20 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004a0e:	f7fc fd0b 	bl	8001428 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e086      	b.n	8004b2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004a20:	4b45      	ldr	r3, [pc, #276]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d1f0      	bne.n	8004a0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a2c:	4b42      	ldr	r3, [pc, #264]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	031b      	lsls	r3, r3, #12
 8004a3a:	493f      	ldr	r1, [pc, #252]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	3b01      	subs	r3, #1
 8004a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	025b      	lsls	r3, r3, #9
 8004a52:	b29b      	uxth	r3, r3
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004a62:	431a      	orrs	r2, r3
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	3b01      	subs	r3, #1
 8004a6a:	061b      	lsls	r3, r3, #24
 8004a6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004a70:	4931      	ldr	r1, [pc, #196]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	4313      	orrs	r3, r2
 8004a74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a76:	4b30      	ldr	r3, [pc, #192]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	492d      	ldr	r1, [pc, #180]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a84:	4313      	orrs	r3, r2
 8004a86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a88:	4b2b      	ldr	r3, [pc, #172]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a8c:	f023 0220 	bic.w	r2, r3, #32
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	4928      	ldr	r1, [pc, #160]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a9a:	4b27      	ldr	r3, [pc, #156]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004a9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9e:	4a26      	ldr	r2, [pc, #152]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	f023 0310 	bic.w	r3, r3, #16
 8004aa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004aa6:	4b24      	ldr	r3, [pc, #144]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004aaa:	4b24      	ldr	r3, [pc, #144]	@ (8004b3c <RCCEx_PLL2_Config+0x160>)
 8004aac:	4013      	ands	r3, r2
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	69d2      	ldr	r2, [r2, #28]
 8004ab2:	00d2      	lsls	r2, r2, #3
 8004ab4:	4920      	ldr	r1, [pc, #128]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004aba:	4b1f      	ldr	r3, [pc, #124]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004abe:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f043 0310 	orr.w	r3, r3, #16
 8004ac4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d106      	bne.n	8004ada <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004acc:	4b1a      	ldr	r3, [pc, #104]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ad0:	4a19      	ldr	r2, [pc, #100]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004ad6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ad8:	e00f      	b.n	8004afa <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d106      	bne.n	8004aee <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ae0:	4b15      	ldr	r3, [pc, #84]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae4:	4a14      	ldr	r2, [pc, #80]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004ae6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004aea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004aec:	e005      	b.n	8004afa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004aee:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	4a11      	ldr	r2, [pc, #68]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004af8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004afa:	4b0f      	ldr	r3, [pc, #60]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a0e      	ldr	r2, [pc, #56]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004b00:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b06:	f7fc fc8f 	bl	8001428 <HAL_GetTick>
 8004b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b0c:	e008      	b.n	8004b20 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004b0e:	f7fc fc8b 	bl	8001428 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e006      	b.n	8004b2e <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004b20:	4b05      	ldr	r3, [pc, #20]	@ (8004b38 <RCCEx_PLL2_Config+0x15c>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	3710      	adds	r7, #16
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop
 8004b38:	58024400 	.word	0x58024400
 8004b3c:	ffff0007 	.word	0xffff0007

08004b40 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b4e:	4b53      	ldr	r3, [pc, #332]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d101      	bne.n	8004b5e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e099      	b.n	8004c92 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a4e      	ldr	r2, [pc, #312]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b6a:	f7fc fc5d 	bl	8001428 <HAL_GetTick>
 8004b6e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b70:	e008      	b.n	8004b84 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b72:	f7fc fc59 	bl	8001428 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d901      	bls.n	8004b84 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e086      	b.n	8004c92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b84:	4b45      	ldr	r3, [pc, #276]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1f0      	bne.n	8004b72 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b90:	4b42      	ldr	r3, [pc, #264]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b94:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	051b      	lsls	r3, r3, #20
 8004b9e:	493f      	ldr	r1, [pc, #252]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	3b01      	subs	r3, #1
 8004baa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	3b01      	subs	r3, #1
 8004bb4:	025b      	lsls	r3, r3, #9
 8004bb6:	b29b      	uxth	r3, r3
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	041b      	lsls	r3, r3, #16
 8004bc2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	061b      	lsls	r3, r3, #24
 8004bd0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004bd4:	4931      	ldr	r1, [pc, #196]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bda:	4b30      	ldr	r3, [pc, #192]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	492d      	ldr	r1, [pc, #180]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004be8:	4313      	orrs	r3, r2
 8004bea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bec:	4b2b      	ldr	r3, [pc, #172]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	4928      	ldr	r1, [pc, #160]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bfe:	4b27      	ldr	r3, [pc, #156]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c02:	4a26      	ldr	r2, [pc, #152]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004c0a:	4b24      	ldr	r3, [pc, #144]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c0c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004c0e:	4b24      	ldr	r3, [pc, #144]	@ (8004ca0 <RCCEx_PLL3_Config+0x160>)
 8004c10:	4013      	ands	r3, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	69d2      	ldr	r2, [r2, #28]
 8004c16:	00d2      	lsls	r2, r2, #3
 8004c18:	4920      	ldr	r1, [pc, #128]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004c1e:	4b1f      	ldr	r3, [pc, #124]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	4a1e      	ldr	r2, [pc, #120]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c28:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d106      	bne.n	8004c3e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c30:	4b1a      	ldr	r3, [pc, #104]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c34:	4a19      	ldr	r2, [pc, #100]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c36:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004c3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c3c:	e00f      	b.n	8004c5e <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d106      	bne.n	8004c52 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c44:	4b15      	ldr	r3, [pc, #84]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c48:	4a14      	ldr	r2, [pc, #80]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c4a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004c4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004c50:	e005      	b.n	8004c5e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c52:	4b12      	ldr	r3, [pc, #72]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c56:	4a11      	ldr	r2, [pc, #68]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c58:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004c5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c5e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a0e      	ldr	r2, [pc, #56]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c6a:	f7fc fbdd 	bl	8001428 <HAL_GetTick>
 8004c6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c70:	e008      	b.n	8004c84 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c72:	f7fc fbd9 	bl	8001428 <HAL_GetTick>
 8004c76:	4602      	mov	r2, r0
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	2b02      	cmp	r3, #2
 8004c7e:	d901      	bls.n	8004c84 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e006      	b.n	8004c92 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <RCCEx_PLL3_Config+0x15c>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d0f0      	beq.n	8004c72 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3710      	adds	r7, #16
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bd80      	pop	{r7, pc}
 8004c9a:	bf00      	nop
 8004c9c:	58024400 	.word	0x58024400
 8004ca0:	ffff0007 	.word	0xffff0007

08004ca4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d101      	bne.n	8004cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	e042      	b.n	8004d3c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d106      	bne.n	8004cce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f7fc f887 	bl	8000ddc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2224      	movs	r2, #36	@ 0x24
 8004cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f022 0201 	bic.w	r2, r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004ce6:	6878      	ldr	r0, [r7, #4]
 8004ce8:	f000 f82c 	bl	8004d44 <UART_SetConfig>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	e022      	b.n	8004d3c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fd88 	bl	8005814 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004d12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681a      	ldr	r2, [r3, #0]
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f042 0201 	orr.w	r2, r2, #1
 8004d32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f000 fe0f 	bl	8005958 <UART_CheckIdleState>
 8004d3a:	4603      	mov	r3, r0
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d48:	b092      	sub	sp, #72	@ 0x48
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	689a      	ldr	r2, [r3, #8]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	691b      	ldr	r3, [r3, #16]
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	69db      	ldr	r3, [r3, #28]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	681a      	ldr	r2, [r3, #0]
 8004d72:	4bbe      	ldr	r3, [pc, #760]	@ (800506c <UART_SetConfig+0x328>)
 8004d74:	4013      	ands	r3, r2
 8004d76:	697a      	ldr	r2, [r7, #20]
 8004d78:	6812      	ldr	r2, [r2, #0]
 8004d7a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004d7c:	430b      	orrs	r3, r1
 8004d7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	68da      	ldr	r2, [r3, #12]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	430a      	orrs	r2, r1
 8004d94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d96:	697b      	ldr	r3, [r7, #20]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4ab3      	ldr	r2, [pc, #716]	@ (8005070 <UART_SetConfig+0x32c>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d004      	beq.n	8004db0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004dac:	4313      	orrs	r3, r2
 8004dae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004db0:	697b      	ldr	r3, [r7, #20]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	4baf      	ldr	r3, [pc, #700]	@ (8005074 <UART_SetConfig+0x330>)
 8004db8:	4013      	ands	r3, r2
 8004dba:	697a      	ldr	r2, [r7, #20]
 8004dbc:	6812      	ldr	r2, [r2, #0]
 8004dbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004dc0:	430b      	orrs	r3, r1
 8004dc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dca:	f023 010f 	bic.w	r1, r3, #15
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4aa6      	ldr	r2, [pc, #664]	@ (8005078 <UART_SetConfig+0x334>)
 8004de0:	4293      	cmp	r3, r2
 8004de2:	d177      	bne.n	8004ed4 <UART_SetConfig+0x190>
 8004de4:	4ba5      	ldr	r3, [pc, #660]	@ (800507c <UART_SetConfig+0x338>)
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004dec:	2b28      	cmp	r3, #40	@ 0x28
 8004dee:	d86d      	bhi.n	8004ecc <UART_SetConfig+0x188>
 8004df0:	a201      	add	r2, pc, #4	@ (adr r2, 8004df8 <UART_SetConfig+0xb4>)
 8004df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df6:	bf00      	nop
 8004df8:	08004e9d 	.word	0x08004e9d
 8004dfc:	08004ecd 	.word	0x08004ecd
 8004e00:	08004ecd 	.word	0x08004ecd
 8004e04:	08004ecd 	.word	0x08004ecd
 8004e08:	08004ecd 	.word	0x08004ecd
 8004e0c:	08004ecd 	.word	0x08004ecd
 8004e10:	08004ecd 	.word	0x08004ecd
 8004e14:	08004ecd 	.word	0x08004ecd
 8004e18:	08004ea5 	.word	0x08004ea5
 8004e1c:	08004ecd 	.word	0x08004ecd
 8004e20:	08004ecd 	.word	0x08004ecd
 8004e24:	08004ecd 	.word	0x08004ecd
 8004e28:	08004ecd 	.word	0x08004ecd
 8004e2c:	08004ecd 	.word	0x08004ecd
 8004e30:	08004ecd 	.word	0x08004ecd
 8004e34:	08004ecd 	.word	0x08004ecd
 8004e38:	08004ead 	.word	0x08004ead
 8004e3c:	08004ecd 	.word	0x08004ecd
 8004e40:	08004ecd 	.word	0x08004ecd
 8004e44:	08004ecd 	.word	0x08004ecd
 8004e48:	08004ecd 	.word	0x08004ecd
 8004e4c:	08004ecd 	.word	0x08004ecd
 8004e50:	08004ecd 	.word	0x08004ecd
 8004e54:	08004ecd 	.word	0x08004ecd
 8004e58:	08004eb5 	.word	0x08004eb5
 8004e5c:	08004ecd 	.word	0x08004ecd
 8004e60:	08004ecd 	.word	0x08004ecd
 8004e64:	08004ecd 	.word	0x08004ecd
 8004e68:	08004ecd 	.word	0x08004ecd
 8004e6c:	08004ecd 	.word	0x08004ecd
 8004e70:	08004ecd 	.word	0x08004ecd
 8004e74:	08004ecd 	.word	0x08004ecd
 8004e78:	08004ebd 	.word	0x08004ebd
 8004e7c:	08004ecd 	.word	0x08004ecd
 8004e80:	08004ecd 	.word	0x08004ecd
 8004e84:	08004ecd 	.word	0x08004ecd
 8004e88:	08004ecd 	.word	0x08004ecd
 8004e8c:	08004ecd 	.word	0x08004ecd
 8004e90:	08004ecd 	.word	0x08004ecd
 8004e94:	08004ecd 	.word	0x08004ecd
 8004e98:	08004ec5 	.word	0x08004ec5
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ea2:	e222      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ea4:	2304      	movs	r3, #4
 8004ea6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eaa:	e21e      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004eac:	2308      	movs	r3, #8
 8004eae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eb2:	e21a      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eba:	e216      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ebc:	2320      	movs	r3, #32
 8004ebe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ec2:	e212      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ec4:	2340      	movs	r3, #64	@ 0x40
 8004ec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004eca:	e20e      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ecc:	2380      	movs	r3, #128	@ 0x80
 8004ece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ed2:	e20a      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a69      	ldr	r2, [pc, #420]	@ (8005080 <UART_SetConfig+0x33c>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d130      	bne.n	8004f40 <UART_SetConfig+0x1fc>
 8004ede:	4b67      	ldr	r3, [pc, #412]	@ (800507c <UART_SetConfig+0x338>)
 8004ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	2b05      	cmp	r3, #5
 8004ee8:	d826      	bhi.n	8004f38 <UART_SetConfig+0x1f4>
 8004eea:	a201      	add	r2, pc, #4	@ (adr r2, 8004ef0 <UART_SetConfig+0x1ac>)
 8004eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ef0:	08004f09 	.word	0x08004f09
 8004ef4:	08004f11 	.word	0x08004f11
 8004ef8:	08004f19 	.word	0x08004f19
 8004efc:	08004f21 	.word	0x08004f21
 8004f00:	08004f29 	.word	0x08004f29
 8004f04:	08004f31 	.word	0x08004f31
 8004f08:	2300      	movs	r3, #0
 8004f0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f0e:	e1ec      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f10:	2304      	movs	r3, #4
 8004f12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f16:	e1e8      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f18:	2308      	movs	r3, #8
 8004f1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f1e:	e1e4      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f20:	2310      	movs	r3, #16
 8004f22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f26:	e1e0      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f28:	2320      	movs	r3, #32
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e1dc      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f30:	2340      	movs	r3, #64	@ 0x40
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e1d8      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f38:	2380      	movs	r3, #128	@ 0x80
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e1d4      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a4f      	ldr	r2, [pc, #316]	@ (8005084 <UART_SetConfig+0x340>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d130      	bne.n	8004fac <UART_SetConfig+0x268>
 8004f4a:	4b4c      	ldr	r3, [pc, #304]	@ (800507c <UART_SetConfig+0x338>)
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f4e:	f003 0307 	and.w	r3, r3, #7
 8004f52:	2b05      	cmp	r3, #5
 8004f54:	d826      	bhi.n	8004fa4 <UART_SetConfig+0x260>
 8004f56:	a201      	add	r2, pc, #4	@ (adr r2, 8004f5c <UART_SetConfig+0x218>)
 8004f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5c:	08004f75 	.word	0x08004f75
 8004f60:	08004f7d 	.word	0x08004f7d
 8004f64:	08004f85 	.word	0x08004f85
 8004f68:	08004f8d 	.word	0x08004f8d
 8004f6c:	08004f95 	.word	0x08004f95
 8004f70:	08004f9d 	.word	0x08004f9d
 8004f74:	2300      	movs	r3, #0
 8004f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f7a:	e1b6      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f82:	e1b2      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f8a:	e1ae      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f92:	e1aa      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f94:	2320      	movs	r3, #32
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e1a6      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004f9c:	2340      	movs	r3, #64	@ 0x40
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e1a2      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004fa4:	2380      	movs	r3, #128	@ 0x80
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e19e      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	4a35      	ldr	r2, [pc, #212]	@ (8005088 <UART_SetConfig+0x344>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d130      	bne.n	8005018 <UART_SetConfig+0x2d4>
 8004fb6:	4b31      	ldr	r3, [pc, #196]	@ (800507c <UART_SetConfig+0x338>)
 8004fb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	2b05      	cmp	r3, #5
 8004fc0:	d826      	bhi.n	8005010 <UART_SetConfig+0x2cc>
 8004fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc8 <UART_SetConfig+0x284>)
 8004fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc8:	08004fe1 	.word	0x08004fe1
 8004fcc:	08004fe9 	.word	0x08004fe9
 8004fd0:	08004ff1 	.word	0x08004ff1
 8004fd4:	08004ff9 	.word	0x08004ff9
 8004fd8:	08005001 	.word	0x08005001
 8004fdc:	08005009 	.word	0x08005009
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fe6:	e180      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004fe8:	2304      	movs	r3, #4
 8004fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fee:	e17c      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ff0:	2308      	movs	r3, #8
 8004ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ff6:	e178      	b.n	80052ea <UART_SetConfig+0x5a6>
 8004ff8:	2310      	movs	r3, #16
 8004ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ffe:	e174      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005000:	2320      	movs	r3, #32
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e170      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005008:	2340      	movs	r3, #64	@ 0x40
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e16c      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005010:	2380      	movs	r3, #128	@ 0x80
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e168      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a1b      	ldr	r2, [pc, #108]	@ (800508c <UART_SetConfig+0x348>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d142      	bne.n	80050a8 <UART_SetConfig+0x364>
 8005022:	4b16      	ldr	r3, [pc, #88]	@ (800507c <UART_SetConfig+0x338>)
 8005024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b05      	cmp	r3, #5
 800502c:	d838      	bhi.n	80050a0 <UART_SetConfig+0x35c>
 800502e:	a201      	add	r2, pc, #4	@ (adr r2, 8005034 <UART_SetConfig+0x2f0>)
 8005030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005034:	0800504d 	.word	0x0800504d
 8005038:	08005055 	.word	0x08005055
 800503c:	0800505d 	.word	0x0800505d
 8005040:	08005065 	.word	0x08005065
 8005044:	08005091 	.word	0x08005091
 8005048:	08005099 	.word	0x08005099
 800504c:	2300      	movs	r3, #0
 800504e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005052:	e14a      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005054:	2304      	movs	r3, #4
 8005056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800505a:	e146      	b.n	80052ea <UART_SetConfig+0x5a6>
 800505c:	2308      	movs	r3, #8
 800505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005062:	e142      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005064:	2310      	movs	r3, #16
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800506a:	e13e      	b.n	80052ea <UART_SetConfig+0x5a6>
 800506c:	cfff69f3 	.word	0xcfff69f3
 8005070:	58000c00 	.word	0x58000c00
 8005074:	11fff4ff 	.word	0x11fff4ff
 8005078:	40011000 	.word	0x40011000
 800507c:	58024400 	.word	0x58024400
 8005080:	40004400 	.word	0x40004400
 8005084:	40004800 	.word	0x40004800
 8005088:	40004c00 	.word	0x40004c00
 800508c:	40005000 	.word	0x40005000
 8005090:	2320      	movs	r3, #32
 8005092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005096:	e128      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005098:	2340      	movs	r3, #64	@ 0x40
 800509a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509e:	e124      	b.n	80052ea <UART_SetConfig+0x5a6>
 80050a0:	2380      	movs	r3, #128	@ 0x80
 80050a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a6:	e120      	b.n	80052ea <UART_SetConfig+0x5a6>
 80050a8:	697b      	ldr	r3, [r7, #20]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4acb      	ldr	r2, [pc, #812]	@ (80053dc <UART_SetConfig+0x698>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d176      	bne.n	80051a0 <UART_SetConfig+0x45c>
 80050b2:	4bcb      	ldr	r3, [pc, #812]	@ (80053e0 <UART_SetConfig+0x69c>)
 80050b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80050b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ba:	2b28      	cmp	r3, #40	@ 0x28
 80050bc:	d86c      	bhi.n	8005198 <UART_SetConfig+0x454>
 80050be:	a201      	add	r2, pc, #4	@ (adr r2, 80050c4 <UART_SetConfig+0x380>)
 80050c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050c4:	08005169 	.word	0x08005169
 80050c8:	08005199 	.word	0x08005199
 80050cc:	08005199 	.word	0x08005199
 80050d0:	08005199 	.word	0x08005199
 80050d4:	08005199 	.word	0x08005199
 80050d8:	08005199 	.word	0x08005199
 80050dc:	08005199 	.word	0x08005199
 80050e0:	08005199 	.word	0x08005199
 80050e4:	08005171 	.word	0x08005171
 80050e8:	08005199 	.word	0x08005199
 80050ec:	08005199 	.word	0x08005199
 80050f0:	08005199 	.word	0x08005199
 80050f4:	08005199 	.word	0x08005199
 80050f8:	08005199 	.word	0x08005199
 80050fc:	08005199 	.word	0x08005199
 8005100:	08005199 	.word	0x08005199
 8005104:	08005179 	.word	0x08005179
 8005108:	08005199 	.word	0x08005199
 800510c:	08005199 	.word	0x08005199
 8005110:	08005199 	.word	0x08005199
 8005114:	08005199 	.word	0x08005199
 8005118:	08005199 	.word	0x08005199
 800511c:	08005199 	.word	0x08005199
 8005120:	08005199 	.word	0x08005199
 8005124:	08005181 	.word	0x08005181
 8005128:	08005199 	.word	0x08005199
 800512c:	08005199 	.word	0x08005199
 8005130:	08005199 	.word	0x08005199
 8005134:	08005199 	.word	0x08005199
 8005138:	08005199 	.word	0x08005199
 800513c:	08005199 	.word	0x08005199
 8005140:	08005199 	.word	0x08005199
 8005144:	08005189 	.word	0x08005189
 8005148:	08005199 	.word	0x08005199
 800514c:	08005199 	.word	0x08005199
 8005150:	08005199 	.word	0x08005199
 8005154:	08005199 	.word	0x08005199
 8005158:	08005199 	.word	0x08005199
 800515c:	08005199 	.word	0x08005199
 8005160:	08005199 	.word	0x08005199
 8005164:	08005191 	.word	0x08005191
 8005168:	2301      	movs	r3, #1
 800516a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800516e:	e0bc      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005170:	2304      	movs	r3, #4
 8005172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005176:	e0b8      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005178:	2308      	movs	r3, #8
 800517a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800517e:	e0b4      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005180:	2310      	movs	r3, #16
 8005182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005186:	e0b0      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005188:	2320      	movs	r3, #32
 800518a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800518e:	e0ac      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005190:	2340      	movs	r3, #64	@ 0x40
 8005192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005196:	e0a8      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005198:	2380      	movs	r3, #128	@ 0x80
 800519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800519e:	e0a4      	b.n	80052ea <UART_SetConfig+0x5a6>
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a8f      	ldr	r2, [pc, #572]	@ (80053e4 <UART_SetConfig+0x6a0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d130      	bne.n	800520c <UART_SetConfig+0x4c8>
 80051aa:	4b8d      	ldr	r3, [pc, #564]	@ (80053e0 <UART_SetConfig+0x69c>)
 80051ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051ae:	f003 0307 	and.w	r3, r3, #7
 80051b2:	2b05      	cmp	r3, #5
 80051b4:	d826      	bhi.n	8005204 <UART_SetConfig+0x4c0>
 80051b6:	a201      	add	r2, pc, #4	@ (adr r2, 80051bc <UART_SetConfig+0x478>)
 80051b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051bc:	080051d5 	.word	0x080051d5
 80051c0:	080051dd 	.word	0x080051dd
 80051c4:	080051e5 	.word	0x080051e5
 80051c8:	080051ed 	.word	0x080051ed
 80051cc:	080051f5 	.word	0x080051f5
 80051d0:	080051fd 	.word	0x080051fd
 80051d4:	2300      	movs	r3, #0
 80051d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051da:	e086      	b.n	80052ea <UART_SetConfig+0x5a6>
 80051dc:	2304      	movs	r3, #4
 80051de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051e2:	e082      	b.n	80052ea <UART_SetConfig+0x5a6>
 80051e4:	2308      	movs	r3, #8
 80051e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051ea:	e07e      	b.n	80052ea <UART_SetConfig+0x5a6>
 80051ec:	2310      	movs	r3, #16
 80051ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051f2:	e07a      	b.n	80052ea <UART_SetConfig+0x5a6>
 80051f4:	2320      	movs	r3, #32
 80051f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80051fa:	e076      	b.n	80052ea <UART_SetConfig+0x5a6>
 80051fc:	2340      	movs	r3, #64	@ 0x40
 80051fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005202:	e072      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005204:	2380      	movs	r3, #128	@ 0x80
 8005206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800520a:	e06e      	b.n	80052ea <UART_SetConfig+0x5a6>
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a75      	ldr	r2, [pc, #468]	@ (80053e8 <UART_SetConfig+0x6a4>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d130      	bne.n	8005278 <UART_SetConfig+0x534>
 8005216:	4b72      	ldr	r3, [pc, #456]	@ (80053e0 <UART_SetConfig+0x69c>)
 8005218:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800521a:	f003 0307 	and.w	r3, r3, #7
 800521e:	2b05      	cmp	r3, #5
 8005220:	d826      	bhi.n	8005270 <UART_SetConfig+0x52c>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0x4e4>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	08005241 	.word	0x08005241
 800522c:	08005249 	.word	0x08005249
 8005230:	08005251 	.word	0x08005251
 8005234:	08005259 	.word	0x08005259
 8005238:	08005261 	.word	0x08005261
 800523c:	08005269 	.word	0x08005269
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005246:	e050      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005248:	2304      	movs	r3, #4
 800524a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800524e:	e04c      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005250:	2308      	movs	r3, #8
 8005252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005256:	e048      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005258:	2310      	movs	r3, #16
 800525a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800525e:	e044      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005260:	2320      	movs	r3, #32
 8005262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005266:	e040      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005268:	2340      	movs	r3, #64	@ 0x40
 800526a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800526e:	e03c      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005270:	2380      	movs	r3, #128	@ 0x80
 8005272:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005276:	e038      	b.n	80052ea <UART_SetConfig+0x5a6>
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a5b      	ldr	r2, [pc, #364]	@ (80053ec <UART_SetConfig+0x6a8>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d130      	bne.n	80052e4 <UART_SetConfig+0x5a0>
 8005282:	4b57      	ldr	r3, [pc, #348]	@ (80053e0 <UART_SetConfig+0x69c>)
 8005284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2b05      	cmp	r3, #5
 800528c:	d826      	bhi.n	80052dc <UART_SetConfig+0x598>
 800528e:	a201      	add	r2, pc, #4	@ (adr r2, 8005294 <UART_SetConfig+0x550>)
 8005290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005294:	080052ad 	.word	0x080052ad
 8005298:	080052b5 	.word	0x080052b5
 800529c:	080052bd 	.word	0x080052bd
 80052a0:	080052c5 	.word	0x080052c5
 80052a4:	080052cd 	.word	0x080052cd
 80052a8:	080052d5 	.word	0x080052d5
 80052ac:	2302      	movs	r3, #2
 80052ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052b2:	e01a      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052b4:	2304      	movs	r3, #4
 80052b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ba:	e016      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052bc:	2308      	movs	r3, #8
 80052be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052c2:	e012      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052c4:	2310      	movs	r3, #16
 80052c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052ca:	e00e      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052cc:	2320      	movs	r3, #32
 80052ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052d2:	e00a      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052d4:	2340      	movs	r3, #64	@ 0x40
 80052d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052da:	e006      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052dc:	2380      	movs	r3, #128	@ 0x80
 80052de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80052e2:	e002      	b.n	80052ea <UART_SetConfig+0x5a6>
 80052e4:	2380      	movs	r3, #128	@ 0x80
 80052e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3f      	ldr	r2, [pc, #252]	@ (80053ec <UART_SetConfig+0x6a8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	f040 80f8 	bne.w	80054e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052fa:	2b20      	cmp	r3, #32
 80052fc:	dc46      	bgt.n	800538c <UART_SetConfig+0x648>
 80052fe:	2b02      	cmp	r3, #2
 8005300:	f2c0 8082 	blt.w	8005408 <UART_SetConfig+0x6c4>
 8005304:	3b02      	subs	r3, #2
 8005306:	2b1e      	cmp	r3, #30
 8005308:	d87e      	bhi.n	8005408 <UART_SetConfig+0x6c4>
 800530a:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <UART_SetConfig+0x5cc>)
 800530c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005310:	08005393 	.word	0x08005393
 8005314:	08005409 	.word	0x08005409
 8005318:	0800539b 	.word	0x0800539b
 800531c:	08005409 	.word	0x08005409
 8005320:	08005409 	.word	0x08005409
 8005324:	08005409 	.word	0x08005409
 8005328:	080053ab 	.word	0x080053ab
 800532c:	08005409 	.word	0x08005409
 8005330:	08005409 	.word	0x08005409
 8005334:	08005409 	.word	0x08005409
 8005338:	08005409 	.word	0x08005409
 800533c:	08005409 	.word	0x08005409
 8005340:	08005409 	.word	0x08005409
 8005344:	08005409 	.word	0x08005409
 8005348:	080053bb 	.word	0x080053bb
 800534c:	08005409 	.word	0x08005409
 8005350:	08005409 	.word	0x08005409
 8005354:	08005409 	.word	0x08005409
 8005358:	08005409 	.word	0x08005409
 800535c:	08005409 	.word	0x08005409
 8005360:	08005409 	.word	0x08005409
 8005364:	08005409 	.word	0x08005409
 8005368:	08005409 	.word	0x08005409
 800536c:	08005409 	.word	0x08005409
 8005370:	08005409 	.word	0x08005409
 8005374:	08005409 	.word	0x08005409
 8005378:	08005409 	.word	0x08005409
 800537c:	08005409 	.word	0x08005409
 8005380:	08005409 	.word	0x08005409
 8005384:	08005409 	.word	0x08005409
 8005388:	080053fb 	.word	0x080053fb
 800538c:	2b40      	cmp	r3, #64	@ 0x40
 800538e:	d037      	beq.n	8005400 <UART_SetConfig+0x6bc>
 8005390:	e03a      	b.n	8005408 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005392:	f7ff f865 	bl	8004460 <HAL_RCCEx_GetD3PCLK1Freq>
 8005396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005398:	e03c      	b.n	8005414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800539a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800539e:	4618      	mov	r0, r3
 80053a0:	f7ff f874 	bl	800448c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80053a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053a8:	e034      	b.n	8005414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053aa:	f107 0318 	add.w	r3, r7, #24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f7ff f9c0 	bl	8004734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053b8:	e02c      	b.n	8005414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053ba:	4b09      	ldr	r3, [pc, #36]	@ (80053e0 <UART_SetConfig+0x69c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d016      	beq.n	80053f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80053c6:	4b06      	ldr	r3, [pc, #24]	@ (80053e0 <UART_SetConfig+0x69c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	08db      	lsrs	r3, r3, #3
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	4a07      	ldr	r2, [pc, #28]	@ (80053f0 <UART_SetConfig+0x6ac>)
 80053d2:	fa22 f303 	lsr.w	r3, r2, r3
 80053d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053d8:	e01c      	b.n	8005414 <UART_SetConfig+0x6d0>
 80053da:	bf00      	nop
 80053dc:	40011400 	.word	0x40011400
 80053e0:	58024400 	.word	0x58024400
 80053e4:	40007800 	.word	0x40007800
 80053e8:	40007c00 	.word	0x40007c00
 80053ec:	58000c00 	.word	0x58000c00
 80053f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80053f4:	4b9d      	ldr	r3, [pc, #628]	@ (800566c <UART_SetConfig+0x928>)
 80053f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053f8:	e00c      	b.n	8005414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053fa:	4b9d      	ldr	r3, [pc, #628]	@ (8005670 <UART_SetConfig+0x92c>)
 80053fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053fe:	e009      	b.n	8005414 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005400:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005406:	e005      	b.n	8005414 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005408:	2300      	movs	r3, #0
 800540a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800540c:	2301      	movs	r3, #1
 800540e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005412:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005414:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 81de 	beq.w	80057d8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	4a94      	ldr	r2, [pc, #592]	@ (8005674 <UART_SetConfig+0x930>)
 8005422:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005426:	461a      	mov	r2, r3
 8005428:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800542a:	fbb3 f3f2 	udiv	r3, r3, r2
 800542e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	685a      	ldr	r2, [r3, #4]
 8005434:	4613      	mov	r3, r2
 8005436:	005b      	lsls	r3, r3, #1
 8005438:	4413      	add	r3, r2
 800543a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800543c:	429a      	cmp	r2, r3
 800543e:	d305      	bcc.n	800544c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005452:	e1c1      	b.n	80057d8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005456:	2200      	movs	r2, #0
 8005458:	60bb      	str	r3, [r7, #8]
 800545a:	60fa      	str	r2, [r7, #12]
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	4a84      	ldr	r2, [pc, #528]	@ (8005674 <UART_SetConfig+0x930>)
 8005462:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005466:	b29b      	uxth	r3, r3
 8005468:	2200      	movs	r2, #0
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005472:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005476:	f7fa ff2f 	bl	80002d8 <__aeabi_uldivmod>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4610      	mov	r0, r2
 8005480:	4619      	mov	r1, r3
 8005482:	f04f 0200 	mov.w	r2, #0
 8005486:	f04f 0300 	mov.w	r3, #0
 800548a:	020b      	lsls	r3, r1, #8
 800548c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005490:	0202      	lsls	r2, r0, #8
 8005492:	6979      	ldr	r1, [r7, #20]
 8005494:	6849      	ldr	r1, [r1, #4]
 8005496:	0849      	lsrs	r1, r1, #1
 8005498:	2000      	movs	r0, #0
 800549a:	460c      	mov	r4, r1
 800549c:	4605      	mov	r5, r0
 800549e:	eb12 0804 	adds.w	r8, r2, r4
 80054a2:	eb43 0905 	adc.w	r9, r3, r5
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	469a      	mov	sl, r3
 80054ae:	4693      	mov	fp, r2
 80054b0:	4652      	mov	r2, sl
 80054b2:	465b      	mov	r3, fp
 80054b4:	4640      	mov	r0, r8
 80054b6:	4649      	mov	r1, r9
 80054b8:	f7fa ff0e 	bl	80002d8 <__aeabi_uldivmod>
 80054bc:	4602      	mov	r2, r0
 80054be:	460b      	mov	r3, r1
 80054c0:	4613      	mov	r3, r2
 80054c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054ca:	d308      	bcc.n	80054de <UART_SetConfig+0x79a>
 80054cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054d2:	d204      	bcs.n	80054de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80054da:	60da      	str	r2, [r3, #12]
 80054dc:	e17c      	b.n	80057d8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80054e4:	e178      	b.n	80057d8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	69db      	ldr	r3, [r3, #28]
 80054ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054ee:	f040 80c5 	bne.w	800567c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80054f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	dc48      	bgt.n	800558c <UART_SetConfig+0x848>
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	db7b      	blt.n	80055f6 <UART_SetConfig+0x8b2>
 80054fe:	2b20      	cmp	r3, #32
 8005500:	d879      	bhi.n	80055f6 <UART_SetConfig+0x8b2>
 8005502:	a201      	add	r2, pc, #4	@ (adr r2, 8005508 <UART_SetConfig+0x7c4>)
 8005504:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005508:	08005593 	.word	0x08005593
 800550c:	0800559b 	.word	0x0800559b
 8005510:	080055f7 	.word	0x080055f7
 8005514:	080055f7 	.word	0x080055f7
 8005518:	080055a3 	.word	0x080055a3
 800551c:	080055f7 	.word	0x080055f7
 8005520:	080055f7 	.word	0x080055f7
 8005524:	080055f7 	.word	0x080055f7
 8005528:	080055b3 	.word	0x080055b3
 800552c:	080055f7 	.word	0x080055f7
 8005530:	080055f7 	.word	0x080055f7
 8005534:	080055f7 	.word	0x080055f7
 8005538:	080055f7 	.word	0x080055f7
 800553c:	080055f7 	.word	0x080055f7
 8005540:	080055f7 	.word	0x080055f7
 8005544:	080055f7 	.word	0x080055f7
 8005548:	080055c3 	.word	0x080055c3
 800554c:	080055f7 	.word	0x080055f7
 8005550:	080055f7 	.word	0x080055f7
 8005554:	080055f7 	.word	0x080055f7
 8005558:	080055f7 	.word	0x080055f7
 800555c:	080055f7 	.word	0x080055f7
 8005560:	080055f7 	.word	0x080055f7
 8005564:	080055f7 	.word	0x080055f7
 8005568:	080055f7 	.word	0x080055f7
 800556c:	080055f7 	.word	0x080055f7
 8005570:	080055f7 	.word	0x080055f7
 8005574:	080055f7 	.word	0x080055f7
 8005578:	080055f7 	.word	0x080055f7
 800557c:	080055f7 	.word	0x080055f7
 8005580:	080055f7 	.word	0x080055f7
 8005584:	080055f7 	.word	0x080055f7
 8005588:	080055e9 	.word	0x080055e9
 800558c:	2b40      	cmp	r3, #64	@ 0x40
 800558e:	d02e      	beq.n	80055ee <UART_SetConfig+0x8aa>
 8005590:	e031      	b.n	80055f6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005592:	f7fd fff3 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8005596:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005598:	e033      	b.n	8005602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800559a:	f7fe f805 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 800559e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80055a0:	e02f      	b.n	8005602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80055a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fe ff70 	bl	800448c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80055ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055b0:	e027      	b.n	8005602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80055b2:	f107 0318 	add.w	r3, r7, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7ff f8bc 	bl	8004734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055c0:	e01f      	b.n	8005602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055c2:	4b2d      	ldr	r3, [pc, #180]	@ (8005678 <UART_SetConfig+0x934>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0320 	and.w	r3, r3, #32
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d009      	beq.n	80055e2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005678 <UART_SetConfig+0x934>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	08db      	lsrs	r3, r3, #3
 80055d4:	f003 0303 	and.w	r3, r3, #3
 80055d8:	4a24      	ldr	r2, [pc, #144]	@ (800566c <UART_SetConfig+0x928>)
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055e0:	e00f      	b.n	8005602 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80055e2:	4b22      	ldr	r3, [pc, #136]	@ (800566c <UART_SetConfig+0x928>)
 80055e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055e6:	e00c      	b.n	8005602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055e8:	4b21      	ldr	r3, [pc, #132]	@ (8005670 <UART_SetConfig+0x92c>)
 80055ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055ec:	e009      	b.n	8005602 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055ee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80055f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80055f4:	e005      	b.n	8005602 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80055f6:	2300      	movs	r3, #0
 80055f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005600:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005602:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80e7 	beq.w	80057d8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	4a19      	ldr	r2, [pc, #100]	@ (8005674 <UART_SetConfig+0x930>)
 8005610:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005614:	461a      	mov	r2, r3
 8005616:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005618:	fbb3 f3f2 	udiv	r3, r3, r2
 800561c:	005a      	lsls	r2, r3, #1
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	085b      	lsrs	r3, r3, #1
 8005624:	441a      	add	r2, r3
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	fbb2 f3f3 	udiv	r3, r2, r3
 800562e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005632:	2b0f      	cmp	r3, #15
 8005634:	d916      	bls.n	8005664 <UART_SetConfig+0x920>
 8005636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800563c:	d212      	bcs.n	8005664 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	b29b      	uxth	r3, r3
 8005642:	f023 030f 	bic.w	r3, r3, #15
 8005646:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	085b      	lsrs	r3, r3, #1
 800564c:	b29b      	uxth	r3, r3
 800564e:	f003 0307 	and.w	r3, r3, #7
 8005652:	b29a      	uxth	r2, r3
 8005654:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005656:	4313      	orrs	r3, r2
 8005658:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800565a:	697b      	ldr	r3, [r7, #20]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	e0b9      	b.n	80057d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800566a:	e0b5      	b.n	80057d8 <UART_SetConfig+0xa94>
 800566c:	03d09000 	.word	0x03d09000
 8005670:	003d0900 	.word	0x003d0900
 8005674:	08006520 	.word	0x08006520
 8005678:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800567c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005680:	2b20      	cmp	r3, #32
 8005682:	dc49      	bgt.n	8005718 <UART_SetConfig+0x9d4>
 8005684:	2b00      	cmp	r3, #0
 8005686:	db7c      	blt.n	8005782 <UART_SetConfig+0xa3e>
 8005688:	2b20      	cmp	r3, #32
 800568a:	d87a      	bhi.n	8005782 <UART_SetConfig+0xa3e>
 800568c:	a201      	add	r2, pc, #4	@ (adr r2, 8005694 <UART_SetConfig+0x950>)
 800568e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005692:	bf00      	nop
 8005694:	0800571f 	.word	0x0800571f
 8005698:	08005727 	.word	0x08005727
 800569c:	08005783 	.word	0x08005783
 80056a0:	08005783 	.word	0x08005783
 80056a4:	0800572f 	.word	0x0800572f
 80056a8:	08005783 	.word	0x08005783
 80056ac:	08005783 	.word	0x08005783
 80056b0:	08005783 	.word	0x08005783
 80056b4:	0800573f 	.word	0x0800573f
 80056b8:	08005783 	.word	0x08005783
 80056bc:	08005783 	.word	0x08005783
 80056c0:	08005783 	.word	0x08005783
 80056c4:	08005783 	.word	0x08005783
 80056c8:	08005783 	.word	0x08005783
 80056cc:	08005783 	.word	0x08005783
 80056d0:	08005783 	.word	0x08005783
 80056d4:	0800574f 	.word	0x0800574f
 80056d8:	08005783 	.word	0x08005783
 80056dc:	08005783 	.word	0x08005783
 80056e0:	08005783 	.word	0x08005783
 80056e4:	08005783 	.word	0x08005783
 80056e8:	08005783 	.word	0x08005783
 80056ec:	08005783 	.word	0x08005783
 80056f0:	08005783 	.word	0x08005783
 80056f4:	08005783 	.word	0x08005783
 80056f8:	08005783 	.word	0x08005783
 80056fc:	08005783 	.word	0x08005783
 8005700:	08005783 	.word	0x08005783
 8005704:	08005783 	.word	0x08005783
 8005708:	08005783 	.word	0x08005783
 800570c:	08005783 	.word	0x08005783
 8005710:	08005783 	.word	0x08005783
 8005714:	08005775 	.word	0x08005775
 8005718:	2b40      	cmp	r3, #64	@ 0x40
 800571a:	d02e      	beq.n	800577a <UART_SetConfig+0xa36>
 800571c:	e031      	b.n	8005782 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800571e:	f7fd ff2d 	bl	800357c <HAL_RCC_GetPCLK1Freq>
 8005722:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005724:	e033      	b.n	800578e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005726:	f7fd ff3f 	bl	80035a8 <HAL_RCC_GetPCLK2Freq>
 800572a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800572c:	e02f      	b.n	800578e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800572e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005732:	4618      	mov	r0, r3
 8005734:	f7fe feaa 	bl	800448c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800573a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800573c:	e027      	b.n	800578e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800573e:	f107 0318 	add.w	r3, r7, #24
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fff6 	bl	8004734 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005748:	69fb      	ldr	r3, [r7, #28]
 800574a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800574c:	e01f      	b.n	800578e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800574e:	4b2d      	ldr	r3, [pc, #180]	@ (8005804 <UART_SetConfig+0xac0>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d009      	beq.n	800576e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800575a:	4b2a      	ldr	r3, [pc, #168]	@ (8005804 <UART_SetConfig+0xac0>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	08db      	lsrs	r3, r3, #3
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	4a28      	ldr	r2, [pc, #160]	@ (8005808 <UART_SetConfig+0xac4>)
 8005766:	fa22 f303 	lsr.w	r3, r2, r3
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800576c:	e00f      	b.n	800578e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800576e:	4b26      	ldr	r3, [pc, #152]	@ (8005808 <UART_SetConfig+0xac4>)
 8005770:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005772:	e00c      	b.n	800578e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005774:	4b25      	ldr	r3, [pc, #148]	@ (800580c <UART_SetConfig+0xac8>)
 8005776:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005778:	e009      	b.n	800578e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800577a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005780:	e005      	b.n	800578e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005782:	2300      	movs	r3, #0
 8005784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800578c:	bf00      	nop
    }

    if (pclk != 0U)
 800578e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005790:	2b00      	cmp	r3, #0
 8005792:	d021      	beq.n	80057d8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005798:	4a1d      	ldr	r2, [pc, #116]	@ (8005810 <UART_SetConfig+0xacc>)
 800579a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800579e:	461a      	mov	r2, r3
 80057a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	685b      	ldr	r3, [r3, #4]
 80057aa:	085b      	lsrs	r3, r3, #1
 80057ac:	441a      	add	r2, r3
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ba:	2b0f      	cmp	r3, #15
 80057bc:	d909      	bls.n	80057d2 <UART_SetConfig+0xa8e>
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057c4:	d205      	bcs.n	80057d2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	60da      	str	r2, [r3, #12]
 80057d0:	e002      	b.n	80057d8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	2201      	movs	r2, #1
 80057dc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e8:	697b      	ldr	r3, [r7, #20]
 80057ea:	2200      	movs	r2, #0
 80057ec:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 80057f4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3748      	adds	r7, #72	@ 0x48
 80057fc:	46bd      	mov	sp, r7
 80057fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005802:	bf00      	nop
 8005804:	58024400 	.word	0x58024400
 8005808:	03d09000 	.word	0x03d09000
 800580c:	003d0900 	.word	0x003d0900
 8005810:	08006520 	.word	0x08006520

08005814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005814:	b480      	push	{r7}
 8005816:	b083      	sub	sp, #12
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	f003 0304 	and.w	r3, r3, #4
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d00a      	beq.n	80058c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	689b      	ldr	r3, [r3, #8]
 80058b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ca:	f003 0320 	and.w	r3, r3, #32
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d00a      	beq.n	80058e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	430a      	orrs	r2, r1
 80058e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d01a      	beq.n	800592a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	430a      	orrs	r2, r1
 8005908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800590e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005912:	d10a      	bne.n	800592a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	685b      	ldr	r3, [r3, #4]
 800591a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800592e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00a      	beq.n	800594c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685b      	ldr	r3, [r3, #4]
 800593c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	430a      	orrs	r2, r1
 800594a:	605a      	str	r2, [r3, #4]
  }
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af02      	add	r7, sp, #8
 800595e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2200      	movs	r2, #0
 8005964:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005968:	f7fb fd5e 	bl	8001428 <HAL_GetTick>
 800596c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0308 	and.w	r3, r3, #8
 8005978:	2b08      	cmp	r3, #8
 800597a:	d10e      	bne.n	800599a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f82f 	bl	80059ee <UART_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e025      	b.n	80059e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 0304 	and.w	r3, r3, #4
 80059a4:	2b04      	cmp	r3, #4
 80059a6:	d10e      	bne.n	80059c6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f819 	bl	80059ee <UART_WaitOnFlagUntilTimeout>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d001      	beq.n	80059c6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e00f      	b.n	80059e6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2220      	movs	r2, #32
 80059ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2220      	movs	r2, #32
 80059d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059ee:	b580      	push	{r7, lr}
 80059f0:	b09c      	sub	sp, #112	@ 0x70
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	60f8      	str	r0, [r7, #12]
 80059f6:	60b9      	str	r1, [r7, #8]
 80059f8:	603b      	str	r3, [r7, #0]
 80059fa:	4613      	mov	r3, r2
 80059fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059fe:	e0a9      	b.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a06:	f000 80a5 	beq.w	8005b54 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a0a:	f7fb fd0d 	bl	8001428 <HAL_GetTick>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	1ad3      	subs	r3, r2, r3
 8005a14:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8005a16:	429a      	cmp	r2, r3
 8005a18:	d302      	bcc.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d140      	bne.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a26:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a28:	e853 3f00 	ldrex	r3, [r3]
 8005a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a30:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005a34:	667b      	str	r3, [r7, #100]	@ 0x64
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005a3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a40:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a42:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005a44:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005a46:	e841 2300 	strex	r3, r2, [r1]
 8005a4a:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1e6      	bne.n	8005a20 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	3308      	adds	r3, #8
 8005a70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005a72:	64ba      	str	r2, [r7, #72]	@ 0x48
 8005a74:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a76:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a78:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005a80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1e5      	bne.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2220      	movs	r2, #32
 8005a8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2220      	movs	r2, #32
 8005a92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e069      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d051      	beq.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	69db      	ldr	r3, [r3, #28]
 8005ab6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005aba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005abe:	d149      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005ac8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ad2:	e853 3f00 	ldrex	r3, [r3]
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8005ade:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ae8:	637b      	str	r3, [r7, #52]	@ 0x34
 8005aea:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005aee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005af0:	e841 2300 	strex	r3, r2, [r1]
 8005af4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005af6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d1e6      	bne.n	8005aca <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	3308      	adds	r3, #8
 8005b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b04:	697b      	ldr	r3, [r7, #20]
 8005b06:	e853 3f00 	ldrex	r3, [r3]
 8005b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f023 0301 	bic.w	r3, r3, #1
 8005b12:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	3308      	adds	r3, #8
 8005b1a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005b1c:	623a      	str	r2, [r7, #32]
 8005b1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b20:	69f9      	ldr	r1, [r7, #28]
 8005b22:	6a3a      	ldr	r2, [r7, #32]
 8005b24:	e841 2300 	strex	r3, r2, [r1]
 8005b28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1e5      	bne.n	8005afc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e010      	b.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69da      	ldr	r2, [r3, #28]
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	bf0c      	ite	eq
 8005b64:	2301      	moveq	r3, #1
 8005b66:	2300      	movne	r3, #0
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	79fb      	ldrb	r3, [r7, #7]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f43f af46 	beq.w	8005a00 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3770      	adds	r7, #112	@ 0x70
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b7e:	b480      	push	{r7}
 8005b80:	b085      	sub	sp, #20
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b90:	2302      	movs	r3, #2
 8005b92:	e027      	b.n	8005be4 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2224      	movs	r2, #36	@ 0x24
 8005ba0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681a      	ldr	r2, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f022 0201 	bic.w	r2, r2, #1
 8005bba:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005bc2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68fa      	ldr	r2, [r7, #12]
 8005bd0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2220      	movs	r2, #32
 8005bd6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3714      	adds	r7, #20
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c00:	2b01      	cmp	r3, #1
 8005c02:	d101      	bne.n	8005c08 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005c04:	2302      	movs	r3, #2
 8005c06:	e02d      	b.n	8005c64 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2201      	movs	r2, #1
 8005c0c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2224      	movs	r2, #36	@ 0x24
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f022 0201 	bic.w	r2, r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	689b      	ldr	r3, [r3, #8]
 8005c36:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	683a      	ldr	r2, [r7, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f000 f84f 	bl	8005ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d101      	bne.n	8005c84 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c80:	2302      	movs	r3, #2
 8005c82:	e02d      	b.n	8005ce0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2224      	movs	r2, #36	@ 0x24
 8005c90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	681a      	ldr	r2, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	683a      	ldr	r2, [r7, #0]
 8005cbc:	430a      	orrs	r2, r1
 8005cbe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 f811 	bl	8005ce8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2220      	movs	r2, #32
 8005cd2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8005cde:	2300      	movs	r3, #0
}
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3710      	adds	r7, #16
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005ce8:	b480      	push	{r7}
 8005cea:	b085      	sub	sp, #20
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d108      	bne.n	8005d0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005d08:	e031      	b.n	8005d6e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005d0a:	2310      	movs	r3, #16
 8005d0c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005d0e:	2310      	movs	r3, #16
 8005d10:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	0e5b      	lsrs	r3, r3, #25
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	0f5b      	lsrs	r3, r3, #29
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	f003 0307 	and.w	r3, r3, #7
 8005d30:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d32:	7bbb      	ldrb	r3, [r7, #14]
 8005d34:	7b3a      	ldrb	r2, [r7, #12]
 8005d36:	4911      	ldr	r1, [pc, #68]	@ (8005d7c <UARTEx_SetNbDataToProcess+0x94>)
 8005d38:	5c8a      	ldrb	r2, [r1, r2]
 8005d3a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d3e:	7b3a      	ldrb	r2, [r7, #12]
 8005d40:	490f      	ldr	r1, [pc, #60]	@ (8005d80 <UARTEx_SetNbDataToProcess+0x98>)
 8005d42:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d44:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d48:	b29a      	uxth	r2, r3
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	7b7a      	ldrb	r2, [r7, #13]
 8005d54:	4909      	ldr	r1, [pc, #36]	@ (8005d7c <UARTEx_SetNbDataToProcess+0x94>)
 8005d56:	5c8a      	ldrb	r2, [r1, r2]
 8005d58:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d5c:	7b7a      	ldrb	r2, [r7, #13]
 8005d5e:	4908      	ldr	r1, [pc, #32]	@ (8005d80 <UARTEx_SetNbDataToProcess+0x98>)
 8005d60:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d62:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d66:	b29a      	uxth	r2, r3
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005d6e:	bf00      	nop
 8005d70:	3714      	adds	r7, #20
 8005d72:	46bd      	mov	sp, r7
 8005d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	08006538 	.word	0x08006538
 8005d80:	08006540 	.word	0x08006540

08005d84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d84:	b084      	sub	sp, #16
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b084      	sub	sp, #16
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
 8005d8e:	f107 001c 	add.w	r0, r7, #28
 8005d92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d120      	bne.n	8005dde <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	68da      	ldr	r2, [r3, #12]
 8005dac:	4b2a      	ldr	r3, [pc, #168]	@ (8005e58 <USB_CoreInit+0xd4>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005dc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d105      	bne.n	8005dd2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 faac 	bl	8006330 <USB_CoreReset>
 8005dd8:	4603      	mov	r3, r0
 8005dda:	73fb      	strb	r3, [r7, #15]
 8005ddc:	e01a      	b.n	8005e14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 faa0 	bl	8006330 <USB_CoreReset>
 8005df0:	4603      	mov	r3, r0
 8005df2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005df4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dfe:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	639a      	str	r2, [r3, #56]	@ 0x38
 8005e06:	e005      	b.n	8005e14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d116      	bne.n	8005e48 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005e1e:	b29a      	uxth	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005e28:	4b0c      	ldr	r3, [pc, #48]	@ (8005e5c <USB_CoreInit+0xd8>)
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	f043 0206 	orr.w	r2, r3, #6
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f043 0220 	orr.w	r2, r3, #32
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e54:	b004      	add	sp, #16
 8005e56:	4770      	bx	lr
 8005e58:	ffbdffbf 	.word	0xffbdffbf
 8005e5c:	03ee0000 	.word	0x03ee0000

08005e60 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b083      	sub	sp, #12
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	689b      	ldr	r3, [r3, #8]
 8005e6c:	f023 0201 	bic.w	r2, r3, #1
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e82:	b580      	push	{r7, lr}
 8005e84:	b084      	sub	sp, #16
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
 8005e8a:	460b      	mov	r3, r1
 8005e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e9e:	78fb      	ldrb	r3, [r7, #3]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d115      	bne.n	8005ed0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005eb0:	2001      	movs	r0, #1
 8005eb2:	f7fb fac5 	bl	8001440 <HAL_Delay>
      ms++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	3301      	adds	r3, #1
 8005eba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005ebc:	6878      	ldr	r0, [r7, #4]
 8005ebe:	f000 fa29 	bl	8006314 <USB_GetMode>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d01e      	beq.n	8005f06 <USB_SetCurrentMode+0x84>
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2b31      	cmp	r3, #49	@ 0x31
 8005ecc:	d9f0      	bls.n	8005eb0 <USB_SetCurrentMode+0x2e>
 8005ece:	e01a      	b.n	8005f06 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ed0:	78fb      	ldrb	r3, [r7, #3]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d115      	bne.n	8005f02 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	68db      	ldr	r3, [r3, #12]
 8005eda:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005ee2:	2001      	movs	r0, #1
 8005ee4:	f7fb faac 	bl	8001440 <HAL_Delay>
      ms++;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	3301      	adds	r3, #1
 8005eec:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa10 	bl	8006314 <USB_GetMode>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d005      	beq.n	8005f06 <USB_SetCurrentMode+0x84>
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2b31      	cmp	r3, #49	@ 0x31
 8005efe:	d9f0      	bls.n	8005ee2 <USB_SetCurrentMode+0x60>
 8005f00:	e001      	b.n	8005f06 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005f02:	2301      	movs	r3, #1
 8005f04:	e005      	b.n	8005f12 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2b32      	cmp	r3, #50	@ 0x32
 8005f0a:	d101      	bne.n	8005f10 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005f10:	2300      	movs	r3, #0
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f1c:	b084      	sub	sp, #16
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b086      	sub	sp, #24
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
 8005f26:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005f2a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f36:	2300      	movs	r3, #0
 8005f38:	613b      	str	r3, [r7, #16]
 8005f3a:	e009      	b.n	8005f50 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f3c:	687a      	ldr	r2, [r7, #4]
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	3340      	adds	r3, #64	@ 0x40
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	2200      	movs	r2, #0
 8005f48:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	613b      	str	r3, [r7, #16]
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	2b0e      	cmp	r3, #14
 8005f54:	d9f2      	bls.n	8005f3c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d11c      	bne.n	8005f96 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f6a:	f043 0302 	orr.w	r3, r3, #2
 8005f6e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f74:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	601a      	str	r2, [r3, #0]
 8005f94:	e005      	b.n	8005fa2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005fa8:	461a      	mov	r2, r3
 8005faa:	2300      	movs	r3, #0
 8005fac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fbc:	461a      	mov	r2, r3
 8005fbe:	680b      	ldr	r3, [r1, #0]
 8005fc0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc4:	2b01      	cmp	r3, #1
 8005fc6:	d10c      	bne.n	8005fe2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fce:	2100      	movs	r1, #0
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f965 	bl	80062a0 <USB_SetDevSpeed>
 8005fd6:	e008      	b.n	8005fea <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fd8:	2101      	movs	r1, #1
 8005fda:	6878      	ldr	r0, [r7, #4]
 8005fdc:	f000 f960 	bl	80062a0 <USB_SetDevSpeed>
 8005fe0:	e003      	b.n	8005fea <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fe2:	2103      	movs	r1, #3
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f000 f95b 	bl	80062a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fea:	2110      	movs	r1, #16
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f8f3 	bl	80061d8 <USB_FlushTxFifo>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005ffc:	6878      	ldr	r0, [r7, #4]
 8005ffe:	f000 f91f 	bl	8006240 <USB_FlushRxFifo>
 8006002:	4603      	mov	r3, r0
 8006004:	2b00      	cmp	r3, #0
 8006006:	d001      	beq.n	800600c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006012:	461a      	mov	r2, r3
 8006014:	2300      	movs	r3, #0
 8006016:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800601e:	461a      	mov	r2, r3
 8006020:	2300      	movs	r3, #0
 8006022:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800602a:	461a      	mov	r2, r3
 800602c:	2300      	movs	r3, #0
 800602e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006030:	2300      	movs	r3, #0
 8006032:	613b      	str	r3, [r7, #16]
 8006034:	e043      	b.n	80060be <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006036:	693b      	ldr	r3, [r7, #16]
 8006038:	015a      	lsls	r2, r3, #5
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	4413      	add	r3, r2
 800603e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006048:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800604c:	d118      	bne.n	8006080 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d10a      	bne.n	800606a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006066:	6013      	str	r3, [r2, #0]
 8006068:	e013      	b.n	8006092 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006076:	461a      	mov	r2, r3
 8006078:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	e008      	b.n	8006092 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800608c:	461a      	mov	r2, r3
 800608e:	2300      	movs	r3, #0
 8006090:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4413      	add	r3, r2
 800609a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800609e:	461a      	mov	r2, r3
 80060a0:	2300      	movs	r3, #0
 80060a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b0:	461a      	mov	r2, r3
 80060b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80060b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	3301      	adds	r3, #1
 80060bc:	613b      	str	r3, [r7, #16]
 80060be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c0:	693a      	ldr	r2, [r7, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d3b7      	bcc.n	8006036 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060c6:	2300      	movs	r3, #0
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e043      	b.n	8006154 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80060de:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80060e2:	d118      	bne.n	8006116 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060f6:	461a      	mov	r2, r3
 80060f8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80060fc:	6013      	str	r3, [r2, #0]
 80060fe:	e013      	b.n	8006128 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800610c:	461a      	mov	r2, r3
 800610e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e008      	b.n	8006128 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006122:	461a      	mov	r2, r3
 8006124:	2300      	movs	r3, #0
 8006126:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	4413      	add	r3, r2
 8006130:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006134:	461a      	mov	r2, r3
 8006136:	2300      	movs	r3, #0
 8006138:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	015a      	lsls	r2, r3, #5
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006146:	461a      	mov	r2, r3
 8006148:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800614c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3301      	adds	r3, #1
 8006152:	613b      	str	r3, [r7, #16]
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	693a      	ldr	r2, [r7, #16]
 8006158:	429a      	cmp	r2, r3
 800615a:	d3b7      	bcc.n	80060cc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	68fa      	ldr	r2, [r7, #12]
 8006166:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800616a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800616e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2200      	movs	r2, #0
 8006174:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800617c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	f043 0210 	orr.w	r2, r3, #16
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	4b0e      	ldr	r3, [pc, #56]	@ (80061d0 <USB_DevInit+0x2b4>)
 8006196:	4313      	orrs	r3, r2
 8006198:	687a      	ldr	r2, [r7, #4]
 800619a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800619c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f043 0208 	orr.w	r2, r3, #8
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80061ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d105      	bne.n	80061c0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	4b06      	ldr	r3, [pc, #24]	@ (80061d4 <USB_DevInit+0x2b8>)
 80061ba:	4313      	orrs	r3, r2
 80061bc:	687a      	ldr	r2, [r7, #4]
 80061be:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061cc:	b004      	add	sp, #16
 80061ce:	4770      	bx	lr
 80061d0:	803c3800 	.word	0x803c3800
 80061d4:	40000004 	.word	0x40000004

080061d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	3301      	adds	r3, #1
 80061ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4a13      	ldr	r2, [pc, #76]	@ (800623c <USB_FlushTxFifo+0x64>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d901      	bls.n	80061f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061f4:	2303      	movs	r3, #3
 80061f6:	e01b      	b.n	8006230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691b      	ldr	r3, [r3, #16]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	daf2      	bge.n	80061e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006204:	683b      	ldr	r3, [r7, #0]
 8006206:	019b      	lsls	r3, r3, #6
 8006208:	f043 0220 	orr.w	r2, r3, #32
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	3301      	adds	r3, #1
 8006214:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	4a08      	ldr	r2, [pc, #32]	@ (800623c <USB_FlushTxFifo+0x64>)
 800621a:	4293      	cmp	r3, r2
 800621c:	d901      	bls.n	8006222 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e006      	b.n	8006230 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	691b      	ldr	r3, [r3, #16]
 8006226:	f003 0320 	and.w	r3, r3, #32
 800622a:	2b20      	cmp	r3, #32
 800622c:	d0f0      	beq.n	8006210 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	00030d40 	.word	0x00030d40

08006240 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006240:	b480      	push	{r7}
 8006242:	b085      	sub	sp, #20
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	3301      	adds	r3, #1
 8006250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	4a11      	ldr	r2, [pc, #68]	@ (800629c <USB_FlushRxFifo+0x5c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d901      	bls.n	800625e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800625a:	2303      	movs	r3, #3
 800625c:	e018      	b.n	8006290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	2b00      	cmp	r3, #0
 8006264:	daf2      	bge.n	800624c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2210      	movs	r2, #16
 800626e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	3301      	adds	r3, #1
 8006274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	4a08      	ldr	r2, [pc, #32]	@ (800629c <USB_FlushRxFifo+0x5c>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d901      	bls.n	8006282 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e006      	b.n	8006290 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	2b10      	cmp	r3, #16
 800628c:	d0f0      	beq.n	8006270 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800628e:	2300      	movs	r3, #0
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr
 800629c:	00030d40 	.word	0x00030d40

080062a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b085      	sub	sp, #20
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
 80062a8:	460b      	mov	r3, r1
 80062aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	68f9      	ldr	r1, [r7, #12]
 80062bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062c0:	4313      	orrs	r3, r2
 80062c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr

080062d2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b085      	sub	sp, #20
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80062ec:	f023 0303 	bic.w	r3, r3, #3
 80062f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006300:	f043 0302 	orr.w	r3, r3, #2
 8006304:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3714      	adds	r7, #20
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr

08006314 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	695b      	ldr	r3, [r3, #20]
 8006320:	f003 0301 	and.w	r3, r3, #1
}
 8006324:	4618      	mov	r0, r3
 8006326:	370c      	adds	r7, #12
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006338:	2300      	movs	r3, #0
 800633a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	3301      	adds	r3, #1
 8006340:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4a13      	ldr	r2, [pc, #76]	@ (8006394 <USB_CoreReset+0x64>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d901      	bls.n	800634e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800634a:	2303      	movs	r3, #3
 800634c:	e01b      	b.n	8006386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	691b      	ldr	r3, [r3, #16]
 8006352:	2b00      	cmp	r3, #0
 8006354:	daf2      	bge.n	800633c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006356:	2300      	movs	r3, #0
 8006358:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691b      	ldr	r3, [r3, #16]
 800635e:	f043 0201 	orr.w	r2, r3, #1
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	3301      	adds	r3, #1
 800636a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4a09      	ldr	r2, [pc, #36]	@ (8006394 <USB_CoreReset+0x64>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d901      	bls.n	8006378 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006374:	2303      	movs	r3, #3
 8006376:	e006      	b.n	8006386 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d0f0      	beq.n	8006366 <USB_CoreReset+0x36>

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	00030d40 	.word	0x00030d40

08006398 <_ZdlPvj>:
 8006398:	f000 b800 	b.w	800639c <_ZdlPv>

0800639c <_ZdlPv>:
 800639c:	f000 b800 	b.w	80063a0 <free>

080063a0 <free>:
 80063a0:	4b02      	ldr	r3, [pc, #8]	@ (80063ac <free+0xc>)
 80063a2:	4601      	mov	r1, r0
 80063a4:	6818      	ldr	r0, [r3, #0]
 80063a6:	f000 b83d 	b.w	8006424 <_free_r>
 80063aa:	bf00      	nop
 80063ac:	24000010 	.word	0x24000010

080063b0 <__malloc_lock>:
 80063b0:	4801      	ldr	r0, [pc, #4]	@ (80063b8 <__malloc_lock+0x8>)
 80063b2:	f000 b835 	b.w	8006420 <__retarget_lock_acquire_recursive>
 80063b6:	bf00      	nop
 80063b8:	24000908 	.word	0x24000908

080063bc <__malloc_unlock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	@ (80063c4 <__malloc_unlock+0x8>)
 80063be:	f000 b830 	b.w	8006422 <__retarget_lock_release_recursive>
 80063c2:	bf00      	nop
 80063c4:	24000908 	.word	0x24000908

080063c8 <memset>:
 80063c8:	4402      	add	r2, r0
 80063ca:	4603      	mov	r3, r0
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d100      	bne.n	80063d2 <memset+0xa>
 80063d0:	4770      	bx	lr
 80063d2:	f803 1b01 	strb.w	r1, [r3], #1
 80063d6:	e7f9      	b.n	80063cc <memset+0x4>

080063d8 <__libc_init_array>:
 80063d8:	b570      	push	{r4, r5, r6, lr}
 80063da:	4d0d      	ldr	r5, [pc, #52]	@ (8006410 <__libc_init_array+0x38>)
 80063dc:	4c0d      	ldr	r4, [pc, #52]	@ (8006414 <__libc_init_array+0x3c>)
 80063de:	1b64      	subs	r4, r4, r5
 80063e0:	10a4      	asrs	r4, r4, #2
 80063e2:	2600      	movs	r6, #0
 80063e4:	42a6      	cmp	r6, r4
 80063e6:	d109      	bne.n	80063fc <__libc_init_array+0x24>
 80063e8:	4d0b      	ldr	r5, [pc, #44]	@ (8006418 <__libc_init_array+0x40>)
 80063ea:	4c0c      	ldr	r4, [pc, #48]	@ (800641c <__libc_init_array+0x44>)
 80063ec:	f000 f864 	bl	80064b8 <_init>
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	2600      	movs	r6, #0
 80063f6:	42a6      	cmp	r6, r4
 80063f8:	d105      	bne.n	8006406 <__libc_init_array+0x2e>
 80063fa:	bd70      	pop	{r4, r5, r6, pc}
 80063fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006400:	4798      	blx	r3
 8006402:	3601      	adds	r6, #1
 8006404:	e7ee      	b.n	80063e4 <__libc_init_array+0xc>
 8006406:	f855 3b04 	ldr.w	r3, [r5], #4
 800640a:	4798      	blx	r3
 800640c:	3601      	adds	r6, #1
 800640e:	e7f2      	b.n	80063f6 <__libc_init_array+0x1e>
 8006410:	08006550 	.word	0x08006550
 8006414:	08006550 	.word	0x08006550
 8006418:	08006550 	.word	0x08006550
 800641c:	08006554 	.word	0x08006554

08006420 <__retarget_lock_acquire_recursive>:
 8006420:	4770      	bx	lr

08006422 <__retarget_lock_release_recursive>:
 8006422:	4770      	bx	lr

08006424 <_free_r>:
 8006424:	b538      	push	{r3, r4, r5, lr}
 8006426:	4605      	mov	r5, r0
 8006428:	2900      	cmp	r1, #0
 800642a:	d041      	beq.n	80064b0 <_free_r+0x8c>
 800642c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006430:	1f0c      	subs	r4, r1, #4
 8006432:	2b00      	cmp	r3, #0
 8006434:	bfb8      	it	lt
 8006436:	18e4      	addlt	r4, r4, r3
 8006438:	f7ff ffba 	bl	80063b0 <__malloc_lock>
 800643c:	4a1d      	ldr	r2, [pc, #116]	@ (80064b4 <_free_r+0x90>)
 800643e:	6813      	ldr	r3, [r2, #0]
 8006440:	b933      	cbnz	r3, 8006450 <_free_r+0x2c>
 8006442:	6063      	str	r3, [r4, #4]
 8006444:	6014      	str	r4, [r2, #0]
 8006446:	4628      	mov	r0, r5
 8006448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800644c:	f7ff bfb6 	b.w	80063bc <__malloc_unlock>
 8006450:	42a3      	cmp	r3, r4
 8006452:	d908      	bls.n	8006466 <_free_r+0x42>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	1821      	adds	r1, r4, r0
 8006458:	428b      	cmp	r3, r1
 800645a:	bf01      	itttt	eq
 800645c:	6819      	ldreq	r1, [r3, #0]
 800645e:	685b      	ldreq	r3, [r3, #4]
 8006460:	1809      	addeq	r1, r1, r0
 8006462:	6021      	streq	r1, [r4, #0]
 8006464:	e7ed      	b.n	8006442 <_free_r+0x1e>
 8006466:	461a      	mov	r2, r3
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	b10b      	cbz	r3, 8006470 <_free_r+0x4c>
 800646c:	42a3      	cmp	r3, r4
 800646e:	d9fa      	bls.n	8006466 <_free_r+0x42>
 8006470:	6811      	ldr	r1, [r2, #0]
 8006472:	1850      	adds	r0, r2, r1
 8006474:	42a0      	cmp	r0, r4
 8006476:	d10b      	bne.n	8006490 <_free_r+0x6c>
 8006478:	6820      	ldr	r0, [r4, #0]
 800647a:	4401      	add	r1, r0
 800647c:	1850      	adds	r0, r2, r1
 800647e:	4283      	cmp	r3, r0
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	d1e0      	bne.n	8006446 <_free_r+0x22>
 8006484:	6818      	ldr	r0, [r3, #0]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	6053      	str	r3, [r2, #4]
 800648a:	4408      	add	r0, r1
 800648c:	6010      	str	r0, [r2, #0]
 800648e:	e7da      	b.n	8006446 <_free_r+0x22>
 8006490:	d902      	bls.n	8006498 <_free_r+0x74>
 8006492:	230c      	movs	r3, #12
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	e7d6      	b.n	8006446 <_free_r+0x22>
 8006498:	6820      	ldr	r0, [r4, #0]
 800649a:	1821      	adds	r1, r4, r0
 800649c:	428b      	cmp	r3, r1
 800649e:	bf04      	itt	eq
 80064a0:	6819      	ldreq	r1, [r3, #0]
 80064a2:	685b      	ldreq	r3, [r3, #4]
 80064a4:	6063      	str	r3, [r4, #4]
 80064a6:	bf04      	itt	eq
 80064a8:	1809      	addeq	r1, r1, r0
 80064aa:	6021      	streq	r1, [r4, #0]
 80064ac:	6054      	str	r4, [r2, #4]
 80064ae:	e7ca      	b.n	8006446 <_free_r+0x22>
 80064b0:	bd38      	pop	{r3, r4, r5, pc}
 80064b2:	bf00      	nop
 80064b4:	240007cc 	.word	0x240007cc

080064b8 <_init>:
 80064b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ba:	bf00      	nop
 80064bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064be:	bc08      	pop	{r3}
 80064c0:	469e      	mov	lr, r3
 80064c2:	4770      	bx	lr

080064c4 <_fini>:
 80064c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064c6:	bf00      	nop
 80064c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ca:	bc08      	pop	{r3}
 80064cc:	469e      	mov	lr, r3
 80064ce:	4770      	bx	lr
