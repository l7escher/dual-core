
CPP_EnumState_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006144  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006414  08006414  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08006414  08006414  00016414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800641c  0800641c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800641c  0800641c  0001641c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006420  08006420  00016420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  08006424  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  08006434  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006494  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006c4  240000d0  080064f4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000794  080064f4  00020794  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b231  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d89  00000000  00000000  0003b32f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001088  00000000  00000000  0003e0b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000f80  00000000  00000000  0003f140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003e144  00000000  00000000  000400c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016395  00000000  00000000  0007e204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186f4a  00000000  00000000  00094599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021b4e3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004568  00000000  00000000  0021b534  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080063c4 	.word	0x080063c4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	080063c4 	.word	0x080063c4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <_Z17execStatemachine1v>:
uint32_t tickstartLED1 = 0;
uint32_t tickstartLED2 = 0;


//state machine 1
void execStatemachine1(){
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	uint8_t count;

	switch(statemachine1){
 800070e:	4b3e      	ldr	r3, [pc, #248]	; (8000808 <_Z17execStatemachine1v+0x100>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2b02      	cmp	r3, #2
 8000714:	d043      	beq.n	800079e <_Z17execStatemachine1v+0x96>
 8000716:	2b02      	cmp	r3, #2
 8000718:	dc6d      	bgt.n	80007f6 <_Z17execStatemachine1v+0xee>
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <_Z17execStatemachine1v+0x1c>
 800071e:	2b01      	cmp	r3, #1
 8000720:	d011      	beq.n	8000746 <_Z17execStatemachine1v+0x3e>
			statemachine1 = states_led1::BLINK_1HZ;
		}
		break;

	default:
		break;
 8000722:	e068      	b.n	80007f6 <_Z17execStatemachine1v+0xee>
		count = 0;
 8000724:	2300      	movs	r3, #0
 8000726:	71fb      	strb	r3, [r7, #7]
		DelayLED1 = 1000;
 8000728:	4b38      	ldr	r3, [pc, #224]	; (800080c <_Z17execStatemachine1v+0x104>)
 800072a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800072e:	601a      	str	r2, [r3, #0]
		tickstartLED1 = 0;
 8000730:	4b37      	ldr	r3, [pc, #220]	; (8000810 <_Z17execStatemachine1v+0x108>)
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
		Delay_Init(&tickstartLED1, &DelayLED1);
 8000736:	4935      	ldr	r1, [pc, #212]	; (800080c <_Z17execStatemachine1v+0x104>)
 8000738:	4835      	ldr	r0, [pc, #212]	; (8000810 <_Z17execStatemachine1v+0x108>)
 800073a:	f000 f8fd 	bl	8000938 <Delay_Init>
		statemachine1 = states_led1::BLINK_1HZ;
 800073e:	4b32      	ldr	r3, [pc, #200]	; (8000808 <_Z17execStatemachine1v+0x100>)
 8000740:	2201      	movs	r2, #1
 8000742:	601a      	str	r2, [r3, #0]
		break;
 8000744:	e05c      	b.n	8000800 <_Z17execStatemachine1v+0xf8>
		if(My_Nonblocking_Delay(tickstartLED1, DelayLED1)){
 8000746:	4b32      	ldr	r3, [pc, #200]	; (8000810 <_Z17execStatemachine1v+0x108>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a30      	ldr	r2, [pc, #192]	; (800080c <_Z17execStatemachine1v+0x104>)
 800074c:	6812      	ldr	r2, [r2, #0]
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 f90d 	bl	8000970 <My_Nonblocking_Delay>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	bf14      	ite	ne
 800075c:	2301      	movne	r3, #1
 800075e:	2300      	moveq	r3, #0
 8000760:	b2db      	uxtb	r3, r3
 8000762:	2b00      	cmp	r3, #0
 8000764:	d00a      	beq.n	800077c <_Z17execStatemachine1v+0x74>
			Delay_Init(&tickstartLED1, &DelayLED1);
 8000766:	4929      	ldr	r1, [pc, #164]	; (800080c <_Z17execStatemachine1v+0x104>)
 8000768:	4829      	ldr	r0, [pc, #164]	; (8000810 <_Z17execStatemachine1v+0x108>)
 800076a:	f000 f8e5 	bl	8000938 <Delay_Init>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 800076e:	2101      	movs	r1, #1
 8000770:	4828      	ldr	r0, [pc, #160]	; (8000814 <_Z17execStatemachine1v+0x10c>)
 8000772:	f001 fd64 	bl	800223e <HAL_GPIO_TogglePin>
			count++;
 8000776:	79fb      	ldrb	r3, [r7, #7]
 8000778:	3301      	adds	r3, #1
 800077a:	71fb      	strb	r3, [r7, #7]
		if(count>10){
 800077c:	79fb      	ldrb	r3, [r7, #7]
 800077e:	2b0a      	cmp	r3, #10
 8000780:	d93b      	bls.n	80007fa <_Z17execStatemachine1v+0xf2>
			count = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	71fb      	strb	r3, [r7, #7]
			DelayLED1=333;
 8000786:	4b21      	ldr	r3, [pc, #132]	; (800080c <_Z17execStatemachine1v+0x104>)
 8000788:	f240 124d 	movw	r2, #333	; 0x14d
 800078c:	601a      	str	r2, [r3, #0]
			Delay_Init(&tickstartLED1, &DelayLED1);
 800078e:	491f      	ldr	r1, [pc, #124]	; (800080c <_Z17execStatemachine1v+0x104>)
 8000790:	481f      	ldr	r0, [pc, #124]	; (8000810 <_Z17execStatemachine1v+0x108>)
 8000792:	f000 f8d1 	bl	8000938 <Delay_Init>
			statemachine1 = states_led1::BLINK_3HZ;
 8000796:	4b1c      	ldr	r3, [pc, #112]	; (8000808 <_Z17execStatemachine1v+0x100>)
 8000798:	2202      	movs	r2, #2
 800079a:	601a      	str	r2, [r3, #0]
		break;
 800079c:	e02d      	b.n	80007fa <_Z17execStatemachine1v+0xf2>
		if(My_Nonblocking_Delay(tickstartLED1, DelayLED1)){
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <_Z17execStatemachine1v+0x108>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1a      	ldr	r2, [pc, #104]	; (800080c <_Z17execStatemachine1v+0x104>)
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	4611      	mov	r1, r2
 80007a8:	4618      	mov	r0, r3
 80007aa:	f000 f8e1 	bl	8000970 <My_Nonblocking_Delay>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	bf14      	ite	ne
 80007b4:	2301      	movne	r3, #1
 80007b6:	2300      	moveq	r3, #0
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d00a      	beq.n	80007d4 <_Z17execStatemachine1v+0xcc>
			Delay_Init(&tickstartLED1, &DelayLED1);
 80007be:	4913      	ldr	r1, [pc, #76]	; (800080c <_Z17execStatemachine1v+0x104>)
 80007c0:	4813      	ldr	r0, [pc, #76]	; (8000810 <_Z17execStatemachine1v+0x108>)
 80007c2:	f000 f8b9 	bl	8000938 <Delay_Init>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80007c6:	2101      	movs	r1, #1
 80007c8:	4812      	ldr	r0, [pc, #72]	; (8000814 <_Z17execStatemachine1v+0x10c>)
 80007ca:	f001 fd38 	bl	800223e <HAL_GPIO_TogglePin>
			count++;
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	3301      	adds	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
		if(count>10){
 80007d4:	79fb      	ldrb	r3, [r7, #7]
 80007d6:	2b0a      	cmp	r3, #10
 80007d8:	d911      	bls.n	80007fe <_Z17execStatemachine1v+0xf6>
			count = 0;
 80007da:	2300      	movs	r3, #0
 80007dc:	71fb      	strb	r3, [r7, #7]
			DelayLED1 = 1000;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <_Z17execStatemachine1v+0x104>)
 80007e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007e4:	601a      	str	r2, [r3, #0]
			Delay_Init(&tickstartLED1, &DelayLED1);
 80007e6:	4909      	ldr	r1, [pc, #36]	; (800080c <_Z17execStatemachine1v+0x104>)
 80007e8:	4809      	ldr	r0, [pc, #36]	; (8000810 <_Z17execStatemachine1v+0x108>)
 80007ea:	f000 f8a5 	bl	8000938 <Delay_Init>
			statemachine1 = states_led1::BLINK_1HZ;
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <_Z17execStatemachine1v+0x100>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	601a      	str	r2, [r3, #0]
		break;
 80007f4:	e003      	b.n	80007fe <_Z17execStatemachine1v+0xf6>
		break;
 80007f6:	bf00      	nop
 80007f8:	e002      	b.n	8000800 <_Z17execStatemachine1v+0xf8>
		break;
 80007fa:	bf00      	nop
 80007fc:	e000      	b.n	8000800 <_Z17execStatemachine1v+0xf8>
		break;
 80007fe:	bf00      	nop
	}
}
 8000800:	bf00      	nop
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	240000ec 	.word	0x240000ec
 800080c:	240000f4 	.word	0x240000f4
 8000810:	240000fc 	.word	0x240000fc
 8000814:	58020400 	.word	0x58020400

08000818 <_Z17execStatemachine2v>:

//state machine 2
void execStatemachine2(){
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
	uint8_t count;

	switch(statemachine2){
 800081e:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <_Z17execStatemachine2v+0x100>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	2b02      	cmp	r3, #2
 8000824:	d043      	beq.n	80008ae <_Z17execStatemachine2v+0x96>
 8000826:	2b02      	cmp	r3, #2
 8000828:	dc6d      	bgt.n	8000906 <_Z17execStatemachine2v+0xee>
 800082a:	2b00      	cmp	r3, #0
 800082c:	d002      	beq.n	8000834 <_Z17execStatemachine2v+0x1c>
 800082e:	2b01      	cmp	r3, #1
 8000830:	d011      	beq.n	8000856 <_Z17execStatemachine2v+0x3e>
			statemachine2 = states_led2::BLINK_1HZ;
		}
		break;

	default:
		break;
 8000832:	e068      	b.n	8000906 <_Z17execStatemachine2v+0xee>
		count = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	71fb      	strb	r3, [r7, #7]
		DelayLED2 = 1000;
 8000838:	4b38      	ldr	r3, [pc, #224]	; (800091c <_Z17execStatemachine2v+0x104>)
 800083a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800083e:	601a      	str	r2, [r3, #0]
		tickstartLED2 = 0;
 8000840:	4b37      	ldr	r3, [pc, #220]	; (8000920 <_Z17execStatemachine2v+0x108>)
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
		Delay_Init(&tickstartLED2, &DelayLED2);
 8000846:	4935      	ldr	r1, [pc, #212]	; (800091c <_Z17execStatemachine2v+0x104>)
 8000848:	4835      	ldr	r0, [pc, #212]	; (8000920 <_Z17execStatemachine2v+0x108>)
 800084a:	f000 f875 	bl	8000938 <Delay_Init>
		statemachine2 = states_led2::BLINK_1HZ;
 800084e:	4b32      	ldr	r3, [pc, #200]	; (8000918 <_Z17execStatemachine2v+0x100>)
 8000850:	2201      	movs	r2, #1
 8000852:	601a      	str	r2, [r3, #0]
		break;
 8000854:	e05c      	b.n	8000910 <_Z17execStatemachine2v+0xf8>
		if(My_Nonblocking_Delay(tickstartLED2, DelayLED2)){
 8000856:	4b32      	ldr	r3, [pc, #200]	; (8000920 <_Z17execStatemachine2v+0x108>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4a30      	ldr	r2, [pc, #192]	; (800091c <_Z17execStatemachine2v+0x104>)
 800085c:	6812      	ldr	r2, [r2, #0]
 800085e:	4611      	mov	r1, r2
 8000860:	4618      	mov	r0, r3
 8000862:	f000 f885 	bl	8000970 <My_Nonblocking_Delay>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	bf14      	ite	ne
 800086c:	2301      	movne	r3, #1
 800086e:	2300      	moveq	r3, #0
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d00a      	beq.n	800088c <_Z17execStatemachine2v+0x74>
			Delay_Init(&tickstartLED2, &DelayLED2);
 8000876:	4929      	ldr	r1, [pc, #164]	; (800091c <_Z17execStatemachine2v+0x104>)
 8000878:	4829      	ldr	r0, [pc, #164]	; (8000920 <_Z17execStatemachine2v+0x108>)
 800087a:	f000 f85d 	bl	8000938 <Delay_Init>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800087e:	2102      	movs	r1, #2
 8000880:	4828      	ldr	r0, [pc, #160]	; (8000924 <_Z17execStatemachine2v+0x10c>)
 8000882:	f001 fcdc 	bl	800223e <HAL_GPIO_TogglePin>
			count++;
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	3301      	adds	r3, #1
 800088a:	71fb      	strb	r3, [r7, #7]
		if(count>10){
 800088c:	79fb      	ldrb	r3, [r7, #7]
 800088e:	2b0a      	cmp	r3, #10
 8000890:	d93b      	bls.n	800090a <_Z17execStatemachine2v+0xf2>
			count = 0;
 8000892:	2300      	movs	r3, #0
 8000894:	71fb      	strb	r3, [r7, #7]
			DelayLED2=500;
 8000896:	4b21      	ldr	r3, [pc, #132]	; (800091c <_Z17execStatemachine2v+0x104>)
 8000898:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800089c:	601a      	str	r2, [r3, #0]
			Delay_Init(&tickstartLED2, &DelayLED2);
 800089e:	491f      	ldr	r1, [pc, #124]	; (800091c <_Z17execStatemachine2v+0x104>)
 80008a0:	481f      	ldr	r0, [pc, #124]	; (8000920 <_Z17execStatemachine2v+0x108>)
 80008a2:	f000 f849 	bl	8000938 <Delay_Init>
			statemachine2 = states_led2::BLINK_2HZ;
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <_Z17execStatemachine2v+0x100>)
 80008a8:	2202      	movs	r2, #2
 80008aa:	601a      	str	r2, [r3, #0]
		break;
 80008ac:	e02d      	b.n	800090a <_Z17execStatemachine2v+0xf2>
		if(My_Nonblocking_Delay(tickstartLED2, DelayLED2)){
 80008ae:	4b1c      	ldr	r3, [pc, #112]	; (8000920 <_Z17execStatemachine2v+0x108>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a1a      	ldr	r2, [pc, #104]	; (800091c <_Z17execStatemachine2v+0x104>)
 80008b4:	6812      	ldr	r2, [r2, #0]
 80008b6:	4611      	mov	r1, r2
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f859 	bl	8000970 <My_Nonblocking_Delay>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	bf14      	ite	ne
 80008c4:	2301      	movne	r3, #1
 80008c6:	2300      	moveq	r3, #0
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00a      	beq.n	80008e4 <_Z17execStatemachine2v+0xcc>
			Delay_Init(&tickstartLED2, &DelayLED2);
 80008ce:	4913      	ldr	r1, [pc, #76]	; (800091c <_Z17execStatemachine2v+0x104>)
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <_Z17execStatemachine2v+0x108>)
 80008d2:	f000 f831 	bl	8000938 <Delay_Init>
			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80008d6:	2102      	movs	r1, #2
 80008d8:	4812      	ldr	r0, [pc, #72]	; (8000924 <_Z17execStatemachine2v+0x10c>)
 80008da:	f001 fcb0 	bl	800223e <HAL_GPIO_TogglePin>
			count++;
 80008de:	79fb      	ldrb	r3, [r7, #7]
 80008e0:	3301      	adds	r3, #1
 80008e2:	71fb      	strb	r3, [r7, #7]
		if(count>10){
 80008e4:	79fb      	ldrb	r3, [r7, #7]
 80008e6:	2b0a      	cmp	r3, #10
 80008e8:	d911      	bls.n	800090e <_Z17execStatemachine2v+0xf6>
			count = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	71fb      	strb	r3, [r7, #7]
			DelayLED2 = 1000;
 80008ee:	4b0b      	ldr	r3, [pc, #44]	; (800091c <_Z17execStatemachine2v+0x104>)
 80008f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80008f4:	601a      	str	r2, [r3, #0]
			Delay_Init(&tickstartLED2, &DelayLED2);
 80008f6:	4909      	ldr	r1, [pc, #36]	; (800091c <_Z17execStatemachine2v+0x104>)
 80008f8:	4809      	ldr	r0, [pc, #36]	; (8000920 <_Z17execStatemachine2v+0x108>)
 80008fa:	f000 f81d 	bl	8000938 <Delay_Init>
			statemachine2 = states_led2::BLINK_1HZ;
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <_Z17execStatemachine2v+0x100>)
 8000900:	2201      	movs	r2, #1
 8000902:	601a      	str	r2, [r3, #0]
		break;
 8000904:	e003      	b.n	800090e <_Z17execStatemachine2v+0xf6>
		break;
 8000906:	bf00      	nop
 8000908:	e002      	b.n	8000910 <_Z17execStatemachine2v+0xf8>
		break;
 800090a:	bf00      	nop
 800090c:	e000      	b.n	8000910 <_Z17execStatemachine2v+0xf8>
		break;
 800090e:	bf00      	nop
	}
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	240000f0 	.word	0x240000f0
 800091c:	240000f8 	.word	0x240000f8
 8000920:	24000100 	.word	0x24000100
 8000924:	58021000 	.word	0x58021000

08000928 <cpp_main>:




void cpp_main(){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	while(1){
		execStatemachine1();
 800092c:	f7ff feec 	bl	8000708 <_Z17execStatemachine1v>
		execStatemachine2();
 8000930:	f7ff ff72 	bl	8000818 <_Z17execStatemachine2v>
		execStatemachine1();
 8000934:	e7fa      	b.n	800092c <cpp_main+0x4>
	...

08000938 <Delay_Init>:
 *      Implements a non blocking delay function
 */

#include "delay.h"

void Delay_Init(uint32_t *tickstart, uint32_t *Delay) {
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
 8000940:	6039      	str	r1, [r7, #0]
	*tickstart = HAL_GetTick();
 8000942:	f000 fd5b 	bl	80013fc <HAL_GetTick>
 8000946:	4602      	mov	r2, r0
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]

	if (*Delay < HAL_MAX_DELAY) {
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000954:	d006      	beq.n	8000964 <Delay_Init+0x2c>
		*Delay += (uint32_t) (uwTickFreq);
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4a04      	ldr	r2, [pc, #16]	; (800096c <Delay_Init+0x34>)
 800095c:	7812      	ldrb	r2, [r2, #0]
 800095e:	441a      	add	r2, r3
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	601a      	str	r2, [r3, #0]
	}
}
 8000964:	bf00      	nop
 8000966:	3708      	adds	r7, #8
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2400000c 	.word	0x2400000c

08000970 <My_Nonblocking_Delay>:

/*
 *return value = 0: delay ist not finished
 *return value = 255: delay finished
 */
uint8_t My_Nonblocking_Delay(uint32_t tickstart, uint32_t wait) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	6039      	str	r1, [r7, #0]
	if ((HAL_GetTick() - tickstart) < wait) {
 800097a:	f000 fd3f 	bl	80013fc <HAL_GetTick>
 800097e:	4602      	mov	r2, r0
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	1ad3      	subs	r3, r2, r3
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	429a      	cmp	r2, r3
 8000988:	d901      	bls.n	800098e <My_Nonblocking_Delay+0x1e>
		return 0;
 800098a:	2300      	movs	r3, #0
 800098c:	e000      	b.n	8000990 <My_Nonblocking_Delay+0x20>
	} else {
		return 255;
 800098e:	23ff      	movs	r3, #255	; 0xff
	}
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800099e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009a2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80009a4:	bf00      	nop
 80009a6:	4b24      	ldr	r3, [pc, #144]	; (8000a38 <main+0xa0>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d004      	beq.n	80009bc <main+0x24>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	1e5a      	subs	r2, r3, #1
 80009b6:	607a      	str	r2, [r7, #4]
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	dcf4      	bgt.n	80009a6 <main+0xe>
  if ( timeout < 0 )
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	da01      	bge.n	80009c6 <main+0x2e>
  {
  Error_Handler();
 80009c2:	f000 fa65 	bl	8000e90 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 fc93 	bl	80012f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f837 	bl	8000a3c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80009ce:	4b1a      	ldr	r3, [pc, #104]	; (8000a38 <main+0xa0>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	4a18      	ldr	r2, [pc, #96]	; (8000a38 <main+0xa0>)
 80009d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009de:	4b16      	ldr	r3, [pc, #88]	; (8000a38 <main+0xa0>)
 80009e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009e8:	603b      	str	r3, [r7, #0]
 80009ea:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80009ec:	2000      	movs	r0, #0
 80009ee:	f001 fc41 	bl	8002274 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80009f2:	2100      	movs	r1, #0
 80009f4:	2000      	movs	r0, #0
 80009f6:	f001 fc57 	bl	80022a8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80009fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80009fe:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000a00:	bf00      	nop
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <main+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d104      	bne.n	8000a18 <main+0x80>
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	1e5a      	subs	r2, r3, #1
 8000a12:	607a      	str	r2, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	dcf4      	bgt.n	8000a02 <main+0x6a>
if ( timeout < 0 )
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	da01      	bge.n	8000a22 <main+0x8a>
{
Error_Handler();
 8000a1e:	f000 fa37 	bl	8000e90 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a22:	f000 f959 	bl	8000cd8 <MX_GPIO_Init>
  MX_ETH_Init();
 8000a26:	f000 f88d 	bl	8000b44 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000a2a:	f000 f8d7 	bl	8000bdc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000a2e:	f000 f921 	bl	8000c74 <MX_USB_OTG_FS_PCD_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  cpp_main();
 8000a32:	f7ff ff79 	bl	8000928 <cpp_main>
 8000a36:	e7fc      	b.n	8000a32 <main+0x9a>
 8000a38:	58024400 	.word	0x58024400

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b09c      	sub	sp, #112	; 0x70
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a46:	224c      	movs	r2, #76	; 0x4c
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f005 fcb2 	bl	80063b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	2220      	movs	r2, #32
 8000a54:	2100      	movs	r1, #0
 8000a56:	4618      	mov	r0, r3
 8000a58:	f005 fcac 	bl	80063b4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a5c:	2004      	movs	r0, #4
 8000a5e:	f001 fd7f 	bl	8002560 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000a62:	2300      	movs	r3, #0
 8000a64:	603b      	str	r3, [r7, #0]
 8000a66:	4b34      	ldr	r3, [pc, #208]	; (8000b38 <SystemClock_Config+0xfc>)
 8000a68:	699b      	ldr	r3, [r3, #24]
 8000a6a:	4a33      	ldr	r2, [pc, #204]	; (8000b38 <SystemClock_Config+0xfc>)
 8000a6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a70:	6193      	str	r3, [r2, #24]
 8000a72:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <SystemClock_Config+0xfc>)
 8000a74:	699b      	ldr	r3, [r3, #24]
 8000a76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a7a:	603b      	str	r3, [r7, #0]
 8000a7c:	4b2f      	ldr	r3, [pc, #188]	; (8000b3c <SystemClock_Config+0x100>)
 8000a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a80:	4a2e      	ldr	r2, [pc, #184]	; (8000b3c <SystemClock_Config+0x100>)
 8000a82:	f043 0301 	orr.w	r3, r3, #1
 8000a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a88:	4b2c      	ldr	r3, [pc, #176]	; (8000b3c <SystemClock_Config+0x100>)
 8000a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a94:	bf00      	nop
 8000a96:	4b28      	ldr	r3, [pc, #160]	; (8000b38 <SystemClock_Config+0xfc>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000aa2:	d1f8      	bne.n	8000a96 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000aa4:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <SystemClock_Config+0x104>)
 8000aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa8:	f023 0303 	bic.w	r3, r3, #3
 8000aac:	4a24      	ldr	r2, [pc, #144]	; (8000b40 <SystemClock_Config+0x104>)
 8000aae:	f043 0302 	orr.w	r3, r3, #2
 8000ab2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ab8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000abc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000abe:	2302      	movs	r3, #2
 8000ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000aca:	2378      	movs	r3, #120	; 0x78
 8000acc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000ace:	2302      	movs	r3, #2
 8000ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad2:	2302      	movs	r3, #2
 8000ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ada:	230c      	movs	r3, #12
 8000adc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4618      	mov	r0, r3
 8000aec:	f001 fda2 	bl	8002634 <HAL_RCC_OscConfig>
 8000af0:	4603      	mov	r3, r0
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000af6:	f000 f9cb 	bl	8000e90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	233f      	movs	r3, #63	; 0x3f
 8000afc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b06:	2308      	movs	r3, #8
 8000b08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b0a:	2340      	movs	r3, #64	; 0x40
 8000b0c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b0e:	2340      	movs	r3, #64	; 0x40
 8000b10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b16:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b18:	2340      	movs	r3, #64	; 0x40
 8000b1a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2104      	movs	r1, #4
 8000b20:	4618      	mov	r0, r3
 8000b22:	f002 f9b5 	bl	8002e90 <HAL_RCC_ClockConfig>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000b2c:	f000 f9b0 	bl	8000e90 <Error_Handler>
  }
}
 8000b30:	bf00      	nop
 8000b32:	3770      	adds	r7, #112	; 0x70
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	58024800 	.word	0x58024800
 8000b3c:	58000400 	.word	0x58000400
 8000b40:	58024400 	.word	0x58024400

08000b44 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000b48:	4b1e      	ldr	r3, [pc, #120]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <MX_ETH_Init+0x84>)
 8000b4c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000b4e:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b56:	2280      	movs	r2, #128	; 0x80
 8000b58:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000b5a:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b5c:	22e1      	movs	r2, #225	; 0xe1
 8000b5e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000b60:	4b1a      	ldr	r3, [pc, #104]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000b66:	4b19      	ldr	r3, [pc, #100]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000b6c:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000b72:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b74:	4a15      	ldr	r2, [pc, #84]	; (8000bcc <MX_ETH_Init+0x88>)
 8000b76:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000b78:	4b12      	ldr	r3, [pc, #72]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <MX_ETH_Init+0x8c>)
 8000b82:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b86:	4a13      	ldr	r2, [pc, #76]	; (8000bd4 <MX_ETH_Init+0x90>)
 8000b88:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000b90:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000b92:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_ETH_Init+0x80>)
 8000b94:	f000 fd66 	bl	8001664 <HAL_ETH_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8000b9e:	f000 f977 	bl	8000e90 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ba2:	2238      	movs	r2, #56	; 0x38
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	480c      	ldr	r0, [pc, #48]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000ba8:	f005 fc04 	bl	80063b4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000bac:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000bae:	2221      	movs	r2, #33	; 0x21
 8000bb0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000bb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bb8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000bba:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <MX_ETH_Init+0x94>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000bc0:	bf00      	nop
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	2400013c 	.word	0x2400013c
 8000bc8:	40028000 	.word	0x40028000
 8000bcc:	24000788 	.word	0x24000788
 8000bd0:	24000070 	.word	0x24000070
 8000bd4:	24000010 	.word	0x24000010
 8000bd8:	24000104 	.word	0x24000104

08000bdc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000be0:	4b22      	ldr	r3, [pc, #136]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000be2:	4a23      	ldr	r2, [pc, #140]	; (8000c70 <MX_USART3_UART_Init+0x94>)
 8000be4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000be6:	4b21      	ldr	r3, [pc, #132]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000be8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bf4:	4b1d      	ldr	r3, [pc, #116]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c00:	4b1a      	ldr	r3, [pc, #104]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c02:	220c      	movs	r2, #12
 8000c04:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c06:	4b19      	ldr	r3, [pc, #100]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c0c:	4b17      	ldr	r3, [pc, #92]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c12:	4b16      	ldr	r3, [pc, #88]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c18:	4b14      	ldr	r3, [pc, #80]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c1e:	4b13      	ldr	r3, [pc, #76]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c24:	4811      	ldr	r0, [pc, #68]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c26:	f004 f827 	bl	8004c78 <HAL_UART_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000c30:	f000 f92e 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c34:	2100      	movs	r1, #0
 8000c36:	480d      	ldr	r0, [pc, #52]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c38:	f004 ffc4 	bl	8005bc4 <HAL_UARTEx_SetTxFifoThreshold>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000c42:	f000 f925 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c46:	2100      	movs	r1, #0
 8000c48:	4808      	ldr	r0, [pc, #32]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c4a:	f004 fff9 	bl	8005c40 <HAL_UARTEx_SetRxFifoThreshold>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000c54:	f000 f91c 	bl	8000e90 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000c58:	4804      	ldr	r0, [pc, #16]	; (8000c6c <MX_USART3_UART_Init+0x90>)
 8000c5a:	f004 ff7a 	bl	8005b52 <HAL_UARTEx_DisableFifoMode>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000c64:	f000 f914 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c68:	bf00      	nop
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	240001ec 	.word	0x240001ec
 8000c70:	40004800 	.word	0x40004800

08000c74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c78:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c7a:	4a16      	ldr	r2, [pc, #88]	; (8000cd4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000c7c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000c7e:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c80:	2209      	movs	r2, #9
 8000c82:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c84:	4b12      	ldr	r3, [pc, #72]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c86:	2202      	movs	r2, #2
 8000c88:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c8a:	4b11      	ldr	r3, [pc, #68]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c90:	4b0f      	ldr	r3, [pc, #60]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c92:	2202      	movs	r2, #2
 8000c94:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000c96:	4b0e      	ldr	r3, [pc, #56]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000ca2:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000cae:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000cba:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000cbc:	f001 fb08 	bl	80022d0 <HAL_PCD_Init>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000cc6:	f000 f8e3 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	2400027c 	.word	0x2400027c
 8000cd4:	40080000 	.word	0x40080000

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b08c      	sub	sp, #48	; 0x30
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	4b62      	ldr	r3, [pc, #392]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000cf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cf4:	4a60      	ldr	r2, [pc, #384]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000cf6:	f043 0304 	orr.w	r3, r3, #4
 8000cfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cfe:	4b5e      	ldr	r3, [pc, #376]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d04:	f003 0304 	and.w	r3, r3, #4
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d0c:	4b5a      	ldr	r3, [pc, #360]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d12:	4a59      	ldr	r2, [pc, #356]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d1c:	4b56      	ldr	r3, [pc, #344]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d2a:	4b53      	ldr	r3, [pc, #332]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d30:	4a51      	ldr	r2, [pc, #324]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d32:	f043 0301 	orr.w	r3, r3, #1
 8000d36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d3a:	4b4f      	ldr	r3, [pc, #316]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	f003 0301 	and.w	r3, r3, #1
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4e:	4a4a      	ldr	r2, [pc, #296]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d50:	f043 0302 	orr.w	r3, r3, #2
 8000d54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d58:	4b47      	ldr	r3, [pc, #284]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b44      	ldr	r3, [pc, #272]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d6c:	4a42      	ldr	r2, [pc, #264]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d76:	4b40      	ldr	r3, [pc, #256]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d7c:	f003 0308 	and.w	r3, r3, #8
 8000d80:	60bb      	str	r3, [r7, #8]
 8000d82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d84:	4b3c      	ldr	r3, [pc, #240]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d8a:	4a3b      	ldr	r2, [pc, #236]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d94:	4b38      	ldr	r3, [pc, #224]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000da2:	4b35      	ldr	r3, [pc, #212]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000da8:	4a33      	ldr	r2, [pc, #204]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000daa:	f043 0310 	orr.w	r3, r3, #16
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000db2:	4b31      	ldr	r3, [pc, #196]	; (8000e78 <MX_GPIO_Init+0x1a0>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000db8:	f003 0310 	and.w	r3, r3, #16
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f244 0101 	movw	r1, #16385	; 0x4001
 8000dc6:	482d      	ldr	r0, [pc, #180]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000dc8:	f001 fa20 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dd2:	482b      	ldr	r0, [pc, #172]	; (8000e80 <MX_GPIO_Init+0x1a8>)
 8000dd4:	f001 fa1a 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2102      	movs	r1, #2
 8000ddc:	4829      	ldr	r0, [pc, #164]	; (8000e84 <MX_GPIO_Init+0x1ac>)
 8000dde:	f001 fa15 	bl	800220c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000de2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4824      	ldr	r0, [pc, #144]	; (8000e88 <MX_GPIO_Init+0x1b0>)
 8000df8:	f001 f858 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8000dfc:	f244 0301 	movw	r3, #16385	; 0x4001
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0e:	f107 031c 	add.w	r3, r7, #28
 8000e12:	4619      	mov	r1, r3
 8000e14:	4819      	ldr	r0, [pc, #100]	; (8000e7c <MX_GPIO_Init+0x1a4>)
 8000e16:	f001 f849 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e20:	2301      	movs	r3, #1
 8000e22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000e2c:	f107 031c 	add.w	r3, r7, #28
 8000e30:	4619      	mov	r1, r3
 8000e32:	4813      	ldr	r0, [pc, #76]	; (8000e80 <MX_GPIO_Init+0x1a8>)
 8000e34:	f001 f83a 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000e38:	2380      	movs	r3, #128	; 0x80
 8000e3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e3c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	480f      	ldr	r0, [pc, #60]	; (8000e8c <MX_GPIO_Init+0x1b4>)
 8000e4e:	f001 f82d 	bl	8001eac <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e52:	2302      	movs	r3, #2
 8000e54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e56:	2301      	movs	r3, #1
 8000e58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e62:	f107 031c 	add.w	r3, r7, #28
 8000e66:	4619      	mov	r1, r3
 8000e68:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_GPIO_Init+0x1ac>)
 8000e6a:	f001 f81f 	bl	8001eac <HAL_GPIO_Init>

}
 8000e6e:	bf00      	nop
 8000e70:	3730      	adds	r7, #48	; 0x30
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	58024400 	.word	0x58024400
 8000e7c:	58020400 	.word	0x58020400
 8000e80:	58020c00 	.word	0x58020c00
 8000e84:	58021000 	.word	0x58021000
 8000e88:	58020800 	.word	0x58020800
 8000e8c:	58021800 	.word	0x58021800

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	4b0a      	ldr	r3, [pc, #40]	; (8000ecc <HAL_MspInit+0x30>)
 8000ea4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ea8:	4a08      	ldr	r2, [pc, #32]	; (8000ecc <HAL_MspInit+0x30>)
 8000eaa:	f043 0302 	orr.w	r3, r3, #2
 8000eae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000eb2:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000eb8:	f003 0302 	and.w	r3, r3, #2
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	58024400 	.word	0x58024400

08000ed0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b08e      	sub	sp, #56	; 0x38
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000edc:	2200      	movs	r2, #0
 8000ede:	601a      	str	r2, [r3, #0]
 8000ee0:	605a      	str	r2, [r3, #4]
 8000ee2:	609a      	str	r2, [r3, #8]
 8000ee4:	60da      	str	r2, [r3, #12]
 8000ee6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a59      	ldr	r2, [pc, #356]	; (8001054 <HAL_ETH_MspInit+0x184>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	f040 80ab 	bne.w	800104a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000ef4:	4b58      	ldr	r3, [pc, #352]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000ef6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000efa:	4a57      	ldr	r2, [pc, #348]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000efc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f00:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f04:	4b54      	ldr	r3, [pc, #336]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f0e:	623b      	str	r3, [r7, #32]
 8000f10:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000f12:	4b51      	ldr	r3, [pc, #324]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f18:	4a4f      	ldr	r2, [pc, #316]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f1e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f22:	4b4d      	ldr	r3, [pc, #308]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2c:	61fb      	str	r3, [r7, #28]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000f30:	4b49      	ldr	r3, [pc, #292]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f36:	4a48      	ldr	r2, [pc, #288]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000f40:	4b45      	ldr	r3, [pc, #276]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f4a:	61bb      	str	r3, [r7, #24]
 8000f4c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4e:	4b42      	ldr	r3, [pc, #264]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f54:	4a40      	ldr	r2, [pc, #256]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f56:	f043 0304 	orr.w	r3, r3, #4
 8000f5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f5e:	4b3e      	ldr	r3, [pc, #248]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f64:	f003 0304 	and.w	r3, r3, #4
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6c:	4b3a      	ldr	r3, [pc, #232]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f72:	4a39      	ldr	r2, [pc, #228]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f7c:	4b36      	ldr	r3, [pc, #216]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	4b33      	ldr	r3, [pc, #204]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f90:	4a31      	ldr	r2, [pc, #196]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f9a:	4b2f      	ldr	r3, [pc, #188]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000f9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000fa8:	4b2b      	ldr	r3, [pc, #172]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fae:	4a2a      	ldr	r2, [pc, #168]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000fb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000fb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fb8:	4b27      	ldr	r3, [pc, #156]	; (8001058 <HAL_ETH_MspInit+0x188>)
 8000fba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc2:	60bb      	str	r3, [r7, #8]
 8000fc4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000fc6:	2332      	movs	r3, #50	; 0x32
 8000fc8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fca:	2302      	movs	r3, #2
 8000fcc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fd6:	230b      	movs	r3, #11
 8000fd8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fde:	4619      	mov	r1, r3
 8000fe0:	481e      	ldr	r0, [pc, #120]	; (800105c <HAL_ETH_MspInit+0x18c>)
 8000fe2:	f000 ff63 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000fe6:	2386      	movs	r3, #134	; 0x86
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fea:	2302      	movs	r3, #2
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ff6:	230b      	movs	r3, #11
 8000ff8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	4817      	ldr	r0, [pc, #92]	; (8001060 <HAL_ETH_MspInit+0x190>)
 8001002:	f000 ff53 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001006:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001018:	230b      	movs	r3, #11
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001020:	4619      	mov	r1, r3
 8001022:	4810      	ldr	r0, [pc, #64]	; (8001064 <HAL_ETH_MspInit+0x194>)
 8001024:	f000 ff42 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001028:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800103a:	230b      	movs	r3, #11
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800103e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001042:	4619      	mov	r1, r3
 8001044:	4808      	ldr	r0, [pc, #32]	; (8001068 <HAL_ETH_MspInit+0x198>)
 8001046:	f000 ff31 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3738      	adds	r7, #56	; 0x38
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40028000 	.word	0x40028000
 8001058:	58024400 	.word	0x58024400
 800105c:	58020800 	.word	0x58020800
 8001060:	58020000 	.word	0x58020000
 8001064:	58020400 	.word	0x58020400
 8001068:	58021800 	.word	0x58021800

0800106c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0b8      	sub	sp, #224	; 0xe0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0310 	add.w	r3, r7, #16
 8001088:	22bc      	movs	r2, #188	; 0xbc
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f005 f991 	bl	80063b4 <memset>
  if(huart->Instance==USART3)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a25      	ldr	r2, [pc, #148]	; (800112c <HAL_UART_MspInit+0xc0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d142      	bne.n	8001122 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800109c:	2302      	movs	r3, #2
 800109e:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0310 	add.w	r3, r7, #16
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 fa7c 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80010b6:	f7ff feeb 	bl	8000e90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <HAL_UART_MspInit+0xc4>)
 80010bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <HAL_UART_MspInit+0xc4>)
 80010c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ca:	4b19      	ldr	r3, [pc, #100]	; (8001130 <HAL_UART_MspInit+0xc4>)
 80010cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <HAL_UART_MspInit+0xc4>)
 80010da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010de:	4a14      	ldr	r2, [pc, #80]	; (8001130 <HAL_UART_MspInit+0xc4>)
 80010e0:	f043 0308 	orr.w	r3, r3, #8
 80010e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e8:	4b11      	ldr	r3, [pc, #68]	; (8001130 <HAL_UART_MspInit+0xc4>)
 80010ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010ee:	f003 0308 	and.w	r3, r3, #8
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001110:	2307      	movs	r3, #7
 8001112:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001116:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_UART_MspInit+0xc8>)
 800111e:	f000 fec5 	bl	8001eac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	37e0      	adds	r7, #224	; 0xe0
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40004800 	.word	0x40004800
 8001130:	58024400 	.word	0x58024400
 8001134:	58020c00 	.word	0x58020c00

08001138 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b8      	sub	sp, #224	; 0xe0
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	22bc      	movs	r2, #188	; 0xbc
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f005 f92b 	bl	80063b4 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a36      	ldr	r2, [pc, #216]	; (800123c <HAL_PCD_MspInit+0x104>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d165      	bne.n	8001234 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001168:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800116c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 800116e:	2301      	movs	r3, #1
 8001170:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001172:	2318      	movs	r3, #24
 8001174:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001176:	2302      	movs	r3, #2
 8001178:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 800117a:	2304      	movs	r3, #4
 800117c:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 800117e:	2302      	movs	r3, #2
 8001180:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001182:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001186:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800118c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001190:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	4618      	mov	r0, r3
 800119a:	f002 fa05 	bl	80035a8 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80011a4:	f7ff fe74 	bl	8000e90 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80011a8:	f001 fa34 	bl	8002614 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <HAL_PCD_MspInit+0x108>)
 80011ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b2:	4a23      	ldr	r2, [pc, #140]	; (8001240 <HAL_PCD_MspInit+0x108>)
 80011b4:	f043 0301 	orr.w	r3, r3, #1
 80011b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011bc:	4b20      	ldr	r3, [pc, #128]	; (8001240 <HAL_PCD_MspInit+0x108>)
 80011be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c2:	f003 0301 	and.w	r3, r3, #1
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80011ca:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80011ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d2:	2302      	movs	r3, #2
 80011d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80011e4:	230a      	movs	r3, #10
 80011e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80011ee:	4619      	mov	r1, r3
 80011f0:	4814      	ldr	r0, [pc, #80]	; (8001244 <HAL_PCD_MspInit+0x10c>)
 80011f2:	f000 fe5b 	bl	8001eac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80011f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80011fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <HAL_PCD_MspInit+0x10c>)
 8001212:	f000 fe4b 	bl	8001eac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <HAL_PCD_MspInit+0x108>)
 8001218:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800121c:	4a08      	ldr	r2, [pc, #32]	; (8001240 <HAL_PCD_MspInit+0x108>)
 800121e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001222:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001226:	4b06      	ldr	r3, [pc, #24]	; (8001240 <HAL_PCD_MspInit+0x108>)
 8001228:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800122c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001234:	bf00      	nop
 8001236:	37e0      	adds	r7, #224	; 0xe0
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40080000 	.word	0x40080000
 8001240:	58024400 	.word	0x58024400
 8001244:	58020000 	.word	0x58020000

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 f89e 	bl	80013d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800129c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012a0:	f7ff f99c 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012a4:	480c      	ldr	r0, [pc, #48]	; (80012d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80012a6:	490d      	ldr	r1, [pc, #52]	; (80012dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80012a8:	4a0d      	ldr	r2, [pc, #52]	; (80012e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80012aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ac:	e002      	b.n	80012b4 <LoopCopyDataInit>

080012ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012b2:	3304      	adds	r3, #4

080012b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012b8:	d3f9      	bcc.n	80012ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012bc:	4c0a      	ldr	r4, [pc, #40]	; (80012e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80012be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012c0:	e001      	b.n	80012c6 <LoopFillZerobss>

080012c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012c4:	3204      	adds	r2, #4

080012c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012c8:	d3fb      	bcc.n	80012c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012ca:	f005 f84f 	bl	800636c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ce:	f7ff fb63 	bl	8000998 <main>
  bx  lr
 80012d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012d8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012dc:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80012e0:	08006424 	.word	0x08006424
  ldr r2, =_sbss
 80012e4:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 80012e8:	24000794 	.word	0x24000794

080012ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012ec:	e7fe      	b.n	80012ec <ADC3_IRQHandler>
	...

080012f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f6:	2003      	movs	r0, #3
 80012f8:	f000 f982 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012fc:	f001 ff7e 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8001300:	4602      	mov	r2, r0
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <HAL_Init+0x68>)
 8001304:	699b      	ldr	r3, [r3, #24]
 8001306:	0a1b      	lsrs	r3, r3, #8
 8001308:	f003 030f 	and.w	r3, r3, #15
 800130c:	4913      	ldr	r1, [pc, #76]	; (800135c <HAL_Init+0x6c>)
 800130e:	5ccb      	ldrb	r3, [r1, r3]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	fa22 f303 	lsr.w	r3, r2, r3
 8001318:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_Init+0x68>)
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	4a0e      	ldr	r2, [pc, #56]	; (800135c <HAL_Init+0x6c>)
 8001324:	5cd3      	ldrb	r3, [r2, r3]
 8001326:	f003 031f 	and.w	r3, r3, #31
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	fa22 f303 	lsr.w	r3, r2, r3
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <HAL_Init+0x70>)
 8001332:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001334:	4a0b      	ldr	r2, [pc, #44]	; (8001364 <HAL_Init+0x74>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800133a:	2000      	movs	r0, #0
 800133c:	f000 f814 	bl	8001368 <HAL_InitTick>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e002      	b.n	8001350 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fda7 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	58024400 	.word	0x58024400
 800135c:	080063dc 	.word	0x080063dc
 8001360:	24000004 	.word	0x24000004
 8001364:	24000000 	.word	0x24000000

08001368 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001370:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_InitTick+0x60>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e021      	b.n	80013c0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800137c:	4b13      	ldr	r3, [pc, #76]	; (80013cc <HAL_InitTick+0x64>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b11      	ldr	r3, [pc, #68]	; (80013c8 <HAL_InitTick+0x60>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	4619      	mov	r1, r3
 8001386:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800138a:	fbb3 f3f1 	udiv	r3, r3, r1
 800138e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001392:	4618      	mov	r0, r3
 8001394:	f000 f959 	bl	800164a <HAL_SYSTICK_Config>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d001      	beq.n	80013a2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e00e      	b.n	80013c0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2b0f      	cmp	r3, #15
 80013a6:	d80a      	bhi.n	80013be <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a8:	2200      	movs	r2, #0
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f000 f931 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b4:	4a06      	ldr	r2, [pc, #24]	; (80013d0 <HAL_InitTick+0x68>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	e000      	b.n	80013c0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013be:	2301      	movs	r3, #1
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3708      	adds	r7, #8
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	2400000c 	.word	0x2400000c
 80013cc:	24000000 	.word	0x24000000
 80013d0:	24000008 	.word	0x24000008

080013d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_IncTick+0x20>)
 80013da:	781b      	ldrb	r3, [r3, #0]
 80013dc:	461a      	mov	r2, r3
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_IncTick+0x24>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4413      	add	r3, r2
 80013e4:	4a04      	ldr	r2, [pc, #16]	; (80013f8 <HAL_IncTick+0x24>)
 80013e6:	6013      	str	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	2400000c 	.word	0x2400000c
 80013f8:	24000790 	.word	0x24000790

080013fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001400:	4b03      	ldr	r3, [pc, #12]	; (8001410 <HAL_GetTick+0x14>)
 8001402:	681b      	ldr	r3, [r3, #0]
}
 8001404:	4618      	mov	r0, r3
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	24000790 	.word	0x24000790

08001414 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b084      	sub	sp, #16
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800141c:	f7ff ffee 	bl	80013fc <HAL_GetTick>
 8001420:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142c:	d005      	beq.n	800143a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <HAL_Delay+0x44>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	461a      	mov	r2, r3
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	4413      	add	r3, r2
 8001438:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800143a:	bf00      	nop
 800143c:	f7ff ffde 	bl	80013fc <HAL_GetTick>
 8001440:	4602      	mov	r2, r0
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	1ad3      	subs	r3, r2, r3
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	429a      	cmp	r2, r3
 800144a:	d8f7      	bhi.n	800143c <HAL_Delay+0x28>
  {
  }
}
 800144c:	bf00      	nop
 800144e:	bf00      	nop
 8001450:	3710      	adds	r7, #16
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	bf00      	nop
 8001458:	2400000c 	.word	0x2400000c

0800145c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001460:	4b03      	ldr	r3, [pc, #12]	; (8001470 <HAL_GetREVID+0x14>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	0c1b      	lsrs	r3, r3, #16
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	5c001000 	.word	0x5c001000

08001474 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001474:	b480      	push	{r7}
 8001476:	b083      	sub	sp, #12
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800147c:	4b06      	ldr	r3, [pc, #24]	; (8001498 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001484:	4904      	ldr	r1, [pc, #16]	; (8001498 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4313      	orrs	r3, r2
 800148a:	604b      	str	r3, [r1, #4]
}
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	58000400 	.word	0x58000400

0800149c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <__NVIC_SetPriorityGrouping+0x40>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014b2:	68ba      	ldr	r2, [r7, #8]
 80014b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b8:	4013      	ands	r3, r2
 80014ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014c4:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c6:	4313      	orrs	r3, r2
 80014c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ca:	4a04      	ldr	r2, [pc, #16]	; (80014dc <__NVIC_SetPriorityGrouping+0x40>)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	60d3      	str	r3, [r2, #12]
}
 80014d0:	bf00      	nop
 80014d2:	3714      	adds	r7, #20
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	e000ed00 	.word	0xe000ed00
 80014e0:	05fa0000 	.word	0x05fa0000

080014e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <__NVIC_GetPriorityGrouping+0x18>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	0a1b      	lsrs	r3, r3, #8
 80014ee:	f003 0307 	and.w	r3, r3, #7
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff8e 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff47 	bl	800149c <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001624:	f7ff ff5e 	bl	80014e4 <__NVIC_GetPriorityGrouping>
 8001628:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162a:	687a      	ldr	r2, [r7, #4]
 800162c:	68b9      	ldr	r1, [r7, #8]
 800162e:	6978      	ldr	r0, [r7, #20]
 8001630:	f7ff ff90 	bl	8001554 <NVIC_EncodePriority>
 8001634:	4602      	mov	r2, r0
 8001636:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800163a:	4611      	mov	r1, r2
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff5f 	bl	8001500 <__NVIC_SetPriority>
}
 8001642:	bf00      	nop
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffb2 	bl	80015bc <SysTick_Config>
 8001658:	4603      	mov	r3, r0
}
 800165a:	4618      	mov	r0, r3
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
	...

08001664 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e0cf      	b.n	8001816 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800167c:	2b00      	cmp	r3, #0
 800167e:	d106      	bne.n	800168e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2223      	movs	r2, #35	; 0x23
 8001684:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fc21 	bl	8000ed0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800168e:	4b64      	ldr	r3, [pc, #400]	; (8001820 <HAL_ETH_Init+0x1bc>)
 8001690:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001694:	4a62      	ldr	r2, [pc, #392]	; (8001820 <HAL_ETH_Init+0x1bc>)
 8001696:	f043 0302 	orr.w	r3, r3, #2
 800169a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_ETH_Init+0x1bc>)
 80016a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80016a4:	f003 0302 	and.w	r3, r3, #2
 80016a8:	60bb      	str	r3, [r7, #8]
 80016aa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	7a1b      	ldrb	r3, [r3, #8]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fedd 	bl	8001474 <HAL_SYSCFG_ETHInterfaceSelect>
 80016ba:	e003      	b.n	80016c4 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80016bc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80016c0:	f7ff fed8 	bl	8001474 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80016c4:	4b57      	ldr	r3, [pc, #348]	; (8001824 <HAL_ETH_Init+0x1c0>)
 80016c6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016de:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016e0:	f7ff fe8c 	bl	80013fc <HAL_GetTick>
 80016e4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80016e6:	e011      	b.n	800170c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80016e8:	f7ff fe88 	bl	80013fc <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016f6:	d909      	bls.n	800170c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2204      	movs	r2, #4
 80016fc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	22e0      	movs	r2, #224	; 0xe0
 8001704:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e084      	b.n	8001816 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1e4      	bne.n	80016e8 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 f886 	bl	8001830 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001724:	f001 fee4 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8001728:	4603      	mov	r3, r0
 800172a:	4a3f      	ldr	r2, [pc, #252]	; (8001828 <HAL_ETH_Init+0x1c4>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0c9a      	lsrs	r2, r3, #18
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	3a01      	subs	r2, #1
 8001738:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 fa71 	bl	8001c24 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800174a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800174e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6812      	ldr	r2, [r2, #0]
 8001756:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800175a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800175e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	f003 0303 	and.w	r3, r3, #3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d009      	beq.n	8001782 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2201      	movs	r2, #1
 8001772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	22e0      	movs	r2, #224	; 0xe0
 800177a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e049      	b.n	8001816 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800178a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800178e:	4b27      	ldr	r3, [pc, #156]	; (800182c <HAL_ETH_Init+0x1c8>)
 8001790:	4013      	ands	r3, r2
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	6952      	ldr	r2, [r2, #20]
 8001796:	0051      	lsls	r1, r2, #1
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	6812      	ldr	r2, [r2, #0]
 800179c:	430b      	orrs	r3, r1
 800179e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017a2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f000 fad9 	bl	8001d5e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fb1f 	bl	8001df0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	3305      	adds	r3, #5
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	021a      	lsls	r2, r3, #8
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	3304      	adds	r3, #4
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	430a      	orrs	r2, r1
 80017cc:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	3303      	adds	r3, #3
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	061a      	lsls	r2, r3, #24
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	3302      	adds	r3, #2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	3301      	adds	r3, #1
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017f0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80017fe:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001800:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2210      	movs	r2, #16
 8001810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	58024400 	.word	0x58024400
 8001824:	58000400 	.word	0x58000400
 8001828:	431bde83 	.word	0x431bde83
 800182c:	ffff8001 	.word	0xffff8001

08001830 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001840:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001848:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800184a:	f001 fe51 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800184e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	4a1e      	ldr	r2, [pc, #120]	; (80018cc <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d908      	bls.n	800186a <HAL_ETH_SetMDIOClockRange+0x3a>
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4a1d      	ldr	r2, [pc, #116]	; (80018d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d804      	bhi.n	800186a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	e027      	b.n	80018ba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	4a18      	ldr	r2, [pc, #96]	; (80018d0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d908      	bls.n	8001884 <HAL_ETH_SetMDIOClockRange+0x54>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	4a17      	ldr	r2, [pc, #92]	; (80018d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d204      	bcs.n	8001884 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001880:	60fb      	str	r3, [r7, #12]
 8001882:	e01a      	b.n	80018ba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4a13      	ldr	r2, [pc, #76]	; (80018d4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d303      	bcc.n	8001894 <HAL_ETH_SetMDIOClockRange+0x64>
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d911      	bls.n	80018b8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	4a10      	ldr	r2, [pc, #64]	; (80018d8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d908      	bls.n	80018ae <HAL_ETH_SetMDIOClockRange+0x7e>
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	4a0f      	ldr	r2, [pc, #60]	; (80018dc <HAL_ETH_SetMDIOClockRange+0xac>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d804      	bhi.n	80018ae <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	e005      	b.n	80018ba <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e000      	b.n	80018ba <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80018b8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	01312cff 	.word	0x01312cff
 80018d0:	02160ebf 	.word	0x02160ebf
 80018d4:	03938700 	.word	0x03938700
 80018d8:	05f5e0ff 	.word	0x05f5e0ff
 80018dc:	08f0d17f 	.word	0x08f0d17f

080018e0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80018f2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80018fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	7b1b      	ldrb	r3, [r3, #12]
 8001900:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001902:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	7b5b      	ldrb	r3, [r3, #13]
 8001908:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800190a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	7b9b      	ldrb	r3, [r3, #14]
 8001910:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001912:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	7bdb      	ldrb	r3, [r3, #15]
 8001918:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800191a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800191c:	683a      	ldr	r2, [r7, #0]
 800191e:	7c12      	ldrb	r2, [r2, #16]
 8001920:	2a00      	cmp	r2, #0
 8001922:	d102      	bne.n	800192a <ETH_SetMACConfig+0x4a>
 8001924:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001928:	e000      	b.n	800192c <ETH_SetMACConfig+0x4c>
 800192a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800192c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800192e:	683a      	ldr	r2, [r7, #0]
 8001930:	7c52      	ldrb	r2, [r2, #17]
 8001932:	2a00      	cmp	r2, #0
 8001934:	d102      	bne.n	800193c <ETH_SetMACConfig+0x5c>
 8001936:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800193a:	e000      	b.n	800193e <ETH_SetMACConfig+0x5e>
 800193c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800193e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	7c9b      	ldrb	r3, [r3, #18]
 8001944:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8001946:	431a      	orrs	r2, r3
               macconf->Speed |
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800194c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8001952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	7f1b      	ldrb	r3, [r3, #28]
 8001958:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800195a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	7f5b      	ldrb	r3, [r3, #29]
 8001960:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8001962:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	7f92      	ldrb	r2, [r2, #30]
 8001968:	2a00      	cmp	r2, #0
 800196a:	d102      	bne.n	8001972 <ETH_SetMACConfig+0x92>
 800196c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001970:	e000      	b.n	8001974 <ETH_SetMACConfig+0x94>
 8001972:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8001974:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	7fdb      	ldrb	r3, [r3, #31]
 800197a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800197c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800197e:	683a      	ldr	r2, [r7, #0]
 8001980:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001984:	2a00      	cmp	r2, #0
 8001986:	d102      	bne.n	800198e <ETH_SetMACConfig+0xae>
 8001988:	f44f 7280 	mov.w	r2, #256	; 0x100
 800198c:	e000      	b.n	8001990 <ETH_SetMACConfig+0xb0>
 800198e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001990:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001996:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800199e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80019a0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80019a6:	4313      	orrs	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681a      	ldr	r2, [r3, #0]
 80019b0:	4b56      	ldr	r3, [pc, #344]	; (8001b0c <ETH_SetMACConfig+0x22c>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	687a      	ldr	r2, [r7, #4]
 80019b6:	6812      	ldr	r2, [r2, #0]
 80019b8:	68f9      	ldr	r1, [r7, #12]
 80019ba:	430b      	orrs	r3, r1
 80019bc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c2:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80019ca:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019cc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019d4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80019d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80019de:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80019e0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80019e2:	683a      	ldr	r2, [r7, #0]
 80019e4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80019e8:	2a00      	cmp	r2, #0
 80019ea:	d102      	bne.n	80019f2 <ETH_SetMACConfig+0x112>
 80019ec:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80019f0:	e000      	b.n	80019f4 <ETH_SetMACConfig+0x114>
 80019f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80019f4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80019fa:	4313      	orrs	r3, r2
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <ETH_SetMACConfig+0x230>)
 8001a06:	4013      	ands	r3, r2
 8001a08:	687a      	ldr	r2, [r7, #4]
 8001a0a:	6812      	ldr	r2, [r2, #0]
 8001a0c:	68f9      	ldr	r1, [r7, #12]
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a18:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68da      	ldr	r2, [r3, #12]
 8001a28:	4b3a      	ldr	r3, [pc, #232]	; (8001b14 <ETH_SetMACConfig+0x234>)
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	687a      	ldr	r2, [r7, #4]
 8001a2e:	6812      	ldr	r2, [r2, #0]
 8001a30:	68f9      	ldr	r1, [r7, #12]
 8001a32:	430b      	orrs	r3, r1
 8001a34:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8001a3c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a42:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001a4a:	2a00      	cmp	r2, #0
 8001a4c:	d101      	bne.n	8001a52 <ETH_SetMACConfig+0x172>
 8001a4e:	2280      	movs	r2, #128	; 0x80
 8001a50:	e000      	b.n	8001a54 <ETH_SetMACConfig+0x174>
 8001a52:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8001a54:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a5a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001a66:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	6812      	ldr	r2, [r2, #0]
 8001a70:	68f9      	ldr	r1, [r7, #12]
 8001a72:	430b      	orrs	r3, r1
 8001a74:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8001a7c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001a84:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001a86:	4313      	orrs	r3, r2
 8001a88:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a92:	f023 0103 	bic.w	r1, r3, #3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8001aaa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ac0:	683a      	ldr	r2, [r7, #0]
 8001ac2:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001ac6:	2a00      	cmp	r2, #0
 8001ac8:	d101      	bne.n	8001ace <ETH_SetMACConfig+0x1ee>
 8001aca:	2240      	movs	r2, #64	; 0x40
 8001acc:	e000      	b.n	8001ad0 <ETH_SetMACConfig+0x1f0>
 8001ace:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001ad0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001ad8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001ada:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001ae2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001af0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	00048083 	.word	0x00048083
 8001b10:	c0f88000 	.word	0xc0f88000
 8001b14:	fffffef0 	.word	0xfffffef0

08001b18 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b085      	sub	sp, #20
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
 8001b20:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b38      	ldr	r3, [pc, #224]	; (8001c10 <ETH_SetDMAConfig+0xf8>)
 8001b2e:	4013      	ands	r3, r2
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	6811      	ldr	r1, [r2, #0]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6812      	ldr	r2, [r2, #0]
 8001b38:	430b      	orrs	r3, r1
 8001b3a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b3e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	791b      	ldrb	r3, [r3, #4]
 8001b44:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b4a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	7b1b      	ldrb	r3, [r3, #12]
 8001b50:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8001b52:	4313      	orrs	r3, r2
 8001b54:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	4b2c      	ldr	r3, [pc, #176]	; (8001c14 <ETH_SetDMAConfig+0xfc>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6812      	ldr	r2, [r2, #0]
 8001b68:	68f9      	ldr	r1, [r7, #12]
 8001b6a:	430b      	orrs	r3, r1
 8001b6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b70:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	7b5b      	ldrb	r3, [r3, #13]
 8001b76:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b88:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8001b8c:	4b22      	ldr	r3, [pc, #136]	; (8001c18 <ETH_SetDMAConfig+0x100>)
 8001b8e:	4013      	ands	r3, r2
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	68f9      	ldr	r1, [r7, #12]
 8001b96:	430b      	orrs	r3, r1
 8001b98:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b9c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	7d1b      	ldrb	r3, [r3, #20]
 8001ba8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8001baa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	7f5b      	ldrb	r3, [r3, #29]
 8001bb0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bbe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001bc2:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <ETH_SetDMAConfig+0x104>)
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6812      	ldr	r2, [r2, #0]
 8001bca:	68f9      	ldr	r1, [r7, #12]
 8001bcc:	430b      	orrs	r3, r1
 8001bce:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bd2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	7f1b      	ldrb	r3, [r3, #28]
 8001bda:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001be0:	4313      	orrs	r3, r2
 8001be2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bec:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	; (8001c20 <ETH_SetDMAConfig+0x108>)
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	68f9      	ldr	r1, [r7, #12]
 8001bfa:	430b      	orrs	r3, r1
 8001bfc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c00:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001c04:	bf00      	nop
 8001c06:	3714      	adds	r7, #20
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr
 8001c10:	ffff87fd 	.word	0xffff87fd
 8001c14:	ffff2ffe 	.word	0xffff2ffe
 8001c18:	fffec000 	.word	0xfffec000
 8001c1c:	ffc0efef 	.word	0xffc0efef
 8001c20:	7fc0ffff 	.word	0x7fc0ffff

08001c24 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b0a4      	sub	sp, #144	; 0x90
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001c32:	2300      	movs	r3, #0
 8001c34:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8001c36:	2300      	movs	r3, #0
 8001c38:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8001c42:	2301      	movs	r3, #1
 8001c44:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001c60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c64:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8001c7c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001c80:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001c92:	2300      	movs	r3, #0
 8001c94:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8001caa:	2300      	movs	r3, #0
 8001cac:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8001cce:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001cd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001d02:	2301      	movs	r3, #1
 8001d04:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001d08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f7ff fde6 	bl	80018e0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001d14:	2301      	movs	r3, #1
 8001d16:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001d2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d32:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8001d34:	2300      	movs	r3, #0
 8001d36:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001d38:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d3c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8001d44:	f44f 7306 	mov.w	r3, #536	; 0x218
 8001d48:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001d4a:	f107 0308 	add.w	r3, r7, #8
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f7ff fee1 	bl	8001b18 <ETH_SetDMAConfig>
}
 8001d56:	bf00      	nop
 8001d58:	3790      	adds	r7, #144	; 0x90
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b085      	sub	sp, #20
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001d66:	2300      	movs	r3, #0
 8001d68:	60fb      	str	r3, [r7, #12]
 8001d6a:	e01d      	b.n	8001da8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68d9      	ldr	r1, [r3, #12]
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	00db      	lsls	r3, r3, #3
 8001d7a:	440b      	add	r3, r1
 8001d7c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2200      	movs	r2, #0
 8001d88:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	2200      	movs	r2, #0
 8001d94:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001d96:	68b9      	ldr	r1, [r7, #8]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	3206      	adds	r2, #6
 8001d9e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	3301      	adds	r3, #1
 8001da6:	60fb      	str	r3, [r7, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b03      	cmp	r3, #3
 8001dac:	d9de      	bls.n	8001d6c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68da      	ldr	r2, [r3, #12]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001dd0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001de4:	bf00      	nop
 8001de6:	3714      	adds	r7, #20
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60fb      	str	r3, [r7, #12]
 8001dfc:	e023      	b.n	8001e46 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6919      	ldr	r1, [r3, #16]
 8001e02:	68fa      	ldr	r2, [r7, #12]
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	440b      	add	r3, r1
 8001e0e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001e16:	68bb      	ldr	r3, [r7, #8]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	2200      	movs	r2, #0
 8001e26:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001e2e:	68bb      	ldr	r3, [r7, #8]
 8001e30:	2200      	movs	r2, #0
 8001e32:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68fa      	ldr	r2, [r7, #12]
 8001e3a:	3212      	adds	r2, #18
 8001e3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2b03      	cmp	r3, #3
 8001e4a:	d9d8      	bls.n	8001dfe <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2200      	movs	r2, #0
 8001e56:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2200      	movs	r2, #0
 8001e68:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e72:	461a      	mov	r2, r3
 8001e74:	2303      	movs	r3, #3
 8001e76:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691a      	ldr	r2, [r3, #16]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e86:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	691b      	ldr	r3, [r3, #16]
 8001e8e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e9a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001e9e:	bf00      	nop
 8001ea0:	3714      	adds	r7, #20
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
	...

08001eac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b089      	sub	sp, #36	; 0x24
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001eba:	4b89      	ldr	r3, [pc, #548]	; (80020e0 <HAL_GPIO_Init+0x234>)
 8001ebc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001ebe:	e194      	b.n	80021ea <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f000 8186 	beq.w	80021e4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d005      	beq.n	8001ef0 <HAL_GPIO_Init+0x44>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 0303 	and.w	r3, r3, #3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d130      	bne.n	8001f52 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	2203      	movs	r2, #3
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001f26:	2201      	movs	r2, #1
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2e:	43db      	mvns	r3, r3
 8001f30:	69ba      	ldr	r2, [r7, #24]
 8001f32:	4013      	ands	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 0201 	and.w	r2, r3, #1
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69ba      	ldr	r2, [r7, #24]
 8001f50:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f003 0303 	and.w	r3, r3, #3
 8001f5a:	2b03      	cmp	r3, #3
 8001f5c:	d017      	beq.n	8001f8e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001f64:	69fb      	ldr	r3, [r7, #28]
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	2203      	movs	r2, #3
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	689a      	ldr	r2, [r3, #8]
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	4313      	orrs	r3, r2
 8001f86:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	69ba      	ldr	r2, [r7, #24]
 8001f8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d123      	bne.n	8001fe2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001fa8:	69fb      	ldr	r3, [r7, #28]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	220f      	movs	r2, #15
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43db      	mvns	r3, r3
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	691a      	ldr	r2, [r3, #16]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	f003 0307 	and.w	r3, r3, #7
 8001fc8:	009b      	lsls	r3, r3, #2
 8001fca:	fa02 f303 	lsl.w	r3, r2, r3
 8001fce:	69ba      	ldr	r2, [r7, #24]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	08da      	lsrs	r2, r3, #3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3208      	adds	r2, #8
 8001fdc:	69b9      	ldr	r1, [r7, #24]
 8001fde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f003 0203 	and.w	r2, r3, #3
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	69ba      	ldr	r2, [r7, #24]
 800200c:	4313      	orrs	r3, r2
 800200e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	69ba      	ldr	r2, [r7, #24]
 8002014:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800201e:	2b00      	cmp	r3, #0
 8002020:	f000 80e0 	beq.w	80021e4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002024:	4b2f      	ldr	r3, [pc, #188]	; (80020e4 <HAL_GPIO_Init+0x238>)
 8002026:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800202a:	4a2e      	ldr	r2, [pc, #184]	; (80020e4 <HAL_GPIO_Init+0x238>)
 800202c:	f043 0302 	orr.w	r3, r3, #2
 8002030:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_GPIO_Init+0x238>)
 8002036:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002042:	4a29      	ldr	r2, [pc, #164]	; (80020e8 <HAL_GPIO_Init+0x23c>)
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	089b      	lsrs	r3, r3, #2
 8002048:	3302      	adds	r3, #2
 800204a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	220f      	movs	r2, #15
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	43db      	mvns	r3, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4013      	ands	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a20      	ldr	r2, [pc, #128]	; (80020ec <HAL_GPIO_Init+0x240>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d052      	beq.n	8002114 <HAL_GPIO_Init+0x268>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a1f      	ldr	r2, [pc, #124]	; (80020f0 <HAL_GPIO_Init+0x244>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d031      	beq.n	80020da <HAL_GPIO_Init+0x22e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a1e      	ldr	r2, [pc, #120]	; (80020f4 <HAL_GPIO_Init+0x248>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d02b      	beq.n	80020d6 <HAL_GPIO_Init+0x22a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a1d      	ldr	r2, [pc, #116]	; (80020f8 <HAL_GPIO_Init+0x24c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d025      	beq.n	80020d2 <HAL_GPIO_Init+0x226>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a1c      	ldr	r2, [pc, #112]	; (80020fc <HAL_GPIO_Init+0x250>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d01f      	beq.n	80020ce <HAL_GPIO_Init+0x222>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a1b      	ldr	r2, [pc, #108]	; (8002100 <HAL_GPIO_Init+0x254>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d019      	beq.n	80020ca <HAL_GPIO_Init+0x21e>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a1a      	ldr	r2, [pc, #104]	; (8002104 <HAL_GPIO_Init+0x258>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d013      	beq.n	80020c6 <HAL_GPIO_Init+0x21a>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a19      	ldr	r2, [pc, #100]	; (8002108 <HAL_GPIO_Init+0x25c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d00d      	beq.n	80020c2 <HAL_GPIO_Init+0x216>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a18      	ldr	r2, [pc, #96]	; (800210c <HAL_GPIO_Init+0x260>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d007      	beq.n	80020be <HAL_GPIO_Init+0x212>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a17      	ldr	r2, [pc, #92]	; (8002110 <HAL_GPIO_Init+0x264>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d101      	bne.n	80020ba <HAL_GPIO_Init+0x20e>
 80020b6:	2309      	movs	r3, #9
 80020b8:	e02d      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020ba:	230a      	movs	r3, #10
 80020bc:	e02b      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020be:	2308      	movs	r3, #8
 80020c0:	e029      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020c2:	2307      	movs	r3, #7
 80020c4:	e027      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020c6:	2306      	movs	r3, #6
 80020c8:	e025      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020ca:	2305      	movs	r3, #5
 80020cc:	e023      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020ce:	2304      	movs	r3, #4
 80020d0:	e021      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020d2:	2303      	movs	r3, #3
 80020d4:	e01f      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020d6:	2302      	movs	r3, #2
 80020d8:	e01d      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020da:	2301      	movs	r3, #1
 80020dc:	e01b      	b.n	8002116 <HAL_GPIO_Init+0x26a>
 80020de:	bf00      	nop
 80020e0:	58000080 	.word	0x58000080
 80020e4:	58024400 	.word	0x58024400
 80020e8:	58000400 	.word	0x58000400
 80020ec:	58020000 	.word	0x58020000
 80020f0:	58020400 	.word	0x58020400
 80020f4:	58020800 	.word	0x58020800
 80020f8:	58020c00 	.word	0x58020c00
 80020fc:	58021000 	.word	0x58021000
 8002100:	58021400 	.word	0x58021400
 8002104:	58021800 	.word	0x58021800
 8002108:	58021c00 	.word	0x58021c00
 800210c:	58022000 	.word	0x58022000
 8002110:	58022400 	.word	0x58022400
 8002114:	2300      	movs	r3, #0
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	f002 0203 	and.w	r2, r2, #3
 800211c:	0092      	lsls	r2, r2, #2
 800211e:	4093      	lsls	r3, r2
 8002120:	69ba      	ldr	r2, [r7, #24]
 8002122:	4313      	orrs	r3, r2
 8002124:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002126:	4938      	ldr	r1, [pc, #224]	; (8002208 <HAL_GPIO_Init+0x35c>)
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	3302      	adds	r3, #2
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002134:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	43db      	mvns	r3, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4013      	ands	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800215a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800215e:	69bb      	ldr	r3, [r7, #24]
 8002160:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002162:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002188:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	43db      	mvns	r3, r3
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	4013      	ands	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4013      	ands	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f47f ae63 	bne.w	8001ec0 <HAL_GPIO_Init+0x14>
  }
}
 80021fa:	bf00      	nop
 80021fc:	bf00      	nop
 80021fe:	3724      	adds	r7, #36	; 0x24
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	58000400 	.word	0x58000400

0800220c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	807b      	strh	r3, [r7, #2]
 8002218:	4613      	mov	r3, r2
 800221a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800221c:	787b      	ldrb	r3, [r7, #1]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d003      	beq.n	800222a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002222:	887a      	ldrh	r2, [r7, #2]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002228:	e003      	b.n	8002232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800222a:	887b      	ldrh	r3, [r7, #2]
 800222c:	041a      	lsls	r2, r3, #16
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	619a      	str	r2, [r3, #24]
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	460b      	mov	r3, r1
 8002248:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	695b      	ldr	r3, [r3, #20]
 800224e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002250:	887a      	ldrh	r2, [r7, #2]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	041a      	lsls	r2, r3, #16
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	43d9      	mvns	r1, r3
 800225c:	887b      	ldrh	r3, [r7, #2]
 800225e:	400b      	ands	r3, r1
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	619a      	str	r2, [r3, #24]
}
 8002266:	bf00      	nop
 8002268:	3714      	adds	r7, #20
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
	...

08002274 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800227c:	4a08      	ldr	r2, [pc, #32]	; (80022a0 <HAL_HSEM_FastTake+0x2c>)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3320      	adds	r3, #32
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	4a07      	ldr	r2, [pc, #28]	; (80022a4 <HAL_HSEM_FastTake+0x30>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d101      	bne.n	8002290 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800228c:	2300      	movs	r3, #0
 800228e:	e000      	b.n	8002292 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
}
 8002292:	4618      	mov	r0, r3
 8002294:	370c      	adds	r7, #12
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	58026400 	.word	0x58026400
 80022a4:	80000300 	.word	0x80000300

080022a8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80022b2:	4906      	ldr	r1, [pc, #24]	; (80022cc <HAL_HSEM_Release+0x24>)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr
 80022cc:	58026400 	.word	0x58026400

080022d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80022d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022d2:	b08f      	sub	sp, #60	; 0x3c
 80022d4:	af0a      	add	r7, sp, #40	; 0x28
 80022d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	e116      	b.n	8002510 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d106      	bne.n	8002302 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7fe ff1b 	bl	8001138 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2203      	movs	r2, #3
 8002306:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002312:	2b00      	cmp	r3, #0
 8002314:	d102      	bne.n	800231c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	2200      	movs	r2, #0
 800231a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f003 fd87 	bl	8005e34 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	687e      	ldr	r6, [r7, #4]
 800232e:	466d      	mov	r5, sp
 8002330:	f106 0410 	add.w	r4, r6, #16
 8002334:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002336:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002338:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800233a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800233c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002340:	e885 0003 	stmia.w	r5, {r0, r1}
 8002344:	1d33      	adds	r3, r6, #4
 8002346:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002348:	6838      	ldr	r0, [r7, #0]
 800234a:	f003 fd05 	bl	8005d58 <USB_CoreInit>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e0d7      	b.n	8002510 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f003 fd75 	bl	8005e56 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800236c:	2300      	movs	r3, #0
 800236e:	73fb      	strb	r3, [r7, #15]
 8002370:	e04a      	b.n	8002408 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002372:	7bfa      	ldrb	r2, [r7, #15]
 8002374:	6879      	ldr	r1, [r7, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	4413      	add	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	440b      	add	r3, r1
 8002380:	333d      	adds	r3, #61	; 0x3d
 8002382:	2201      	movs	r2, #1
 8002384:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002386:	7bfa      	ldrb	r2, [r7, #15]
 8002388:	6879      	ldr	r1, [r7, #4]
 800238a:	4613      	mov	r3, r2
 800238c:	00db      	lsls	r3, r3, #3
 800238e:	4413      	add	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	440b      	add	r3, r1
 8002394:	333c      	adds	r3, #60	; 0x3c
 8002396:	7bfa      	ldrb	r2, [r7, #15]
 8002398:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800239a:	7bfa      	ldrb	r2, [r7, #15]
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	b298      	uxth	r0, r3
 80023a0:	6879      	ldr	r1, [r7, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	00db      	lsls	r3, r3, #3
 80023a6:	4413      	add	r3, r2
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	440b      	add	r3, r1
 80023ac:	3344      	adds	r3, #68	; 0x44
 80023ae:	4602      	mov	r2, r0
 80023b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80023b2:	7bfa      	ldrb	r2, [r7, #15]
 80023b4:	6879      	ldr	r1, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3340      	adds	r3, #64	; 0x40
 80023c2:	2200      	movs	r2, #0
 80023c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80023c6:	7bfa      	ldrb	r2, [r7, #15]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	3348      	adds	r3, #72	; 0x48
 80023d6:	2200      	movs	r2, #0
 80023d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80023da:	7bfa      	ldrb	r2, [r7, #15]
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	4613      	mov	r3, r2
 80023e0:	00db      	lsls	r3, r3, #3
 80023e2:	4413      	add	r3, r2
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	440b      	add	r3, r1
 80023e8:	334c      	adds	r3, #76	; 0x4c
 80023ea:	2200      	movs	r2, #0
 80023ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80023ee:	7bfa      	ldrb	r2, [r7, #15]
 80023f0:	6879      	ldr	r1, [r7, #4]
 80023f2:	4613      	mov	r3, r2
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	3354      	adds	r3, #84	; 0x54
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	3301      	adds	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
 8002408:	7bfa      	ldrb	r2, [r7, #15]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	429a      	cmp	r2, r3
 8002410:	d3af      	bcc.n	8002372 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	e044      	b.n	80024a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002418:	7bfa      	ldrb	r2, [r7, #15]
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	4613      	mov	r3, r2
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	4413      	add	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	440b      	add	r3, r1
 8002426:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800242e:	7bfa      	ldrb	r2, [r7, #15]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002440:	7bfa      	ldrb	r2, [r7, #15]
 8002442:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002444:	7bfa      	ldrb	r2, [r7, #15]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4413      	add	r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800245a:	7bfa      	ldrb	r2, [r7, #15]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	00db      	lsls	r3, r3, #3
 8002462:	4413      	add	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002470:	7bfa      	ldrb	r2, [r7, #15]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4413      	add	r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002482:	2200      	movs	r2, #0
 8002484:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002486:	7bfa      	ldrb	r2, [r7, #15]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002498:	2200      	movs	r2, #0
 800249a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	3301      	adds	r3, #1
 80024a0:	73fb      	strb	r3, [r7, #15]
 80024a2:	7bfa      	ldrb	r2, [r7, #15]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d3b5      	bcc.n	8002418 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	603b      	str	r3, [r7, #0]
 80024b2:	687e      	ldr	r6, [r7, #4]
 80024b4:	466d      	mov	r5, sp
 80024b6:	f106 0410 	add.w	r4, r6, #16
 80024ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024c6:	e885 0003 	stmia.w	r5, {r0, r1}
 80024ca:	1d33      	adds	r3, r6, #4
 80024cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024ce:	6838      	ldr	r0, [r7, #0]
 80024d0:	f003 fd0e 	bl	8005ef0 <USB_DevInit>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2202      	movs	r2, #2
 80024de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e014      	b.n	8002510 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2201      	movs	r2, #1
 80024f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d102      	bne.n	8002504 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f80a 	bl	8002518 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f003 fecc 	bl	80062a6 <USB_DevDisconnect>

  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3714      	adds	r7, #20
 8002514:	46bd      	mov	sp, r7
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002518 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <HAL_PCDEx_ActivateLPM+0x44>)
 8002548:	4313      	orrs	r3, r2
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	10000003 	.word	0x10000003

08002560 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <HAL_PWREx_ConfigSupply+0xb0>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	2b06      	cmp	r3, #6
 8002572:	d00a      	beq.n	800258a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <HAL_PWREx_ConfigSupply+0xb0>)
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	429a      	cmp	r2, r3
 8002580:	d001      	beq.n	8002586 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e040      	b.n	8002608 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	e03e      	b.n	8002608 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800258a:	4b21      	ldr	r3, [pc, #132]	; (8002610 <HAL_PWREx_ConfigSupply+0xb0>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002592:	491f      	ldr	r1, [pc, #124]	; (8002610 <HAL_PWREx_ConfigSupply+0xb0>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4313      	orrs	r3, r2
 8002598:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800259a:	f7fe ff2f 	bl	80013fc <HAL_GetTick>
 800259e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025a0:	e009      	b.n	80025b6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025a2:	f7fe ff2b 	bl	80013fc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025b0:	d901      	bls.n	80025b6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e028      	b.n	8002608 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80025b6:	4b16      	ldr	r3, [pc, #88]	; (8002610 <HAL_PWREx_ConfigSupply+0xb0>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025c2:	d1ee      	bne.n	80025a2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b1e      	cmp	r3, #30
 80025c8:	d008      	beq.n	80025dc <HAL_PWREx_ConfigSupply+0x7c>
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b2e      	cmp	r3, #46	; 0x2e
 80025ce:	d005      	beq.n	80025dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b1d      	cmp	r3, #29
 80025d4:	d002      	beq.n	80025dc <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b2d      	cmp	r3, #45	; 0x2d
 80025da:	d114      	bne.n	8002606 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80025dc:	f7fe ff0e 	bl	80013fc <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025e2:	e009      	b.n	80025f8 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80025e4:	f7fe ff0a 	bl	80013fc <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025f2:	d901      	bls.n	80025f8 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e007      	b.n	8002608 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80025f8:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_PWREx_ConfigSupply+0xb0>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002604:	d1ee      	bne.n	80025e4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002606:	2300      	movs	r3, #0
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}
 8002610:	58024800 	.word	0x58024800

08002614 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002618:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	4a04      	ldr	r2, [pc, #16]	; (8002630 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800261e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002622:	60d3      	str	r3, [r2, #12]
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	58024800 	.word	0x58024800

08002634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d102      	bne.n	8002648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	f000 bc1d 	b.w	8002e82 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b00      	cmp	r3, #0
 8002652:	f000 8087 	beq.w	8002764 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002656:	4b99      	ldr	r3, [pc, #612]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002660:	4b96      	ldr	r3, [pc, #600]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002666:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002668:	2b10      	cmp	r3, #16
 800266a:	d007      	beq.n	800267c <HAL_RCC_OscConfig+0x48>
 800266c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800266e:	2b18      	cmp	r3, #24
 8002670:	d110      	bne.n	8002694 <HAL_RCC_OscConfig+0x60>
 8002672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002674:	f003 0303 	and.w	r3, r3, #3
 8002678:	2b02      	cmp	r3, #2
 800267a:	d10b      	bne.n	8002694 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800267c:	4b8f      	ldr	r3, [pc, #572]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d06c      	beq.n	8002762 <HAL_RCC_OscConfig+0x12e>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d168      	bne.n	8002762 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e3f6      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800269c:	d106      	bne.n	80026ac <HAL_RCC_OscConfig+0x78>
 800269e:	4b87      	ldr	r3, [pc, #540]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a86      	ldr	r2, [pc, #536]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026a8:	6013      	str	r3, [r2, #0]
 80026aa:	e02e      	b.n	800270a <HAL_RCC_OscConfig+0xd6>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <HAL_RCC_OscConfig+0x9a>
 80026b4:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a80      	ldr	r2, [pc, #512]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b7e      	ldr	r3, [pc, #504]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a7d      	ldr	r2, [pc, #500]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	e01d      	b.n	800270a <HAL_RCC_OscConfig+0xd6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026d6:	d10c      	bne.n	80026f2 <HAL_RCC_OscConfig+0xbe>
 80026d8:	4b78      	ldr	r3, [pc, #480]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a74      	ldr	r2, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ee:	6013      	str	r3, [r2, #0]
 80026f0:	e00b      	b.n	800270a <HAL_RCC_OscConfig+0xd6>
 80026f2:	4b72      	ldr	r3, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a71      	ldr	r2, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80026f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	4b6f      	ldr	r3, [pc, #444]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a6e      	ldr	r2, [pc, #440]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002704:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002708:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d013      	beq.n	800273a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002712:	f7fe fe73 	bl	80013fc <HAL_GetTick>
 8002716:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002718:	e008      	b.n	800272c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800271a:	f7fe fe6f 	bl	80013fc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	2b64      	cmp	r3, #100	; 0x64
 8002726:	d901      	bls.n	800272c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002728:	2303      	movs	r3, #3
 800272a:	e3aa      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800272c:	4b63      	ldr	r3, [pc, #396]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d0f0      	beq.n	800271a <HAL_RCC_OscConfig+0xe6>
 8002738:	e014      	b.n	8002764 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800273a:	f7fe fe5f 	bl	80013fc <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002740:	e008      	b.n	8002754 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002742:	f7fe fe5b 	bl	80013fc <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b64      	cmp	r3, #100	; 0x64
 800274e:	d901      	bls.n	8002754 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e396      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1f0      	bne.n	8002742 <HAL_RCC_OscConfig+0x10e>
 8002760:	e000      	b.n	8002764 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002762:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	f000 80cb 	beq.w	8002908 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002772:	4b52      	ldr	r3, [pc, #328]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800277a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800277c:	4b4f      	ldr	r3, [pc, #316]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 800277e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002780:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d007      	beq.n	8002798 <HAL_RCC_OscConfig+0x164>
 8002788:	6a3b      	ldr	r3, [r7, #32]
 800278a:	2b18      	cmp	r3, #24
 800278c:	d156      	bne.n	800283c <HAL_RCC_OscConfig+0x208>
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	f003 0303 	and.w	r3, r3, #3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d151      	bne.n	800283c <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002798:	4b48      	ldr	r3, [pc, #288]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_OscConfig+0x17c>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	68db      	ldr	r3, [r3, #12]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e368      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80027b0:	4b42      	ldr	r3, [pc, #264]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f023 0219 	bic.w	r2, r3, #25
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	493f      	ldr	r1, [pc, #252]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027c2:	f7fe fe1b 	bl	80013fc <HAL_GetTick>
 80027c6:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027ca:	f7fe fe17 	bl	80013fc <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e352      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027dc:	4b37      	ldr	r3, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e8:	f7fe fe38 	bl	800145c <HAL_GetREVID>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f241 0203 	movw	r2, #4099	; 0x1003
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d817      	bhi.n	8002826 <HAL_RCC_OscConfig+0x1f2>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b40      	cmp	r3, #64	; 0x40
 80027fc:	d108      	bne.n	8002810 <HAL_RCC_OscConfig+0x1dc>
 80027fe:	4b2f      	ldr	r3, [pc, #188]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002806:	4a2d      	ldr	r2, [pc, #180]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002808:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800280c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800280e:	e07b      	b.n	8002908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002810:	4b2a      	ldr	r3, [pc, #168]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	031b      	lsls	r3, r3, #12
 800281e:	4927      	ldr	r1, [pc, #156]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002820:	4313      	orrs	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002824:	e070      	b.n	8002908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	061b      	lsls	r3, r3, #24
 8002834:	4921      	ldr	r1, [pc, #132]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002836:	4313      	orrs	r3, r2
 8002838:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800283a:	e065      	b.n	8002908 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d048      	beq.n	80028d6 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f023 0219 	bic.w	r2, r3, #25
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	491a      	ldr	r1, [pc, #104]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002852:	4313      	orrs	r3, r2
 8002854:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002856:	f7fe fdd1 	bl	80013fc <HAL_GetTick>
 800285a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285c:	e008      	b.n	8002870 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800285e:	f7fe fdcd 	bl	80013fc <HAL_GetTick>
 8002862:	4602      	mov	r2, r0
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	2b02      	cmp	r3, #2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e308      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0f0      	beq.n	800285e <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287c:	f7fe fdee 	bl	800145c <HAL_GetREVID>
 8002880:	4603      	mov	r3, r0
 8002882:	f241 0203 	movw	r2, #4099	; 0x1003
 8002886:	4293      	cmp	r3, r2
 8002888:	d81a      	bhi.n	80028c0 <HAL_RCC_OscConfig+0x28c>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	2b40      	cmp	r3, #64	; 0x40
 8002890:	d108      	bne.n	80028a4 <HAL_RCC_OscConfig+0x270>
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 800289c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028a0:	6053      	str	r3, [r2, #4]
 80028a2:	e031      	b.n	8002908 <HAL_RCC_OscConfig+0x2d4>
 80028a4:	4b05      	ldr	r3, [pc, #20]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	031b      	lsls	r3, r3, #12
 80028b2:	4902      	ldr	r1, [pc, #8]	; (80028bc <HAL_RCC_OscConfig+0x288>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]
 80028b8:	e026      	b.n	8002908 <HAL_RCC_OscConfig+0x2d4>
 80028ba:	bf00      	nop
 80028bc:	58024400 	.word	0x58024400
 80028c0:	4b9a      	ldr	r3, [pc, #616]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	691b      	ldr	r3, [r3, #16]
 80028cc:	061b      	lsls	r3, r3, #24
 80028ce:	4997      	ldr	r1, [pc, #604]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80028d0:	4313      	orrs	r3, r2
 80028d2:	604b      	str	r3, [r1, #4]
 80028d4:	e018      	b.n	8002908 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028d6:	4b95      	ldr	r3, [pc, #596]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a94      	ldr	r2, [pc, #592]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	f023 0301 	bic.w	r3, r3, #1
 80028e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e2:	f7fe fd8b 	bl	80013fc <HAL_GetTick>
 80028e6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028ea:	f7fe fd87 	bl	80013fc <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e2c2      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80028fc:	4b8b      	ldr	r3, [pc, #556]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1f0      	bne.n	80028ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0310 	and.w	r3, r3, #16
 8002910:	2b00      	cmp	r3, #0
 8002912:	f000 80a9 	beq.w	8002a68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002916:	4b85      	ldr	r3, [pc, #532]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800291e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002920:	4b82      	ldr	r3, [pc, #520]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002924:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b08      	cmp	r3, #8
 800292a:	d007      	beq.n	800293c <HAL_RCC_OscConfig+0x308>
 800292c:	69bb      	ldr	r3, [r7, #24]
 800292e:	2b18      	cmp	r3, #24
 8002930:	d13a      	bne.n	80029a8 <HAL_RCC_OscConfig+0x374>
 8002932:	697b      	ldr	r3, [r7, #20]
 8002934:	f003 0303 	and.w	r3, r3, #3
 8002938:	2b01      	cmp	r3, #1
 800293a:	d135      	bne.n	80029a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800293c:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x320>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	69db      	ldr	r3, [r3, #28]
 800294c:	2b80      	cmp	r3, #128	; 0x80
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e296      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002954:	f7fe fd82 	bl	800145c <HAL_GetREVID>
 8002958:	4603      	mov	r3, r0
 800295a:	f241 0203 	movw	r2, #4099	; 0x1003
 800295e:	4293      	cmp	r3, r2
 8002960:	d817      	bhi.n	8002992 <HAL_RCC_OscConfig+0x35e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	2b20      	cmp	r3, #32
 8002968:	d108      	bne.n	800297c <HAL_RCC_OscConfig+0x348>
 800296a:	4b70      	ldr	r3, [pc, #448]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002972:	4a6e      	ldr	r2, [pc, #440]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002974:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002978:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800297a:	e075      	b.n	8002a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800297c:	4b6b      	ldr	r3, [pc, #428]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	069b      	lsls	r3, r3, #26
 800298a:	4968      	ldr	r1, [pc, #416]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 800298c:	4313      	orrs	r3, r2
 800298e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002990:	e06a      	b.n	8002a68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002992:	4b66      	ldr	r3, [pc, #408]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	061b      	lsls	r3, r3, #24
 80029a0:	4962      	ldr	r1, [pc, #392]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80029a2:	4313      	orrs	r3, r2
 80029a4:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a6:	e05f      	b.n	8002a68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69db      	ldr	r3, [r3, #28]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d042      	beq.n	8002a36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80029b0:	4b5e      	ldr	r3, [pc, #376]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a5d      	ldr	r2, [pc, #372]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029bc:	f7fe fd1e 	bl	80013fc <HAL_GetTick>
 80029c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029c2:	e008      	b.n	80029d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80029c4:	f7fe fd1a 	bl	80013fc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b02      	cmp	r3, #2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e255      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80029d6:	4b55      	ldr	r3, [pc, #340]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0f0      	beq.n	80029c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e2:	f7fe fd3b 	bl	800145c <HAL_GetREVID>
 80029e6:	4603      	mov	r3, r0
 80029e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d817      	bhi.n	8002a20 <HAL_RCC_OscConfig+0x3ec>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	2b20      	cmp	r3, #32
 80029f6:	d108      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3d6>
 80029f8:	4b4c      	ldr	r3, [pc, #304]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a00:	4a4a      	ldr	r2, [pc, #296]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a02:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a06:	6053      	str	r3, [r2, #4]
 8002a08:	e02e      	b.n	8002a68 <HAL_RCC_OscConfig+0x434>
 8002a0a:	4b48      	ldr	r3, [pc, #288]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a1b      	ldr	r3, [r3, #32]
 8002a16:	069b      	lsls	r3, r3, #26
 8002a18:	4944      	ldr	r1, [pc, #272]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	604b      	str	r3, [r1, #4]
 8002a1e:	e023      	b.n	8002a68 <HAL_RCC_OscConfig+0x434>
 8002a20:	4b42      	ldr	r3, [pc, #264]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	493f      	ldr	r1, [pc, #252]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	60cb      	str	r3, [r1, #12]
 8002a34:	e018      	b.n	8002a68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a36:	4b3d      	ldr	r3, [pc, #244]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a3c      	ldr	r2, [pc, #240]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fcdb 	bl	80013fc <HAL_GetTick>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8002a4a:	f7fe fcd7 	bl	80013fc <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e212      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002a5c:	4b33      	ldr	r3, [pc, #204]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d1f0      	bne.n	8002a4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0308 	and.w	r3, r3, #8
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d036      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d019      	beq.n	8002ab0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a7c:	4b2b      	ldr	r3, [pc, #172]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a80:	4a2a      	ldr	r2, [pc, #168]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe fcb8 	bl	80013fc <HAL_GetTick>
 8002a8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a8e:	e008      	b.n	8002aa2 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a90:	f7fe fcb4 	bl	80013fc <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e1ef      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002aa2:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d0f0      	beq.n	8002a90 <HAL_RCC_OscConfig+0x45c>
 8002aae:	e018      	b.n	8002ae2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ab0:	4b1e      	ldr	r3, [pc, #120]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	4a1d      	ldr	r2, [pc, #116]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe fc9e 	bl	80013fc <HAL_GetTick>
 8002ac0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ac2:	e008      	b.n	8002ad6 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac4:	f7fe fc9a 	bl	80013fc <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e1d5      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002ad6:	4b15      	ldr	r3, [pc, #84]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002ad8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d1f0      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0320 	and.w	r3, r3, #32
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d039      	beq.n	8002b62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d01c      	beq.n	8002b30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002af6:	4b0d      	ldr	r3, [pc, #52]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a0c      	ldr	r2, [pc, #48]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002afc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b02:	f7fe fc7b 	bl	80013fc <HAL_GetTick>
 8002b06:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b08:	e008      	b.n	8002b1c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b0a:	f7fe fc77 	bl	80013fc <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	d901      	bls.n	8002b1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e1b2      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d0f0      	beq.n	8002b0a <HAL_RCC_OscConfig+0x4d6>
 8002b28:	e01b      	b.n	8002b62 <HAL_RCC_OscConfig+0x52e>
 8002b2a:	bf00      	nop
 8002b2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b30:	4b9b      	ldr	r3, [pc, #620]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a9a      	ldr	r2, [pc, #616]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002b36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002b3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b3c:	f7fe fc5e 	bl	80013fc <HAL_GetTick>
 8002b40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8002b44:	f7fe fc5a 	bl	80013fc <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e195      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002b56:	4b92      	ldr	r3, [pc, #584]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d1f0      	bne.n	8002b44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0304 	and.w	r3, r3, #4
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f000 8081 	beq.w	8002c72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x770>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4a8b      	ldr	r2, [pc, #556]	; (8002da4 <HAL_RCC_OscConfig+0x770>)
 8002b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b7c:	f7fe fc3e 	bl	80013fc <HAL_GetTick>
 8002b80:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b82:	e008      	b.n	8002b96 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002b84:	f7fe fc3a 	bl	80013fc <HAL_GetTick>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	2b64      	cmp	r3, #100	; 0x64
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e175      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b96:	4b83      	ldr	r3, [pc, #524]	; (8002da4 <HAL_RCC_OscConfig+0x770>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d0f0      	beq.n	8002b84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	2b01      	cmp	r3, #1
 8002ba8:	d106      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x584>
 8002baa:	4b7d      	ldr	r3, [pc, #500]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bae:	4a7c      	ldr	r2, [pc, #496]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002bb6:	e02d      	b.n	8002c14 <HAL_RCC_OscConfig+0x5e0>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <HAL_RCC_OscConfig+0x5a6>
 8002bc0:	4b77      	ldr	r3, [pc, #476]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bc4:	4a76      	ldr	r2, [pc, #472]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bc6:	f023 0301 	bic.w	r3, r3, #1
 8002bca:	6713      	str	r3, [r2, #112]	; 0x70
 8002bcc:	4b74      	ldr	r3, [pc, #464]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd0:	4a73      	ldr	r2, [pc, #460]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd8:	e01c      	b.n	8002c14 <HAL_RCC_OscConfig+0x5e0>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b05      	cmp	r3, #5
 8002be0:	d10c      	bne.n	8002bfc <HAL_RCC_OscConfig+0x5c8>
 8002be2:	4b6f      	ldr	r3, [pc, #444]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be6:	4a6e      	ldr	r2, [pc, #440]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6713      	str	r3, [r2, #112]	; 0x70
 8002bee:	4b6c      	ldr	r3, [pc, #432]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a6b      	ldr	r2, [pc, #428]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8002bfa:	e00b      	b.n	8002c14 <HAL_RCC_OscConfig+0x5e0>
 8002bfc:	4b68      	ldr	r3, [pc, #416]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c00:	4a67      	ldr	r2, [pc, #412]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c02:	f023 0301 	bic.w	r3, r3, #1
 8002c06:	6713      	str	r3, [r2, #112]	; 0x70
 8002c08:	4b65      	ldr	r3, [pc, #404]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c0c:	4a64      	ldr	r2, [pc, #400]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c0e:	f023 0304 	bic.w	r3, r3, #4
 8002c12:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d015      	beq.n	8002c48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c1c:	f7fe fbee 	bl	80013fc <HAL_GetTick>
 8002c20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c22:	e00a      	b.n	8002c3a <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c24:	f7fe fbea 	bl	80013fc <HAL_GetTick>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d901      	bls.n	8002c3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c36:	2303      	movs	r3, #3
 8002c38:	e123      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3a:	4b59      	ldr	r3, [pc, #356]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d0ee      	beq.n	8002c24 <HAL_RCC_OscConfig+0x5f0>
 8002c46:	e014      	b.n	8002c72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c48:	f7fe fbd8 	bl	80013fc <HAL_GetTick>
 8002c4c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c4e:	e00a      	b.n	8002c66 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c50:	f7fe fbd4 	bl	80013fc <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d901      	bls.n	8002c66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002c62:	2303      	movs	r3, #3
 8002c64:	e10d      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c66:	4b4e      	ldr	r3, [pc, #312]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d1ee      	bne.n	8002c50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 8102 	beq.w	8002e80 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002c7c:	4b48      	ldr	r3, [pc, #288]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c7e:	691b      	ldr	r3, [r3, #16]
 8002c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c84:	2b18      	cmp	r3, #24
 8002c86:	f000 80bd 	beq.w	8002e04 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	f040 809e 	bne.w	8002dd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c94:	4b42      	ldr	r3, [pc, #264]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a41      	ldr	r2, [pc, #260]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7fe fbac 	bl	80013fc <HAL_GetTick>
 8002ca4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ca8:	f7fe fba8 	bl	80013fc <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0e3      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cba:	4b39      	ldr	r3, [pc, #228]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cc6:	4b36      	ldr	r3, [pc, #216]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cca:	4b37      	ldr	r3, [pc, #220]	; (8002da8 <HAL_RCC_OscConfig+0x774>)
 8002ccc:	4013      	ands	r3, r2
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002cd2:	687a      	ldr	r2, [r7, #4]
 8002cd4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002cd6:	0112      	lsls	r2, r2, #4
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	4931      	ldr	r1, [pc, #196]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	628b      	str	r3, [r1, #40]	; 0x28
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	025b      	lsls	r3, r3, #9
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	431a      	orrs	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	041b      	lsls	r3, r3, #16
 8002cfe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d02:	431a      	orrs	r2, r3
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	3b01      	subs	r3, #1
 8002d0a:	061b      	lsls	r3, r3, #24
 8002d0c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d10:	4923      	ldr	r1, [pc, #140]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d1c:	f023 0301 	bic.w	r3, r3, #1
 8002d20:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d26:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_RCC_OscConfig+0x778>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d2e:	00d2      	lsls	r2, r2, #3
 8002d30:	491b      	ldr	r1, [pc, #108]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d36:	4b1a      	ldr	r3, [pc, #104]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d3a:	f023 020c 	bic.w	r2, r3, #12
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	4917      	ldr	r1, [pc, #92]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4c:	f023 0202 	bic.w	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d54:	4912      	ldr	r1, [pc, #72]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	4a10      	ldr	r2, [pc, #64]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6a:	4a0d      	ldr	r2, [pc, #52]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d70:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d76:	4a0a      	ldr	r2, [pc, #40]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4a07      	ldr	r2, [pc, #28]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	f043 0301 	orr.w	r3, r3, #1
 8002d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d8a:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a04      	ldr	r2, [pc, #16]	; (8002da0 <HAL_RCC_OscConfig+0x76c>)
 8002d90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d96:	f7fe fb31 	bl	80013fc <HAL_GetTick>
 8002d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d9c:	e011      	b.n	8002dc2 <HAL_RCC_OscConfig+0x78e>
 8002d9e:	bf00      	nop
 8002da0:	58024400 	.word	0x58024400
 8002da4:	58024800 	.word	0x58024800
 8002da8:	fffffc0c 	.word	0xfffffc0c
 8002dac:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe fb24 	bl	80013fc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e05f      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dc2:	4b32      	ldr	r3, [pc, #200]	; (8002e8c <HAL_RCC_OscConfig+0x858>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0x77c>
 8002dce:	e057      	b.n	8002e80 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd0:	4b2e      	ldr	r3, [pc, #184]	; (8002e8c <HAL_RCC_OscConfig+0x858>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a2d      	ldr	r2, [pc, #180]	; (8002e8c <HAL_RCC_OscConfig+0x858>)
 8002dd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ddc:	f7fe fb0e 	bl	80013fc <HAL_GetTick>
 8002de0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe fb0a 	bl	80013fc <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e045      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002df6:	4b25      	ldr	r3, [pc, #148]	; (8002e8c <HAL_RCC_OscConfig+0x858>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1f0      	bne.n	8002de4 <HAL_RCC_OscConfig+0x7b0>
 8002e02:	e03d      	b.n	8002e80 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e04:	4b21      	ldr	r3, [pc, #132]	; (8002e8c <HAL_RCC_OscConfig+0x858>)
 8002e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e0a:	4b20      	ldr	r3, [pc, #128]	; (8002e8c <HAL_RCC_OscConfig+0x858>)
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e0e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d031      	beq.n	8002e7c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f003 0203 	and.w	r2, r3, #3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d12a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	091b      	lsrs	r3, r3, #4
 8002e2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d122      	bne.n	8002e7c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e40:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d11a      	bne.n	8002e7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	0a5b      	lsrs	r3, r3, #9
 8002e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e52:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d111      	bne.n	8002e7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	0c1b      	lsrs	r3, r3, #16
 8002e5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d108      	bne.n	8002e7c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	0e1b      	lsrs	r3, r3, #24
 8002e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d001      	beq.n	8002e80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3730      	adds	r7, #48	; 0x30
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	58024400 	.word	0x58024400

08002e90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d101      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e19c      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ea4:	4b8a      	ldr	r3, [pc, #552]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 030f 	and.w	r3, r3, #15
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d910      	bls.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eb2:	4b87      	ldr	r3, [pc, #540]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f023 020f 	bic.w	r2, r3, #15
 8002eba:	4985      	ldr	r1, [pc, #532]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ec2:	4b83      	ldr	r3, [pc, #524]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 030f 	and.w	r3, r3, #15
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d001      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e184      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d010      	beq.n	8002f02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	4b7b      	ldr	r3, [pc, #492]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d908      	bls.n	8002f02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ef0:	4b78      	ldr	r3, [pc, #480]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002ef2:	699b      	ldr	r3, [r3, #24]
 8002ef4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	4975      	ldr	r1, [pc, #468]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d010      	beq.n	8002f30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	695a      	ldr	r2, [r3, #20]
 8002f12:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f14:	69db      	ldr	r3, [r3, #28]
 8002f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d908      	bls.n	8002f30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f1e:	4b6d      	ldr	r3, [pc, #436]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f20:	69db      	ldr	r3, [r3, #28]
 8002f22:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	695b      	ldr	r3, [r3, #20]
 8002f2a:	496a      	ldr	r1, [pc, #424]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0310 	and.w	r3, r3, #16
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d010      	beq.n	8002f5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	699a      	ldr	r2, [r3, #24]
 8002f40:	4b64      	ldr	r3, [pc, #400]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d908      	bls.n	8002f5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f4c:	4b61      	ldr	r3, [pc, #388]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	495e      	ldr	r1, [pc, #376]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0320 	and.w	r3, r3, #32
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d010      	beq.n	8002f8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d908      	bls.n	8002f8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002f7a:	4b56      	ldr	r3, [pc, #344]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f7c:	6a1b      	ldr	r3, [r3, #32]
 8002f7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69db      	ldr	r3, [r3, #28]
 8002f86:	4953      	ldr	r1, [pc, #332]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d010      	beq.n	8002fba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68da      	ldr	r2, [r3, #12]
 8002f9c:	4b4d      	ldr	r3, [pc, #308]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	f003 030f 	and.w	r3, r3, #15
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d908      	bls.n	8002fba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f023 020f 	bic.w	r2, r3, #15
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4947      	ldr	r1, [pc, #284]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d055      	beq.n	8003072 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002fc6:	4b43      	ldr	r3, [pc, #268]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002fc8:	699b      	ldr	r3, [r3, #24]
 8002fca:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	4940      	ldr	r1, [pc, #256]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b02      	cmp	r3, #2
 8002fde:	d107      	bne.n	8002ff0 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002fe0:	4b3c      	ldr	r3, [pc, #240]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d121      	bne.n	8003030 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	e0f6      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d107      	bne.n	8003008 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ff8:	4b36      	ldr	r3, [pc, #216]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d115      	bne.n	8003030 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e0ea      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d107      	bne.n	8003020 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e0de      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003020:	4b2c      	ldr	r3, [pc, #176]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d101      	bne.n	8003030 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e0d6      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003030:	4b28      	ldr	r3, [pc, #160]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	f023 0207 	bic.w	r2, r3, #7
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	4925      	ldr	r1, [pc, #148]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 800303e:	4313      	orrs	r3, r2
 8003040:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003042:	f7fe f9db 	bl	80013fc <HAL_GetTick>
 8003046:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003048:	e00a      	b.n	8003060 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800304a:	f7fe f9d7 	bl	80013fc <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	697b      	ldr	r3, [r7, #20]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	f241 3288 	movw	r2, #5000	; 0x1388
 8003058:	4293      	cmp	r3, r2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0be      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003060:	4b1c      	ldr	r3, [pc, #112]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	00db      	lsls	r3, r3, #3
 800306e:	429a      	cmp	r2, r3
 8003070:	d1eb      	bne.n	800304a <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d010      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003084:	699b      	ldr	r3, [r3, #24]
 8003086:	f003 030f 	and.w	r3, r3, #15
 800308a:	429a      	cmp	r2, r3
 800308c:	d208      	bcs.n	80030a0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800308e:	4b11      	ldr	r3, [pc, #68]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	f023 020f 	bic.w	r2, r3, #15
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	490e      	ldr	r1, [pc, #56]	; (80030d4 <HAL_RCC_ClockConfig+0x244>)
 800309c:	4313      	orrs	r3, r2
 800309e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a0:	4b0b      	ldr	r3, [pc, #44]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 030f 	and.w	r3, r3, #15
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d214      	bcs.n	80030d8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ae:	4b08      	ldr	r3, [pc, #32]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f023 020f 	bic.w	r2, r3, #15
 80030b6:	4906      	ldr	r1, [pc, #24]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030be:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <HAL_RCC_ClockConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	683a      	ldr	r2, [r7, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d005      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e086      	b.n	80031de <HAL_RCC_ClockConfig+0x34e>
 80030d0:	52002000 	.word	0x52002000
 80030d4:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d010      	beq.n	8003106 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691a      	ldr	r2, [r3, #16]
 80030e8:	4b3f      	ldr	r3, [pc, #252]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d208      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80030f4:	4b3c      	ldr	r3, [pc, #240]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	691b      	ldr	r3, [r3, #16]
 8003100:	4939      	ldr	r1, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003102:	4313      	orrs	r3, r2
 8003104:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d010      	beq.n	8003134 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695a      	ldr	r2, [r3, #20]
 8003116:	4b34      	ldr	r3, [pc, #208]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003118:	69db      	ldr	r3, [r3, #28]
 800311a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800311e:	429a      	cmp	r2, r3
 8003120:	d208      	bcs.n	8003134 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003122:	4b31      	ldr	r3, [pc, #196]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	492e      	ldr	r1, [pc, #184]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003130:	4313      	orrs	r3, r2
 8003132:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0310 	and.w	r3, r3, #16
 800313c:	2b00      	cmp	r3, #0
 800313e:	d010      	beq.n	8003162 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	699a      	ldr	r2, [r3, #24]
 8003144:	4b28      	ldr	r3, [pc, #160]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003146:	69db      	ldr	r3, [r3, #28]
 8003148:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800314c:	429a      	cmp	r2, r3
 800314e:	d208      	bcs.n	8003162 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003150:	4b25      	ldr	r3, [pc, #148]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003152:	69db      	ldr	r3, [r3, #28]
 8003154:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	699b      	ldr	r3, [r3, #24]
 800315c:	4922      	ldr	r1, [pc, #136]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 800315e:	4313      	orrs	r3, r2
 8003160:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d010      	beq.n	8003190 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69da      	ldr	r2, [r3, #28]
 8003172:	4b1d      	ldr	r3, [pc, #116]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003174:	6a1b      	ldr	r3, [r3, #32]
 8003176:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800317a:	429a      	cmp	r2, r3
 800317c:	d208      	bcs.n	8003190 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800317e:	4b1a      	ldr	r3, [pc, #104]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003180:	6a1b      	ldr	r3, [r3, #32]
 8003182:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69db      	ldr	r3, [r3, #28]
 800318a:	4917      	ldr	r1, [pc, #92]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 800318c:	4313      	orrs	r3, r2
 800318e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003190:	f000 f834 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003194:	4602      	mov	r2, r0
 8003196:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 8003198:	699b      	ldr	r3, [r3, #24]
 800319a:	0a1b      	lsrs	r3, r3, #8
 800319c:	f003 030f 	and.w	r3, r3, #15
 80031a0:	4912      	ldr	r1, [pc, #72]	; (80031ec <HAL_RCC_ClockConfig+0x35c>)
 80031a2:	5ccb      	ldrb	r3, [r1, r3]
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
 80031ac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x358>)
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	4a0d      	ldr	r2, [pc, #52]	; (80031ec <HAL_RCC_ClockConfig+0x35c>)
 80031b8:	5cd3      	ldrb	r3, [r2, r3]
 80031ba:	f003 031f 	and.w	r3, r3, #31
 80031be:	693a      	ldr	r2, [r7, #16]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
 80031c4:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_RCC_ClockConfig+0x360>)
 80031c6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80031c8:	4a0a      	ldr	r2, [pc, #40]	; (80031f4 <HAL_RCC_ClockConfig+0x364>)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_RCC_ClockConfig+0x368>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe f8c8 	bl	8001368 <HAL_InitTick>
 80031d8:	4603      	mov	r3, r0
 80031da:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	58024400 	.word	0x58024400
 80031ec:	080063dc 	.word	0x080063dc
 80031f0:	24000004 	.word	0x24000004
 80031f4:	24000000 	.word	0x24000000
 80031f8:	24000008 	.word	0x24000008

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003202:	4bb3      	ldr	r3, [pc, #716]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800320a:	2b18      	cmp	r3, #24
 800320c:	f200 8155 	bhi.w	80034ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003210:	a201      	add	r2, pc, #4	; (adr r2, 8003218 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	0800327d 	.word	0x0800327d
 800321c:	080034bb 	.word	0x080034bb
 8003220:	080034bb 	.word	0x080034bb
 8003224:	080034bb 	.word	0x080034bb
 8003228:	080034bb 	.word	0x080034bb
 800322c:	080034bb 	.word	0x080034bb
 8003230:	080034bb 	.word	0x080034bb
 8003234:	080034bb 	.word	0x080034bb
 8003238:	080032a3 	.word	0x080032a3
 800323c:	080034bb 	.word	0x080034bb
 8003240:	080034bb 	.word	0x080034bb
 8003244:	080034bb 	.word	0x080034bb
 8003248:	080034bb 	.word	0x080034bb
 800324c:	080034bb 	.word	0x080034bb
 8003250:	080034bb 	.word	0x080034bb
 8003254:	080034bb 	.word	0x080034bb
 8003258:	080032a9 	.word	0x080032a9
 800325c:	080034bb 	.word	0x080034bb
 8003260:	080034bb 	.word	0x080034bb
 8003264:	080034bb 	.word	0x080034bb
 8003268:	080034bb 	.word	0x080034bb
 800326c:	080034bb 	.word	0x080034bb
 8003270:	080034bb 	.word	0x080034bb
 8003274:	080034bb 	.word	0x080034bb
 8003278:	080032af 	.word	0x080032af
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800327c:	4b94      	ldr	r3, [pc, #592]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0320 	and.w	r3, r3, #32
 8003284:	2b00      	cmp	r3, #0
 8003286:	d009      	beq.n	800329c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003288:	4b91      	ldr	r3, [pc, #580]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	08db      	lsrs	r3, r3, #3
 800328e:	f003 0303 	and.w	r3, r3, #3
 8003292:	4a90      	ldr	r2, [pc, #576]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003294:	fa22 f303 	lsr.w	r3, r2, r3
 8003298:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800329a:	e111      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800329c:	4b8d      	ldr	r3, [pc, #564]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800329e:	61bb      	str	r3, [r7, #24]
    break;
 80032a0:	e10e      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80032a2:	4b8d      	ldr	r3, [pc, #564]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032a4:	61bb      	str	r3, [r7, #24]
    break;
 80032a6:	e10b      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80032a8:	4b8c      	ldr	r3, [pc, #560]	; (80034dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80032aa:	61bb      	str	r3, [r7, #24]
    break;
 80032ac:	e108      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80032ae:	4b88      	ldr	r3, [pc, #544]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80032b8:	4b85      	ldr	r3, [pc, #532]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	091b      	lsrs	r3, r3, #4
 80032be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c2:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80032c4:	4b82      	ldr	r3, [pc, #520]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80032ce:	4b80      	ldr	r3, [pc, #512]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d2:	08db      	lsrs	r3, r3, #3
 80032d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80032d8:	68fa      	ldr	r2, [r7, #12]
 80032da:	fb02 f303 	mul.w	r3, r2, r3
 80032de:	ee07 3a90 	vmov	s15, r3
 80032e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032e6:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	f000 80e1 	beq.w	80034b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	f000 8083 	beq.w	8003400 <HAL_RCC_GetSysClockFreq+0x204>
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	f200 80a1 	bhi.w	8003444 <HAL_RCC_GetSysClockFreq+0x248>
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_RCC_GetSysClockFreq+0x114>
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	2b01      	cmp	r3, #1
 800330c:	d056      	beq.n	80033bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800330e:	e099      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003310:	4b6f      	ldr	r3, [pc, #444]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0320 	and.w	r3, r3, #32
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02d      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800331c:	4b6c      	ldr	r3, [pc, #432]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	08db      	lsrs	r3, r3, #3
 8003322:	f003 0303 	and.w	r3, r3, #3
 8003326:	4a6b      	ldr	r2, [pc, #428]	; (80034d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003328:	fa22 f303 	lsr.w	r3, r2, r3
 800332c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	ee07 3a90 	vmov	s15, r3
 8003334:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003346:	4b62      	ldr	r3, [pc, #392]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334e:	ee07 3a90 	vmov	s15, r3
 8003352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003356:	ed97 6a02 	vldr	s12, [r7, #8]
 800335a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800335e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003366:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800336a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800336e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003372:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003376:	e087      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	ee07 3a90 	vmov	s15, r3
 800337e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003382:	eddf 6a58 	vldr	s13, [pc, #352]	; 80034e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800338a:	4b51      	ldr	r3, [pc, #324]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003392:	ee07 3a90 	vmov	s15, r3
 8003396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800339a:	ed97 6a02 	vldr	s12, [r7, #8]
 800339e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033ba:	e065      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	ee07 3a90 	vmov	s15, r3
 80033c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033c6:	eddf 6a48 	vldr	s13, [pc, #288]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033ce:	4b40      	ldr	r3, [pc, #256]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033d6:	ee07 3a90 	vmov	s15, r3
 80033da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033de:	ed97 6a02 	vldr	s12, [r7, #8]
 80033e2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80033e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80033fe:	e043      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	ee07 3a90 	vmov	s15, r3
 8003406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800340a:	eddf 6a38 	vldr	s13, [pc, #224]	; 80034ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800340e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003412:	4b2f      	ldr	r3, [pc, #188]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800341a:	ee07 3a90 	vmov	s15, r3
 800341e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003422:	ed97 6a02 	vldr	s12, [r7, #8]
 8003426:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800342a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800342e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800343a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800343e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003442:	e021      	b.n	8003488 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	ee07 3a90 	vmov	s15, r3
 800344a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800344e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80034e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003456:	4b1e      	ldr	r3, [pc, #120]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800345a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800345e:	ee07 3a90 	vmov	s15, r3
 8003462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003466:	ed97 6a02 	vldr	s12, [r7, #8]
 800346a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80034e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800346e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800347a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800347e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003486:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003488:	4b11      	ldr	r3, [pc, #68]	; (80034d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348c:	0a5b      	lsrs	r3, r3, #9
 800348e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003492:	3301      	adds	r3, #1
 8003494:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	ee07 3a90 	vmov	s15, r3
 800349c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80034a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80034a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034ac:	ee17 3a90 	vmov	r3, s15
 80034b0:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80034b2:	e005      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80034b4:	2300      	movs	r3, #0
 80034b6:	61bb      	str	r3, [r7, #24]
    break;
 80034b8:	e002      	b.n	80034c0 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80034ba:	4b07      	ldr	r3, [pc, #28]	; (80034d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80034bc:	61bb      	str	r3, [r7, #24]
    break;
 80034be:	bf00      	nop
  }

  return sysclockfreq;
 80034c0:	69bb      	ldr	r3, [r7, #24]
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3724      	adds	r7, #36	; 0x24
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
 80034ce:	bf00      	nop
 80034d0:	58024400 	.word	0x58024400
 80034d4:	03d09000 	.word	0x03d09000
 80034d8:	003d0900 	.word	0x003d0900
 80034dc:	007a1200 	.word	0x007a1200
 80034e0:	46000000 	.word	0x46000000
 80034e4:	4c742400 	.word	0x4c742400
 80034e8:	4a742400 	.word	0x4a742400
 80034ec:	4af42400 	.word	0x4af42400

080034f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80034f6:	f7ff fe81 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 80034fa:	4602      	mov	r2, r0
 80034fc:	4b10      	ldr	r3, [pc, #64]	; (8003540 <HAL_RCC_GetHCLKFreq+0x50>)
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	0a1b      	lsrs	r3, r3, #8
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	490f      	ldr	r1, [pc, #60]	; (8003544 <HAL_RCC_GetHCLKFreq+0x54>)
 8003508:	5ccb      	ldrb	r3, [r1, r3]
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	fa22 f303 	lsr.w	r3, r2, r3
 8003512:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_RCC_GetHCLKFreq+0x50>)
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	f003 030f 	and.w	r3, r3, #15
 800351c:	4a09      	ldr	r2, [pc, #36]	; (8003544 <HAL_RCC_GetHCLKFreq+0x54>)
 800351e:	5cd3      	ldrb	r3, [r2, r3]
 8003520:	f003 031f 	and.w	r3, r3, #31
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	fa22 f303 	lsr.w	r3, r2, r3
 800352a:	4a07      	ldr	r2, [pc, #28]	; (8003548 <HAL_RCC_GetHCLKFreq+0x58>)
 800352c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800352e:	4a07      	ldr	r2, [pc, #28]	; (800354c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003534:	4b04      	ldr	r3, [pc, #16]	; (8003548 <HAL_RCC_GetHCLKFreq+0x58>)
 8003536:	681b      	ldr	r3, [r3, #0]
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	58024400 	.word	0x58024400
 8003544:	080063dc 	.word	0x080063dc
 8003548:	24000004 	.word	0x24000004
 800354c:	24000000 	.word	0x24000000

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003554:	f7ff ffcc 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b06      	ldr	r3, [pc, #24]	; (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 800355c:	69db      	ldr	r3, [r3, #28]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4904      	ldr	r1, [pc, #16]	; (8003578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003570:	4618      	mov	r0, r3
 8003572:	bd80      	pop	{r7, pc}
 8003574:	58024400 	.word	0x58024400
 8003578:	080063dc 	.word	0x080063dc

0800357c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003580:	f7ff ffb6 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 8003584:	4602      	mov	r2, r0
 8003586:	4b06      	ldr	r3, [pc, #24]	; (80035a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003588:	69db      	ldr	r3, [r3, #28]
 800358a:	0a1b      	lsrs	r3, r3, #8
 800358c:	f003 0307 	and.w	r3, r3, #7
 8003590:	4904      	ldr	r1, [pc, #16]	; (80035a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	f003 031f 	and.w	r3, r3, #31
 8003598:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800359c:	4618      	mov	r0, r3
 800359e:	bd80      	pop	{r7, pc}
 80035a0:	58024400 	.word	0x58024400
 80035a4:	080063dc 	.word	0x080063dc

080035a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b086      	sub	sp, #24
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035b0:	2300      	movs	r3, #0
 80035b2:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035b4:	2300      	movs	r3, #0
 80035b6:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d03f      	beq.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035cc:	d02a      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80035ce:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035d2:	d824      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035d8:	d018      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80035da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035de:	d81e      	bhi.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80035e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80035e8:	d007      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80035ea:	e018      	b.n	800361e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035ec:	4ba3      	ldr	r3, [pc, #652]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f0:	4aa2      	ldr	r2, [pc, #648]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80035f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80035f8:	e015      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3304      	adds	r3, #4
 80035fe:	2102      	movs	r1, #2
 8003600:	4618      	mov	r0, r3
 8003602:	f001 f9d5 	bl	80049b0 <RCCEx_PLL2_Config>
 8003606:	4603      	mov	r3, r0
 8003608:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800360a:	e00c      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	3324      	adds	r3, #36	; 0x24
 8003610:	2102      	movs	r1, #2
 8003612:	4618      	mov	r0, r3
 8003614:	f001 fa7e 	bl	8004b14 <RCCEx_PLL3_Config>
 8003618:	4603      	mov	r3, r0
 800361a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800361c:	e003      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	75fb      	strb	r3, [r7, #23]
      break;
 8003622:	e000      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003624:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003626:	7dfb      	ldrb	r3, [r7, #23]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d109      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800362c:	4b93      	ldr	r3, [pc, #588]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800362e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003638:	4990      	ldr	r1, [pc, #576]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	650b      	str	r3, [r1, #80]	; 0x50
 800363e:	e001      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7dfb      	ldrb	r3, [r7, #23]
 8003642:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03d      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003654:	2b04      	cmp	r3, #4
 8003656:	d826      	bhi.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003658:	a201      	add	r2, pc, #4	; (adr r2, 8003660 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800365a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800365e:	bf00      	nop
 8003660:	08003675 	.word	0x08003675
 8003664:	08003683 	.word	0x08003683
 8003668:	08003695 	.word	0x08003695
 800366c:	080036ad 	.word	0x080036ad
 8003670:	080036ad 	.word	0x080036ad
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003674:	4b81      	ldr	r3, [pc, #516]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003678:	4a80      	ldr	r2, [pc, #512]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800367a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800367e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003680:	e015      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3304      	adds	r3, #4
 8003686:	2100      	movs	r1, #0
 8003688:	4618      	mov	r0, r3
 800368a:	f001 f991 	bl	80049b0 <RCCEx_PLL2_Config>
 800368e:	4603      	mov	r3, r0
 8003690:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003692:	e00c      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	3324      	adds	r3, #36	; 0x24
 8003698:	2100      	movs	r1, #0
 800369a:	4618      	mov	r0, r3
 800369c:	f001 fa3a 	bl	8004b14 <RCCEx_PLL3_Config>
 80036a0:	4603      	mov	r3, r0
 80036a2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80036a4:	e003      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	75fb      	strb	r3, [r7, #23]
      break;
 80036aa:	e000      	b.n	80036ae <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80036ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80036ae:	7dfb      	ldrb	r3, [r7, #23]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036b4:	4b71      	ldr	r3, [pc, #452]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036b8:	f023 0207 	bic.w	r2, r3, #7
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	496e      	ldr	r1, [pc, #440]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	650b      	str	r3, [r1, #80]	; 0x50
 80036c6:	e001      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036c8:	7dfb      	ldrb	r3, [r7, #23]
 80036ca:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d042      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e0:	d02b      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x192>
 80036e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e6:	d825      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036e8:	2bc0      	cmp	r3, #192	; 0xc0
 80036ea:	d028      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x196>
 80036ec:	2bc0      	cmp	r3, #192	; 0xc0
 80036ee:	d821      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036f0:	2b80      	cmp	r3, #128	; 0x80
 80036f2:	d016      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80036f4:	2b80      	cmp	r3, #128	; 0x80
 80036f6:	d81d      	bhi.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d002      	beq.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d007      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8003700:	e018      	b.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003702:	4b5e      	ldr	r3, [pc, #376]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003706:	4a5d      	ldr	r2, [pc, #372]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800370e:	e017      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	3304      	adds	r3, #4
 8003714:	2100      	movs	r1, #0
 8003716:	4618      	mov	r0, r3
 8003718:	f001 f94a 	bl	80049b0 <RCCEx_PLL2_Config>
 800371c:	4603      	mov	r3, r0
 800371e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003720:	e00e      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	3324      	adds	r3, #36	; 0x24
 8003726:	2100      	movs	r1, #0
 8003728:	4618      	mov	r0, r3
 800372a:	f001 f9f3 	bl	8004b14 <RCCEx_PLL3_Config>
 800372e:	4603      	mov	r3, r0
 8003730:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8003732:	e005      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	75fb      	strb	r3, [r7, #23]
      break;
 8003738:	e002      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800373a:	bf00      	nop
 800373c:	e000      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800373e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003740:	7dfb      	ldrb	r3, [r7, #23]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d109      	bne.n	800375a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003746:	4b4d      	ldr	r3, [pc, #308]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800374a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	494a      	ldr	r1, [pc, #296]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003754:	4313      	orrs	r3, r2
 8003756:	650b      	str	r3, [r1, #80]	; 0x50
 8003758:	e001      	b.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800375a:	7dfb      	ldrb	r3, [r7, #23]
 800375c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003766:	2b00      	cmp	r3, #0
 8003768:	d049      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003770:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003774:	d030      	beq.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8003776:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800377a:	d82a      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800377c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003780:	d02c      	beq.n	80037dc <HAL_RCCEx_PeriphCLKConfig+0x234>
 8003782:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003786:	d824      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003788:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800378c:	d018      	beq.n	80037c0 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800378e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003792:	d81e      	bhi.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8003794:	2b00      	cmp	r3, #0
 8003796:	d003      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8003798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800379c:	d007      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800379e:	e018      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a0:	4b36      	ldr	r3, [pc, #216]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	4a35      	ldr	r2, [pc, #212]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037aa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037ac:	e017      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	3304      	adds	r3, #4
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f8fb 	bl	80049b0 <RCCEx_PLL2_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80037be:	e00e      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	3324      	adds	r3, #36	; 0x24
 80037c4:	2100      	movs	r1, #0
 80037c6:	4618      	mov	r0, r3
 80037c8:	f001 f9a4 	bl	8004b14 <RCCEx_PLL3_Config>
 80037cc:	4603      	mov	r3, r0
 80037ce:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80037d0:	e005      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	75fb      	strb	r3, [r7, #23]
      break;
 80037d6:	e002      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80037dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80037de:	7dfb      	ldrb	r3, [r7, #23]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d10a      	bne.n	80037fa <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e8:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80037f2:	4922      	ldr	r1, [pc, #136]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	658b      	str	r3, [r1, #88]	; 0x58
 80037f8:	e001      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
 80037fc:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003806:	2b00      	cmp	r3, #0
 8003808:	d04b      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003810:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003814:	d030      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8003816:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800381a:	d82a      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800381c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003820:	d02e      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8003822:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003826:	d824      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800382c:	d018      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800382e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003832:	d81e      	bhi.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800383c:	d007      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800383e:	e018      	b.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003840:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003844:	4a0d      	ldr	r2, [pc, #52]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8003846:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800384a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800384c:	e019      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	2100      	movs	r1, #0
 8003854:	4618      	mov	r0, r3
 8003856:	f001 f8ab 	bl	80049b0 <RCCEx_PLL2_Config>
 800385a:	4603      	mov	r3, r0
 800385c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800385e:	e010      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	3324      	adds	r3, #36	; 0x24
 8003864:	2100      	movs	r1, #0
 8003866:	4618      	mov	r0, r3
 8003868:	f001 f954 	bl	8004b14 <RCCEx_PLL3_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003870:	e007      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
      break;
 8003876:	e004      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8003878:	bf00      	nop
 800387a:	e002      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800387c:	58024400 	.word	0x58024400
      break;
 8003880:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003882:	7dfb      	ldrb	r3, [r7, #23]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d10a      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003888:	4b99      	ldr	r3, [pc, #612]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800388a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800388c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003896:	4996      	ldr	r1, [pc, #600]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003898:	4313      	orrs	r3, r2
 800389a:	658b      	str	r3, [r1, #88]	; 0x58
 800389c:	e001      	b.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800389e:	7dfb      	ldrb	r3, [r7, #23]
 80038a0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d032      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b2:	2b30      	cmp	r3, #48	; 0x30
 80038b4:	d01c      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80038b6:	2b30      	cmp	r3, #48	; 0x30
 80038b8:	d817      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038ba:	2b20      	cmp	r3, #32
 80038bc:	d00c      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x330>
 80038be:	2b20      	cmp	r3, #32
 80038c0:	d813      	bhi.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x342>
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d016      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80038c6:	2b10      	cmp	r3, #16
 80038c8:	d10f      	bne.n	80038ea <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ca:	4b89      	ldr	r3, [pc, #548]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ce:	4a88      	ldr	r2, [pc, #544]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038d6:	e00e      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	3304      	adds	r3, #4
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f001 f866 	bl	80049b0 <RCCEx_PLL2_Config>
 80038e4:	4603      	mov	r3, r0
 80038e6:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80038e8:	e005      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	75fb      	strb	r3, [r7, #23]
      break;
 80038ee:	e002      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80038f0:	bf00      	nop
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 80038f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f6:	7dfb      	ldrb	r3, [r7, #23]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d109      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80038fc:	4b7c      	ldr	r3, [pc, #496]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80038fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003900:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003908:	4979      	ldr	r1, [pc, #484]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800390a:	4313      	orrs	r3, r2
 800390c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800390e:	e001      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	7dfb      	ldrb	r3, [r7, #23]
 8003912:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d047      	beq.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003928:	d030      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800392a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392e:	d82a      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003930:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003934:	d02c      	beq.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003936:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800393a:	d824      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800393c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003940:	d018      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8003942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003946:	d81e      	bhi.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8003948:	2b00      	cmp	r3, #0
 800394a:	d003      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800394c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003950:	d007      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8003952:	e018      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003954:	4b66      	ldr	r3, [pc, #408]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	4a65      	ldr	r2, [pc, #404]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800395a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800395e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003960:	e017      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	3304      	adds	r3, #4
 8003966:	2100      	movs	r1, #0
 8003968:	4618      	mov	r0, r3
 800396a:	f001 f821 	bl	80049b0 <RCCEx_PLL2_Config>
 800396e:	4603      	mov	r3, r0
 8003970:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003972:	e00e      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	3324      	adds	r3, #36	; 0x24
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f001 f8ca 	bl	8004b14 <RCCEx_PLL3_Config>
 8003980:	4603      	mov	r3, r0
 8003982:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8003984:	e005      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	75fb      	strb	r3, [r7, #23]
      break;
 800398a:	e002      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8003990:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003992:	7dfb      	ldrb	r3, [r7, #23]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d109      	bne.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003998:	4b55      	ldr	r3, [pc, #340]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800399a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800399c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	4952      	ldr	r1, [pc, #328]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	650b      	str	r3, [r1, #80]	; 0x50
 80039aa:	e001      	b.n	80039b0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ac:	7dfb      	ldrb	r3, [r7, #23]
 80039ae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d049      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039c4:	d02e      	beq.n	8003a24 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80039c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039ca:	d828      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d0:	d02a      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x480>
 80039d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80039d6:	d822      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039dc:	d026      	beq.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0x484>
 80039de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80039e2:	d81c      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039e8:	d010      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x464>
 80039ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039ee:	d816      	bhi.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x476>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d01d      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x488>
 80039f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039f8:	d111      	bne.n	8003a1e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3304      	adds	r3, #4
 80039fe:	2101      	movs	r1, #1
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 ffd5 	bl	80049b0 <RCCEx_PLL2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a0a:	e012      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	3324      	adds	r3, #36	; 0x24
 8003a10:	2101      	movs	r1, #1
 8003a12:	4618      	mov	r0, r3
 8003a14:	f001 f87e 	bl	8004b14 <RCCEx_PLL3_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8003a1c:	e009      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
      break;
 8003a22:	e006      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a24:	bf00      	nop
 8003a26:	e004      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a28:	bf00      	nop
 8003a2a:	e002      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8003a30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003a32:	7dfb      	ldrb	r3, [r7, #23]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d109      	bne.n	8003a4c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003a38:	4b2d      	ldr	r3, [pc, #180]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a3c:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	492a      	ldr	r1, [pc, #168]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003a46:	4313      	orrs	r3, r2
 8003a48:	650b      	str	r3, [r1, #80]	; 0x50
 8003a4a:	e001      	b.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a4c:	7dfb      	ldrb	r3, [r7, #23]
 8003a4e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d04d      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003a62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a66:	d02e      	beq.n	8003ac6 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8003a68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a6c:	d828      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a72:	d02a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x522>
 8003a74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a78:	d822      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a7e:	d026      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0x526>
 8003a80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a84:	d81c      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a8a:	d010      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a90:	d816      	bhi.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d01d      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8003a96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a9a:	d111      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3304      	adds	r3, #4
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f000 ff84 	bl	80049b0 <RCCEx_PLL2_Config>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003aac:	e012      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3324      	adds	r3, #36	; 0x24
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f001 f82d 	bl	8004b14 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8003abe:	e009      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ac4:	e006      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ac6:	bf00      	nop
 8003ac8:	e004      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003aca:	bf00      	nop
 8003acc:	e002      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ace:	bf00      	nop
 8003ad0:	e000      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8003ad2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ad4:	7dfb      	ldrb	r3, [r7, #23]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10c      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003ada:	4b05      	ldr	r3, [pc, #20]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ade:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003ae8:	4901      	ldr	r1, [pc, #4]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	658b      	str	r3, [r1, #88]	; 0x58
 8003aee:	e003      	b.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8003af0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af4:	7dfb      	ldrb	r3, [r7, #23]
 8003af6:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d02f      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b0c:	d00e      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8003b0e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b12:	d814      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x596>
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d015      	beq.n	8003b44 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8003b18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b1c:	d10f      	bne.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b1e:	4baf      	ldr	r3, [pc, #700]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	4aae      	ldr	r2, [pc, #696]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b2a:	e00c      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	3304      	adds	r3, #4
 8003b30:	2101      	movs	r1, #1
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 ff3c 	bl	80049b0 <RCCEx_PLL2_Config>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8003b3c:	e003      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	75fb      	strb	r3, [r7, #23]
      break;
 8003b42:	e000      	b.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8003b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b46:	7dfb      	ldrb	r3, [r7, #23]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d109      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b4c:	4ba3      	ldr	r3, [pc, #652]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b50:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b58:	49a0      	ldr	r1, [pc, #640]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8003b5e:	e001      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b60:	7dfb      	ldrb	r3, [r7, #23]
 8003b62:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d032      	beq.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d81b      	bhi.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003bb7 	.word	0x08003bb7
 8003b84:	08003b91 	.word	0x08003b91
 8003b88:	08003b9f 	.word	0x08003b9f
 8003b8c:	08003bb7 	.word	0x08003bb7
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b90:	4b92      	ldr	r3, [pc, #584]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b94:	4a91      	ldr	r2, [pc, #580]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003b96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	3304      	adds	r3, #4
 8003ba2:	2102      	movs	r1, #2
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f000 ff03 	bl	80049b0 <RCCEx_PLL2_Config>
 8003baa:	4603      	mov	r3, r0
 8003bac:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8003bb6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003bb8:	7dfb      	ldrb	r3, [r7, #23]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d109      	bne.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bbe:	4b87      	ldr	r3, [pc, #540]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	4984      	ldr	r1, [pc, #528]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003bd0:	e001      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bd2:	7dfb      	ldrb	r3, [r7, #23]
 8003bd4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	f000 8086 	beq.w	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003be4:	4b7e      	ldr	r3, [pc, #504]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a7d      	ldr	r2, [pc, #500]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003bea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bf0:	f7fd fc04 	bl	80013fc <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bf6:	e009      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf8:	f7fd fc00 	bl	80013fc <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d902      	bls.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	75fb      	strb	r3, [r7, #23]
        break;
 8003c0a:	e005      	b.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c0c:	4b74      	ldr	r3, [pc, #464]	; (8003de0 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d0ef      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8003c18:	7dfb      	ldrb	r3, [r7, #23]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d166      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c1e:	4b6f      	ldr	r3, [pc, #444]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c20:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c28:	4053      	eors	r3, r2
 8003c2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d013      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c32:	4b6a      	ldr	r3, [pc, #424]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3a:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c3c:	4b67      	ldr	r3, [pc, #412]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c40:	4a66      	ldr	r2, [pc, #408]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c46:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c48:	4b64      	ldr	r3, [pc, #400]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a63      	ldr	r2, [pc, #396]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003c54:	4a61      	ldr	r2, [pc, #388]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c64:	d115      	bne.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c66:	f7fd fbc9 	bl	80013fc <HAL_GetTick>
 8003c6a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c6c:	e00b      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c6e:	f7fd fbc5 	bl	80013fc <HAL_GetTick>
 8003c72:	4602      	mov	r2, r0
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	1ad3      	subs	r3, r2, r3
 8003c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d902      	bls.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	75fb      	strb	r3, [r7, #23]
            break;
 8003c84:	e005      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c86:	4b55      	ldr	r3, [pc, #340]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ed      	beq.n	8003c6e <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8003c92:	7dfb      	ldrb	r3, [r7, #23]
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d126      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca6:	d10d      	bne.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8003ca8:	4b4c      	ldr	r3, [pc, #304]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cb6:	0919      	lsrs	r1, r3, #4
 8003cb8:	4b4a      	ldr	r3, [pc, #296]	; (8003de4 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8003cba:	400b      	ands	r3, r1
 8003cbc:	4947      	ldr	r1, [pc, #284]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	610b      	str	r3, [r1, #16]
 8003cc2:	e005      	b.n	8003cd0 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8003cc4:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	4a44      	ldr	r2, [pc, #272]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cca:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003cce:	6113      	str	r3, [r2, #16]
 8003cd0:	4b42      	ldr	r3, [pc, #264]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003cd2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003cda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cde:	493f      	ldr	r1, [pc, #252]	; (8003ddc <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	670b      	str	r3, [r1, #112]	; 0x70
 8003ce4:	e004      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003ce6:	7dfb      	ldrb	r3, [r7, #23]
 8003ce8:	75bb      	strb	r3, [r7, #22]
 8003cea:	e001      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7dfb      	ldrb	r3, [r7, #23]
 8003cee:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0301 	and.w	r3, r3, #1
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8085 	beq.w	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d02:	2b28      	cmp	r3, #40	; 0x28
 8003d04:	d866      	bhi.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8003d06:	a201      	add	r2, pc, #4	; (adr r2, 8003d0c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8003d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0c:	08003de9 	.word	0x08003de9
 8003d10:	08003dd5 	.word	0x08003dd5
 8003d14:	08003dd5 	.word	0x08003dd5
 8003d18:	08003dd5 	.word	0x08003dd5
 8003d1c:	08003dd5 	.word	0x08003dd5
 8003d20:	08003dd5 	.word	0x08003dd5
 8003d24:	08003dd5 	.word	0x08003dd5
 8003d28:	08003dd5 	.word	0x08003dd5
 8003d2c:	08003db1 	.word	0x08003db1
 8003d30:	08003dd5 	.word	0x08003dd5
 8003d34:	08003dd5 	.word	0x08003dd5
 8003d38:	08003dd5 	.word	0x08003dd5
 8003d3c:	08003dd5 	.word	0x08003dd5
 8003d40:	08003dd5 	.word	0x08003dd5
 8003d44:	08003dd5 	.word	0x08003dd5
 8003d48:	08003dd5 	.word	0x08003dd5
 8003d4c:	08003dc3 	.word	0x08003dc3
 8003d50:	08003dd5 	.word	0x08003dd5
 8003d54:	08003dd5 	.word	0x08003dd5
 8003d58:	08003dd5 	.word	0x08003dd5
 8003d5c:	08003dd5 	.word	0x08003dd5
 8003d60:	08003dd5 	.word	0x08003dd5
 8003d64:	08003dd5 	.word	0x08003dd5
 8003d68:	08003dd5 	.word	0x08003dd5
 8003d6c:	08003de9 	.word	0x08003de9
 8003d70:	08003dd5 	.word	0x08003dd5
 8003d74:	08003dd5 	.word	0x08003dd5
 8003d78:	08003dd5 	.word	0x08003dd5
 8003d7c:	08003dd5 	.word	0x08003dd5
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003dd5 	.word	0x08003dd5
 8003d88:	08003dd5 	.word	0x08003dd5
 8003d8c:	08003de9 	.word	0x08003de9
 8003d90:	08003dd5 	.word	0x08003dd5
 8003d94:	08003dd5 	.word	0x08003dd5
 8003d98:	08003dd5 	.word	0x08003dd5
 8003d9c:	08003dd5 	.word	0x08003dd5
 8003da0:	08003dd5 	.word	0x08003dd5
 8003da4:	08003dd5 	.word	0x08003dd5
 8003da8:	08003dd5 	.word	0x08003dd5
 8003dac:	08003de9 	.word	0x08003de9
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3304      	adds	r3, #4
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fdfa 	bl	80049b0 <RCCEx_PLL2_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dc0:	e013      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	3324      	adds	r3, #36	; 0x24
 8003dc6:	2101      	movs	r1, #1
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 fea3 	bl	8004b14 <RCCEx_PLL3_Config>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8003dd2:	e00a      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	75fb      	strb	r3, [r7, #23]
      break;
 8003dd8:	e007      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003dda:	bf00      	nop
 8003ddc:	58024400 	.word	0x58024400
 8003de0:	58024800 	.word	0x58024800
 8003de4:	00ffffcf 	.word	0x00ffffcf
      break;
 8003de8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d109      	bne.n	8003e04 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003df0:	4b96      	ldr	r3, [pc, #600]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df4:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003dfc:	4993      	ldr	r1, [pc, #588]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	654b      	str	r3, [r1, #84]	; 0x54
 8003e02:	e001      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e04:	7dfb      	ldrb	r3, [r7, #23]
 8003e06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d038      	beq.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	2b05      	cmp	r3, #5
 8003e1a:	d821      	bhi.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8003e1c:	a201      	add	r2, pc, #4	; (adr r2, 8003e24 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8003e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e22:	bf00      	nop
 8003e24:	08003e67 	.word	0x08003e67
 8003e28:	08003e3d 	.word	0x08003e3d
 8003e2c:	08003e4f 	.word	0x08003e4f
 8003e30:	08003e67 	.word	0x08003e67
 8003e34:	08003e67 	.word	0x08003e67
 8003e38:	08003e67 	.word	0x08003e67
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	3304      	adds	r3, #4
 8003e40:	2101      	movs	r1, #1
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 fdb4 	bl	80049b0 <RCCEx_PLL2_Config>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e4c:	e00c      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	3324      	adds	r3, #36	; 0x24
 8003e52:	2101      	movs	r1, #1
 8003e54:	4618      	mov	r0, r3
 8003e56:	f000 fe5d 	bl	8004b14 <RCCEx_PLL3_Config>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003e5e:	e003      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	75fb      	strb	r3, [r7, #23]
      break;
 8003e64:	e000      	b.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8003e66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e68:	7dfb      	ldrb	r3, [r7, #23]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d109      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e6e:	4b77      	ldr	r3, [pc, #476]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e72:	f023 0207 	bic.w	r2, r3, #7
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e7a:	4974      	ldr	r1, [pc, #464]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	654b      	str	r3, [r1, #84]	; 0x54
 8003e80:	e001      	b.n	8003e86 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e82:	7dfb      	ldrb	r3, [r7, #23]
 8003e84:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0304 	and.w	r3, r3, #4
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d03a      	beq.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d821      	bhi.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003e9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea2:	bf00      	nop
 8003ea4:	08003ee7 	.word	0x08003ee7
 8003ea8:	08003ebd 	.word	0x08003ebd
 8003eac:	08003ecf 	.word	0x08003ecf
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	2101      	movs	r1, #1
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f000 fd74 	bl	80049b0 <RCCEx_PLL2_Config>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ecc:	e00c      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	3324      	adds	r3, #36	; 0x24
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fe1d 	bl	8004b14 <RCCEx_PLL3_Config>
 8003eda:	4603      	mov	r3, r0
 8003edc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8003ede:	e003      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8003ee4:	e000      	b.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8003ee6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003ee8:	7dfb      	ldrb	r3, [r7, #23]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10a      	bne.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003eee:	4b57      	ldr	r3, [pc, #348]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef2:	f023 0207 	bic.w	r2, r3, #7
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efc:	4953      	ldr	r1, [pc, #332]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003efe:	4313      	orrs	r3, r2
 8003f00:	658b      	str	r3, [r1, #88]	; 0x58
 8003f02:	e001      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f04:	7dfb      	ldrb	r3, [r7, #23]
 8003f06:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d04b      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f1e:	d02e      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8003f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f24:	d828      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f2a:	d02a      	beq.n	8003f82 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f30:	d822      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f32:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f36:	d026      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003f38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003f3c:	d81c      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f42:	d010      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8003f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f48:	d816      	bhi.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d01d      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003f4e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f52:	d111      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	3304      	adds	r3, #4
 8003f58:	2100      	movs	r1, #0
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f000 fd28 	bl	80049b0 <RCCEx_PLL2_Config>
 8003f60:	4603      	mov	r3, r0
 8003f62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f64:	e012      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	3324      	adds	r3, #36	; 0x24
 8003f6a:	2102      	movs	r1, #2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f000 fdd1 	bl	8004b14 <RCCEx_PLL3_Config>
 8003f72:	4603      	mov	r3, r0
 8003f74:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8003f76:	e009      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	e006      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f7e:	bf00      	nop
 8003f80:	e004      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f82:	bf00      	nop
 8003f84:	e002      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f86:	bf00      	nop
 8003f88:	e000      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003f8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f8c:	7dfb      	ldrb	r3, [r7, #23]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10a      	bne.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f92:	4b2e      	ldr	r3, [pc, #184]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003f94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f96:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fa0:	492a      	ldr	r1, [pc, #168]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	654b      	str	r3, [r1, #84]	; 0x54
 8003fa6:	e001      	b.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fa8:	7dfb      	ldrb	r3, [r7, #23]
 8003faa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d04d      	beq.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003fbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fc2:	d02e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8003fc4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003fc8:	d828      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fce:	d02a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8003fd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd4:	d822      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fd6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fda:	d026      	beq.n	800402a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8003fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003fe0:	d81c      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fe2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fe6:	d010      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8003fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fec:	d816      	bhi.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d01d      	beq.n	800402e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8003ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ff6:	d111      	bne.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	3304      	adds	r3, #4
 8003ffc:	2100      	movs	r1, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fcd6 	bl	80049b0 <RCCEx_PLL2_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004008:	e012      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3324      	adds	r3, #36	; 0x24
 800400e:	2102      	movs	r1, #2
 8004010:	4618      	mov	r0, r3
 8004012:	f000 fd7f 	bl	8004b14 <RCCEx_PLL3_Config>
 8004016:	4603      	mov	r3, r0
 8004018:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800401a:	e009      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	75fb      	strb	r3, [r7, #23]
      break;
 8004020:	e006      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004022:	bf00      	nop
 8004024:	e004      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8004026:	bf00      	nop
 8004028:	e002      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800402a:	bf00      	nop
 800402c:	e000      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800402e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10c      	bne.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004036:	4b05      	ldr	r3, [pc, #20]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800403a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004044:	4901      	ldr	r1, [pc, #4]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8004046:	4313      	orrs	r3, r2
 8004048:	658b      	str	r3, [r1, #88]	; 0x58
 800404a:	e003      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800404c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004050:	7dfb      	ldrb	r3, [r7, #23]
 8004052:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405c:	2b00      	cmp	r3, #0
 800405e:	d04b      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004066:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800406a:	d02e      	beq.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800406c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004070:	d828      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004072:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004076:	d02a      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8004078:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800407c:	d822      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800407e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004082:	d026      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8004084:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004088:	d81c      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800408a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800408e:	d010      	beq.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8004090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004094:	d816      	bhi.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8004096:	2b00      	cmp	r3, #0
 8004098:	d01d      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800409a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800409e:	d111      	bne.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	3304      	adds	r3, #4
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fc82 	bl	80049b0 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040b0:	e012      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3324      	adds	r3, #36	; 0x24
 80040b6:	2102      	movs	r1, #2
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 fd2b 	bl	8004b14 <RCCEx_PLL3_Config>
 80040be:	4603      	mov	r3, r0
 80040c0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80040c2:	e009      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	75fb      	strb	r3, [r7, #23]
      break;
 80040c8:	e006      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040ca:	bf00      	nop
 80040cc:	e004      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040ce:	bf00      	nop
 80040d0:	e002      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040d2:	bf00      	nop
 80040d4:	e000      	b.n	80040d8 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80040d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040d8:	7dfb      	ldrb	r3, [r7, #23]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d10a      	bne.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040de:	4b9d      	ldr	r3, [pc, #628]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040ec:	4999      	ldr	r1, [pc, #612]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80040ee:	4313      	orrs	r3, r2
 80040f0:	658b      	str	r3, [r1, #88]	; 0x58
 80040f2:	e001      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040f4:	7dfb      	ldrb	r3, [r7, #23]
 80040f6:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0308 	and.w	r3, r3, #8
 8004100:	2b00      	cmp	r3, #0
 8004102:	d01a      	beq.n	800413a <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800410a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800410e:	d10a      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	3324      	adds	r3, #36	; 0x24
 8004114:	2102      	movs	r1, #2
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fcfc 	bl	8004b14 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004126:	4b8b      	ldr	r3, [pc, #556]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004134:	4987      	ldr	r1, [pc, #540]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004136:	4313      	orrs	r3, r2
 8004138:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0310 	and.w	r3, r3, #16
 8004142:	2b00      	cmp	r3, #0
 8004144:	d01a      	beq.n	800417c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800414c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004150:	d10a      	bne.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	3324      	adds	r3, #36	; 0x24
 8004156:	2102      	movs	r1, #2
 8004158:	4618      	mov	r0, r3
 800415a:	f000 fcdb 	bl	8004b14 <RCCEx_PLL3_Config>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d001      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004168:	4b7a      	ldr	r3, [pc, #488]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004176:	4977      	ldr	r1, [pc, #476]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004178:	4313      	orrs	r3, r2
 800417a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004184:	2b00      	cmp	r3, #0
 8004186:	d034      	beq.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800418e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004192:	d01d      	beq.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8004194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004198:	d817      	bhi.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800419e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a2:	d009      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80041a4:	e011      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	3304      	adds	r3, #4
 80041aa:	2100      	movs	r1, #0
 80041ac:	4618      	mov	r0, r3
 80041ae:	f000 fbff 	bl	80049b0 <RCCEx_PLL2_Config>
 80041b2:	4603      	mov	r3, r0
 80041b4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041b6:	e00c      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	3324      	adds	r3, #36	; 0x24
 80041bc:	2102      	movs	r1, #2
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fca8 	bl	8004b14 <RCCEx_PLL3_Config>
 80041c4:	4603      	mov	r3, r0
 80041c6:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80041c8:	e003      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	75fb      	strb	r3, [r7, #23]
      break;
 80041ce:	e000      	b.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80041d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041d2:	7dfb      	ldrb	r3, [r7, #23]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80041d8:	4b5e      	ldr	r3, [pc, #376]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041e6:	495b      	ldr	r1, [pc, #364]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80041e8:	4313      	orrs	r3, r2
 80041ea:	658b      	str	r3, [r1, #88]	; 0x58
 80041ec:	e001      	b.n	80041f2 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041ee:	7dfb      	ldrb	r3, [r7, #23]
 80041f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d033      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004204:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004208:	d01c      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800420a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800420e:	d816      	bhi.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8004210:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004214:	d003      	beq.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8004216:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800421a:	d007      	beq.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800421c:	e00f      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800421e:	4b4d      	ldr	r3, [pc, #308]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004222:	4a4c      	ldr	r2, [pc, #304]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004228:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800422a:	e00c      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	3324      	adds	r3, #36	; 0x24
 8004230:	2101      	movs	r1, #1
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fc6e 	bl	8004b14 <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	75fb      	strb	r3, [r7, #23]
      break;
 8004242:	e000      	b.n	8004246 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8004244:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10a      	bne.n	8004262 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800424c:	4b41      	ldr	r3, [pc, #260]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800424e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004250:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800425a:	493e      	ldr	r1, [pc, #248]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800425c:	4313      	orrs	r3, r2
 800425e:	654b      	str	r3, [r1, #84]	; 0x54
 8004260:	e001      	b.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d029      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800427a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800427e:	d007      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8004280:	e00f      	b.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004286:	4a33      	ldr	r2, [pc, #204]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800428c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800428e:	e00b      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	3304      	adds	r3, #4
 8004294:	2102      	movs	r1, #2
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fb8a 	bl	80049b0 <RCCEx_PLL2_Config>
 800429c:	4603      	mov	r3, r0
 800429e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	75fb      	strb	r3, [r7, #23]
      break;
 80042a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042a8:	7dfb      	ldrb	r3, [r7, #23]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d109      	bne.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80042ae:	4b29      	ldr	r3, [pc, #164]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042b2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	4926      	ldr	r1, [pc, #152]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	64cb      	str	r3, [r1, #76]	; 0x4c
 80042c0:	e001      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c2:	7dfb      	ldrb	r3, [r7, #23]
 80042c4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d00a      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	3324      	adds	r3, #36	; 0x24
 80042d6:	2102      	movs	r1, #2
 80042d8:	4618      	mov	r0, r3
 80042da:	f000 fc1b 	bl	8004b14 <RCCEx_PLL3_Config>
 80042de:	4603      	mov	r3, r0
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d001      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d033      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042f8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042fc:	d017      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004302:	d811      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004304:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004308:	d013      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800430a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800430e:	d80b      	bhi.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8004310:	2b00      	cmp	r3, #0
 8004312:	d010      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8004314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004318:	d106      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800431a:	4b0e      	ldr	r3, [pc, #56]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800431c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431e:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004320:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004324:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004326:	e007      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004328:	2301      	movs	r3, #1
 800432a:	75fb      	strb	r3, [r7, #23]
      break;
 800432c:	e004      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800432e:	bf00      	nop
 8004330:	e002      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004332:	bf00      	nop
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8004336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10c      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800433e:	4b05      	ldr	r3, [pc, #20]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800434a:	4902      	ldr	r1, [pc, #8]	; (8004354 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800434c:	4313      	orrs	r3, r2
 800434e:	654b      	str	r3, [r1, #84]	; 0x54
 8004350:	e004      	b.n	800435c <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8004352:	bf00      	nop
 8004354:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d008      	beq.n	800437a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004368:	4b31      	ldr	r3, [pc, #196]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800436a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800436c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	492e      	ldr	r1, [pc, #184]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004376:	4313      	orrs	r3, r2
 8004378:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004386:	4b2a      	ldr	r3, [pc, #168]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004394:	4926      	ldr	r1, [pc, #152]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004396:	4313      	orrs	r3, r2
 8004398:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d008      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043a6:	4b22      	ldr	r3, [pc, #136]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043aa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80043b2:	491f      	ldr	r1, [pc, #124]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d00d      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043c4:	4b1a      	ldr	r3, [pc, #104]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043c6:	691b      	ldr	r3, [r3, #16]
 80043c8:	4a19      	ldr	r2, [pc, #100]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043ce:	6113      	str	r3, [r2, #16]
 80043d0:	4b17      	ldr	r3, [pc, #92]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043d2:	691a      	ldr	r2, [r3, #16]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80043da:	4915      	ldr	r1, [pc, #84]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	da08      	bge.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80043e8:	4b11      	ldr	r3, [pc, #68]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043ec:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f4:	490e      	ldr	r1, [pc, #56]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80043f6:	4313      	orrs	r3, r2
 80043f8:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004406:	4b0a      	ldr	r3, [pc, #40]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004414:	4906      	ldr	r1, [pc, #24]	; (8004430 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8004416:	4313      	orrs	r3, r2
 8004418:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800441a:	7dbb      	ldrb	r3, [r7, #22]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8004420:	2300      	movs	r3, #0
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
}
 8004426:	4618      	mov	r0, r3
 8004428:	3718      	adds	r7, #24
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	58024400 	.word	0x58024400

08004434 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004438:	f7ff f85a 	bl	80034f0 <HAL_RCC_GetHCLKFreq>
 800443c:	4602      	mov	r2, r0
 800443e:	4b06      	ldr	r3, [pc, #24]	; (8004458 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	091b      	lsrs	r3, r3, #4
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	4904      	ldr	r1, [pc, #16]	; (800445c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800444a:	5ccb      	ldrb	r3, [r1, r3]
 800444c:	f003 031f 	and.w	r3, r3, #31
 8004450:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004454:	4618      	mov	r0, r3
 8004456:	bd80      	pop	{r7, pc}
 8004458:	58024400 	.word	0x58024400
 800445c:	080063dc 	.word	0x080063dc

08004460 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004460:	b480      	push	{r7}
 8004462:	b089      	sub	sp, #36	; 0x24
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004468:	4ba1      	ldr	r3, [pc, #644]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004472:	4b9f      	ldr	r3, [pc, #636]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004476:	0b1b      	lsrs	r3, r3, #12
 8004478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800447c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800447e:	4b9c      	ldr	r3, [pc, #624]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800448a:	4b99      	ldr	r3, [pc, #612]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	08db      	lsrs	r3, r3, #3
 8004490:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	fb02 f303 	mul.w	r3, r2, r3
 800449a:	ee07 3a90 	vmov	s15, r3
 800449e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8111 	beq.w	80046d0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	2b02      	cmp	r3, #2
 80044b2:	f000 8083 	beq.w	80045bc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044b6:	69bb      	ldr	r3, [r7, #24]
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	f200 80a1 	bhi.w	8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d056      	beq.n	8004578 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044ca:	e099      	b.n	8004600 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044cc:	4b88      	ldr	r3, [pc, #544]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f003 0320 	and.w	r3, r3, #32
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02d      	beq.n	8004534 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80044d8:	4b85      	ldr	r3, [pc, #532]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	08db      	lsrs	r3, r3, #3
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	4a84      	ldr	r2, [pc, #528]	; (80046f4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044e4:	fa22 f303 	lsr.w	r3, r2, r3
 80044e8:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	ee07 3a90 	vmov	s15, r3
 80044f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b7b      	ldr	r3, [pc, #492]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a03 	vldr	s12, [r7, #12]
 8004516:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004532:	e087      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046fc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b6a      	ldr	r3, [pc, #424]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a03 	vldr	s12, [r7, #12]
 800455a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004576:	e065      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b59      	ldr	r3, [pc, #356]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800458c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a03 	vldr	s12, [r7, #12]
 800459e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045ba:	e043      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	ee07 3a90 	vmov	s15, r3
 80045c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004704 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ce:	4b48      	ldr	r3, [pc, #288]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d6:	ee07 3a90 	vmov	s15, r3
 80045da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045de:	ed97 6a03 	vldr	s12, [r7, #12]
 80045e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80045fe:	e021      	b.n	8004644 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004600:	697b      	ldr	r3, [r7, #20]
 8004602:	ee07 3a90 	vmov	s15, r3
 8004606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004700 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800460e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004612:	4b37      	ldr	r3, [pc, #220]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800461a:	ee07 3a90 	vmov	s15, r3
 800461e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004622:	ed97 6a03 	vldr	s12, [r7, #12]
 8004626:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046f8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800462a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800462e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800463a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800463e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004642:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004644:	4b2a      	ldr	r3, [pc, #168]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004648:	0a5b      	lsrs	r3, r3, #9
 800464a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800464e:	ee07 3a90 	vmov	s15, r3
 8004652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004656:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800465a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800465e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004666:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800466a:	ee17 2a90 	vmov	r2, s15
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004672:	4b1f      	ldr	r3, [pc, #124]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004676:	0c1b      	lsrs	r3, r3, #16
 8004678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800467c:	ee07 3a90 	vmov	s15, r3
 8004680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004684:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004688:	ee37 7a87 	vadd.f32	s14, s15, s14
 800468c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004690:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004694:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004698:	ee17 2a90 	vmov	r2, s15
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80046a0:	4b13      	ldr	r3, [pc, #76]	; (80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	0e1b      	lsrs	r3, r3, #24
 80046a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046aa:	ee07 3a90 	vmov	s15, r3
 80046ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80046be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c6:	ee17 2a90 	vmov	r2, s15
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046ce:	e008      	b.n	80046e2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2200      	movs	r2, #0
 80046d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	609a      	str	r2, [r3, #8]
}
 80046e2:	bf00      	nop
 80046e4:	3724      	adds	r7, #36	; 0x24
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	58024400 	.word	0x58024400
 80046f4:	03d09000 	.word	0x03d09000
 80046f8:	46000000 	.word	0x46000000
 80046fc:	4c742400 	.word	0x4c742400
 8004700:	4a742400 	.word	0x4a742400
 8004704:	4af42400 	.word	0x4af42400

08004708 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8004708:	b480      	push	{r7}
 800470a:	b089      	sub	sp, #36	; 0x24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004710:	4ba1      	ldr	r3, [pc, #644]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004714:	f003 0303 	and.w	r3, r3, #3
 8004718:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800471a:	4b9f      	ldr	r3, [pc, #636]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800471c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800471e:	0d1b      	lsrs	r3, r3, #20
 8004720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004724:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004726:	4b9c      	ldr	r3, [pc, #624]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	0a1b      	lsrs	r3, r3, #8
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8004732:	4b99      	ldr	r3, [pc, #612]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004736:	08db      	lsrs	r3, r3, #3
 8004738:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	fb02 f303 	mul.w	r3, r2, r3
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8111 	beq.w	8004978 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b02      	cmp	r3, #2
 800475a:	f000 8083 	beq.w	8004864 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b02      	cmp	r3, #2
 8004762:	f200 80a1 	bhi.w	80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b01      	cmp	r3, #1
 8004770:	d056      	beq.n	8004820 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004772:	e099      	b.n	80048a8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004774:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0320 	and.w	r3, r3, #32
 800477c:	2b00      	cmp	r3, #0
 800477e:	d02d      	beq.n	80047dc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004780:	4b85      	ldr	r3, [pc, #532]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	08db      	lsrs	r3, r3, #3
 8004786:	f003 0303 	and.w	r3, r3, #3
 800478a:	4a84      	ldr	r2, [pc, #528]	; (800499c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800478c:	fa22 f303 	lsr.w	r3, r2, r3
 8004790:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	ee07 3a90 	vmov	s15, r3
 8004798:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047aa:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047b2:	ee07 3a90 	vmov	s15, r3
 80047b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80047be:	eddf 5a78 	vldr	s11, [pc, #480]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80047da:	e087      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	ee07 3a90 	vmov	s15, r3
 80047e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ee:	4b6a      	ldr	r3, [pc, #424]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f6:	ee07 3a90 	vmov	s15, r3
 80047fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004802:	eddf 5a67 	vldr	s11, [pc, #412]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800480a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800481a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800481e:	e065      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	ee07 3a90 	vmov	s15, r3
 8004826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800482a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800482e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004832:	4b59      	ldr	r3, [pc, #356]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800483a:	ee07 3a90 	vmov	s15, r3
 800483e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004842:	ed97 6a03 	vldr	s12, [r7, #12]
 8004846:	eddf 5a56 	vldr	s11, [pc, #344]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800484a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004852:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800485a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004862:	e043      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	ee07 3a90 	vmov	s15, r3
 800486a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80049ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004876:	4b48      	ldr	r3, [pc, #288]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487e:	ee07 3a90 	vmov	s15, r3
 8004882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004886:	ed97 6a03 	vldr	s12, [r7, #12]
 800488a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800488e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004896:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800489a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048a6:	e021      	b.n	80048ec <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	ee07 3a90 	vmov	s15, r3
 80048ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80049a8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ba:	4b37      	ldr	r3, [pc, #220]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048c2:	ee07 3a90 	vmov	s15, r3
 80048c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ce:	eddf 5a34 	vldr	s11, [pc, #208]	; 80049a0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80048ea:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 80048ec:	4b2a      	ldr	r3, [pc, #168]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	0a5b      	lsrs	r3, r3, #9
 80048f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048f6:	ee07 3a90 	vmov	s15, r3
 80048fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004902:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004906:	edd7 6a07 	vldr	s13, [r7, #28]
 800490a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800490e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004912:	ee17 2a90 	vmov	r2, s15
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800491a:	4b1f      	ldr	r3, [pc, #124]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	0c1b      	lsrs	r3, r3, #16
 8004920:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004924:	ee07 3a90 	vmov	s15, r3
 8004928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800492c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004930:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004934:	edd7 6a07 	vldr	s13, [r7, #28]
 8004938:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800493c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004940:	ee17 2a90 	vmov	r2, s15
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8004948:	4b13      	ldr	r3, [pc, #76]	; (8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	0e1b      	lsrs	r3, r3, #24
 800494e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004952:	ee07 3a90 	vmov	s15, r3
 8004956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800495e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004962:	edd7 6a07 	vldr	s13, [r7, #28]
 8004966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800496a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800496e:	ee17 2a90 	vmov	r2, s15
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004976:	e008      	b.n	800498a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	609a      	str	r2, [r3, #8]
}
 800498a:	bf00      	nop
 800498c:	3724      	adds	r7, #36	; 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	58024400 	.word	0x58024400
 800499c:	03d09000 	.word	0x03d09000
 80049a0:	46000000 	.word	0x46000000
 80049a4:	4c742400 	.word	0x4c742400
 80049a8:	4a742400 	.word	0x4a742400
 80049ac:	4af42400 	.word	0x4af42400

080049b0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b084      	sub	sp, #16
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049ba:	2300      	movs	r3, #0
 80049bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049be:	4b53      	ldr	r3, [pc, #332]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 80049c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c2:	f003 0303 	and.w	r3, r3, #3
 80049c6:	2b03      	cmp	r3, #3
 80049c8:	d101      	bne.n	80049ce <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e099      	b.n	8004b02 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049ce:	4b4f      	ldr	r3, [pc, #316]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a4e      	ldr	r2, [pc, #312]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 80049d4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049da:	f7fc fd0f 	bl	80013fc <HAL_GetTick>
 80049de:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049e0:	e008      	b.n	80049f4 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80049e2:	f7fc fd0b 	bl	80013fc <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d901      	bls.n	80049f4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	e086      	b.n	8004b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049f4:	4b45      	ldr	r3, [pc, #276]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1f0      	bne.n	80049e2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004a00:	4b42      	ldr	r3, [pc, #264]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a04:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	031b      	lsls	r3, r3, #12
 8004a0e:	493f      	ldr	r1, [pc, #252]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	628b      	str	r3, [r1, #40]	; 0x28
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	3b01      	subs	r3, #1
 8004a24:	025b      	lsls	r3, r3, #9
 8004a26:	b29b      	uxth	r3, r3
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68db      	ldr	r3, [r3, #12]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	041b      	lsls	r3, r3, #16
 8004a32:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a36:	431a      	orrs	r2, r3
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	061b      	lsls	r3, r3, #24
 8004a40:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a44:	4931      	ldr	r1, [pc, #196]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a4a:	4b30      	ldr	r3, [pc, #192]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	492d      	ldr	r1, [pc, #180]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a5c:	4b2b      	ldr	r3, [pc, #172]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a60:	f023 0220 	bic.w	r2, r3, #32
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	699b      	ldr	r3, [r3, #24]
 8004a68:	4928      	ldr	r1, [pc, #160]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a6e:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a72:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a74:	f023 0310 	bic.w	r3, r3, #16
 8004a78:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a7a:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a7e:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <RCCEx_PLL2_Config+0x160>)
 8004a80:	4013      	ands	r3, r2
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	69d2      	ldr	r2, [r2, #28]
 8004a86:	00d2      	lsls	r2, r2, #3
 8004a88:	4920      	ldr	r1, [pc, #128]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a8e:	4b1f      	ldr	r3, [pc, #124]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a92:	4a1e      	ldr	r2, [pc, #120]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004a94:	f043 0310 	orr.w	r3, r3, #16
 8004a98:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d106      	bne.n	8004aae <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004aa0:	4b1a      	ldr	r3, [pc, #104]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4a19      	ldr	r2, [pc, #100]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004aa6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aac:	e00f      	b.n	8004ace <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d106      	bne.n	8004ac2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004ab4:	4b15      	ldr	r3, [pc, #84]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab8:	4a14      	ldr	r2, [pc, #80]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004abe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004ac0:	e005      	b.n	8004ace <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004ac2:	4b12      	ldr	r3, [pc, #72]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ac6:	4a11      	ldr	r2, [pc, #68]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004ac8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004acc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004ace:	4b0f      	ldr	r3, [pc, #60]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a0e      	ldr	r2, [pc, #56]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004ad4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ad8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ada:	f7fc fc8f 	bl	80013fc <HAL_GetTick>
 8004ade:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ae0:	e008      	b.n	8004af4 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8004ae2:	f7fc fc8b 	bl	80013fc <HAL_GetTick>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	1ad3      	subs	r3, r2, r3
 8004aec:	2b02      	cmp	r3, #2
 8004aee:	d901      	bls.n	8004af4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004af0:	2303      	movs	r3, #3
 8004af2:	e006      	b.n	8004b02 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004af4:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <RCCEx_PLL2_Config+0x15c>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d0f0      	beq.n	8004ae2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3710      	adds	r7, #16
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	bf00      	nop
 8004b0c:	58024400 	.word	0x58024400
 8004b10:	ffff0007 	.word	0xffff0007

08004b14 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b22:	4b53      	ldr	r3, [pc, #332]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b26:	f003 0303 	and.w	r3, r3, #3
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d101      	bne.n	8004b32 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e099      	b.n	8004c66 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b32:	4b4f      	ldr	r3, [pc, #316]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a4e      	ldr	r2, [pc, #312]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004b38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fc5d 	bl	80013fc <HAL_GetTick>
 8004b42:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b44:	e008      	b.n	8004b58 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004b46:	f7fc fc59 	bl	80013fc <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d901      	bls.n	8004b58 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b54:	2303      	movs	r3, #3
 8004b56:	e086      	b.n	8004c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b58:	4b45      	ldr	r3, [pc, #276]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1f0      	bne.n	8004b46 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b64:	4b42      	ldr	r3, [pc, #264]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b68:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	051b      	lsls	r3, r3, #20
 8004b72:	493f      	ldr	r1, [pc, #252]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	628b      	str	r3, [r1, #40]	; 0x28
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	3b01      	subs	r3, #1
 8004b88:	025b      	lsls	r3, r3, #9
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	041b      	lsls	r3, r3, #16
 8004b96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	061b      	lsls	r3, r3, #24
 8004ba4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004ba8:	4931      	ldr	r1, [pc, #196]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004bae:	4b30      	ldr	r3, [pc, #192]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	695b      	ldr	r3, [r3, #20]
 8004bba:	492d      	ldr	r1, [pc, #180]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bc0:	4b2b      	ldr	r3, [pc, #172]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	699b      	ldr	r3, [r3, #24]
 8004bcc:	4928      	ldr	r1, [pc, #160]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bd2:	4b27      	ldr	r3, [pc, #156]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd6:	4a26      	ldr	r2, [pc, #152]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bdc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bde:	4b24      	ldr	r3, [pc, #144]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004be0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004be2:	4b24      	ldr	r3, [pc, #144]	; (8004c74 <RCCEx_PLL3_Config+0x160>)
 8004be4:	4013      	ands	r3, r2
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	69d2      	ldr	r2, [r2, #28]
 8004bea:	00d2      	lsls	r2, r2, #3
 8004bec:	4920      	ldr	r1, [pc, #128]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bf2:	4b1f      	ldr	r3, [pc, #124]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf6:	4a1e      	ldr	r2, [pc, #120]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d106      	bne.n	8004c12 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004c04:	4b1a      	ldr	r3, [pc, #104]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c0a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c10:	e00f      	b.n	8004c32 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d106      	bne.n	8004c26 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c18:	4b15      	ldr	r3, [pc, #84]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1c:	4a14      	ldr	r2, [pc, #80]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c1e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c24:	e005      	b.n	8004c32 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c26:	4b12      	ldr	r3, [pc, #72]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2a:	4a11      	ldr	r2, [pc, #68]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c2c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c32:	4b0f      	ldr	r3, [pc, #60]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a0e      	ldr	r2, [pc, #56]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c3e:	f7fc fbdd 	bl	80013fc <HAL_GetTick>
 8004c42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c44:	e008      	b.n	8004c58 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8004c46:	f7fc fbd9 	bl	80013fc <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e006      	b.n	8004c66 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c58:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <RCCEx_PLL3_Config+0x15c>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3710      	adds	r7, #16
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	58024400 	.word	0x58024400
 8004c74:	ffff0007 	.word	0xffff0007

08004c78 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c86:	2301      	movs	r3, #1
 8004c88:	e042      	b.n	8004d10 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d106      	bne.n	8004ca2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c9c:	6878      	ldr	r0, [r7, #4]
 8004c9e:	f7fc f9e5 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2224      	movs	r2, #36	; 0x24
 8004ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f022 0201 	bic.w	r2, r2, #1
 8004cb8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f82c 	bl	8004d18 <UART_SetConfig>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d101      	bne.n	8004cca <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e022      	b.n	8004d10 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f000 fd88 	bl	80057e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	685a      	ldr	r2, [r3, #4]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004ce6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004cf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f042 0201 	orr.w	r2, r2, #1
 8004d06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fe0f 	bl	800592c <UART_CheckIdleState>
 8004d0e:	4603      	mov	r3, r0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}

08004d18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d1c:	b092      	sub	sp, #72	; 0x48
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	689a      	ldr	r2, [r3, #8]
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	431a      	orrs	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	431a      	orrs	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	69db      	ldr	r3, [r3, #28]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	4bbe      	ldr	r3, [pc, #760]	; (8005040 <UART_SetConfig+0x328>)
 8004d48:	4013      	ands	r3, r2
 8004d4a:	697a      	ldr	r2, [r7, #20]
 8004d4c:	6812      	ldr	r2, [r2, #0]
 8004d4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d50:	430b      	orrs	r3, r1
 8004d52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4ab3      	ldr	r2, [pc, #716]	; (8005044 <UART_SetConfig+0x32c>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d004      	beq.n	8004d84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	6a1b      	ldr	r3, [r3, #32]
 8004d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d80:	4313      	orrs	r3, r2
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	689a      	ldr	r2, [r3, #8]
 8004d8a:	4baf      	ldr	r3, [pc, #700]	; (8005048 <UART_SetConfig+0x330>)
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	6812      	ldr	r2, [r2, #0]
 8004d92:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d94:	430b      	orrs	r3, r1
 8004d96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	f023 010f 	bic.w	r1, r3, #15
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004da6:	697b      	ldr	r3, [r7, #20]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	430a      	orrs	r2, r1
 8004dac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4aa6      	ldr	r2, [pc, #664]	; (800504c <UART_SetConfig+0x334>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d177      	bne.n	8004ea8 <UART_SetConfig+0x190>
 8004db8:	4ba5      	ldr	r3, [pc, #660]	; (8005050 <UART_SetConfig+0x338>)
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004dc0:	2b28      	cmp	r3, #40	; 0x28
 8004dc2:	d86d      	bhi.n	8004ea0 <UART_SetConfig+0x188>
 8004dc4:	a201      	add	r2, pc, #4	; (adr r2, 8004dcc <UART_SetConfig+0xb4>)
 8004dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dca:	bf00      	nop
 8004dcc:	08004e71 	.word	0x08004e71
 8004dd0:	08004ea1 	.word	0x08004ea1
 8004dd4:	08004ea1 	.word	0x08004ea1
 8004dd8:	08004ea1 	.word	0x08004ea1
 8004ddc:	08004ea1 	.word	0x08004ea1
 8004de0:	08004ea1 	.word	0x08004ea1
 8004de4:	08004ea1 	.word	0x08004ea1
 8004de8:	08004ea1 	.word	0x08004ea1
 8004dec:	08004e79 	.word	0x08004e79
 8004df0:	08004ea1 	.word	0x08004ea1
 8004df4:	08004ea1 	.word	0x08004ea1
 8004df8:	08004ea1 	.word	0x08004ea1
 8004dfc:	08004ea1 	.word	0x08004ea1
 8004e00:	08004ea1 	.word	0x08004ea1
 8004e04:	08004ea1 	.word	0x08004ea1
 8004e08:	08004ea1 	.word	0x08004ea1
 8004e0c:	08004e81 	.word	0x08004e81
 8004e10:	08004ea1 	.word	0x08004ea1
 8004e14:	08004ea1 	.word	0x08004ea1
 8004e18:	08004ea1 	.word	0x08004ea1
 8004e1c:	08004ea1 	.word	0x08004ea1
 8004e20:	08004ea1 	.word	0x08004ea1
 8004e24:	08004ea1 	.word	0x08004ea1
 8004e28:	08004ea1 	.word	0x08004ea1
 8004e2c:	08004e89 	.word	0x08004e89
 8004e30:	08004ea1 	.word	0x08004ea1
 8004e34:	08004ea1 	.word	0x08004ea1
 8004e38:	08004ea1 	.word	0x08004ea1
 8004e3c:	08004ea1 	.word	0x08004ea1
 8004e40:	08004ea1 	.word	0x08004ea1
 8004e44:	08004ea1 	.word	0x08004ea1
 8004e48:	08004ea1 	.word	0x08004ea1
 8004e4c:	08004e91 	.word	0x08004e91
 8004e50:	08004ea1 	.word	0x08004ea1
 8004e54:	08004ea1 	.word	0x08004ea1
 8004e58:	08004ea1 	.word	0x08004ea1
 8004e5c:	08004ea1 	.word	0x08004ea1
 8004e60:	08004ea1 	.word	0x08004ea1
 8004e64:	08004ea1 	.word	0x08004ea1
 8004e68:	08004ea1 	.word	0x08004ea1
 8004e6c:	08004e99 	.word	0x08004e99
 8004e70:	2301      	movs	r3, #1
 8004e72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e76:	e222      	b.n	80052be <UART_SetConfig+0x5a6>
 8004e78:	2304      	movs	r3, #4
 8004e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e7e:	e21e      	b.n	80052be <UART_SetConfig+0x5a6>
 8004e80:	2308      	movs	r3, #8
 8004e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e86:	e21a      	b.n	80052be <UART_SetConfig+0x5a6>
 8004e88:	2310      	movs	r3, #16
 8004e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e8e:	e216      	b.n	80052be <UART_SetConfig+0x5a6>
 8004e90:	2320      	movs	r3, #32
 8004e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e96:	e212      	b.n	80052be <UART_SetConfig+0x5a6>
 8004e98:	2340      	movs	r3, #64	; 0x40
 8004e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004e9e:	e20e      	b.n	80052be <UART_SetConfig+0x5a6>
 8004ea0:	2380      	movs	r3, #128	; 0x80
 8004ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ea6:	e20a      	b.n	80052be <UART_SetConfig+0x5a6>
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a69      	ldr	r2, [pc, #420]	; (8005054 <UART_SetConfig+0x33c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d130      	bne.n	8004f14 <UART_SetConfig+0x1fc>
 8004eb2:	4b67      	ldr	r3, [pc, #412]	; (8005050 <UART_SetConfig+0x338>)
 8004eb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d826      	bhi.n	8004f0c <UART_SetConfig+0x1f4>
 8004ebe:	a201      	add	r2, pc, #4	; (adr r2, 8004ec4 <UART_SetConfig+0x1ac>)
 8004ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ec4:	08004edd 	.word	0x08004edd
 8004ec8:	08004ee5 	.word	0x08004ee5
 8004ecc:	08004eed 	.word	0x08004eed
 8004ed0:	08004ef5 	.word	0x08004ef5
 8004ed4:	08004efd 	.word	0x08004efd
 8004ed8:	08004f05 	.word	0x08004f05
 8004edc:	2300      	movs	r3, #0
 8004ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ee2:	e1ec      	b.n	80052be <UART_SetConfig+0x5a6>
 8004ee4:	2304      	movs	r3, #4
 8004ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004eea:	e1e8      	b.n	80052be <UART_SetConfig+0x5a6>
 8004eec:	2308      	movs	r3, #8
 8004eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ef2:	e1e4      	b.n	80052be <UART_SetConfig+0x5a6>
 8004ef4:	2310      	movs	r3, #16
 8004ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004efa:	e1e0      	b.n	80052be <UART_SetConfig+0x5a6>
 8004efc:	2320      	movs	r3, #32
 8004efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f02:	e1dc      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f04:	2340      	movs	r3, #64	; 0x40
 8004f06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f0a:	e1d8      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f0c:	2380      	movs	r3, #128	; 0x80
 8004f0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f12:	e1d4      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a4f      	ldr	r2, [pc, #316]	; (8005058 <UART_SetConfig+0x340>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d130      	bne.n	8004f80 <UART_SetConfig+0x268>
 8004f1e:	4b4c      	ldr	r3, [pc, #304]	; (8005050 <UART_SetConfig+0x338>)
 8004f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f22:	f003 0307 	and.w	r3, r3, #7
 8004f26:	2b05      	cmp	r3, #5
 8004f28:	d826      	bhi.n	8004f78 <UART_SetConfig+0x260>
 8004f2a:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <UART_SetConfig+0x218>)
 8004f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f30:	08004f49 	.word	0x08004f49
 8004f34:	08004f51 	.word	0x08004f51
 8004f38:	08004f59 	.word	0x08004f59
 8004f3c:	08004f61 	.word	0x08004f61
 8004f40:	08004f69 	.word	0x08004f69
 8004f44:	08004f71 	.word	0x08004f71
 8004f48:	2300      	movs	r3, #0
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f4e:	e1b6      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f50:	2304      	movs	r3, #4
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f56:	e1b2      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f58:	2308      	movs	r3, #8
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f5e:	e1ae      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f60:	2310      	movs	r3, #16
 8004f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f66:	e1aa      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f68:	2320      	movs	r3, #32
 8004f6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f6e:	e1a6      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f70:	2340      	movs	r3, #64	; 0x40
 8004f72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f76:	e1a2      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f78:	2380      	movs	r3, #128	; 0x80
 8004f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004f7e:	e19e      	b.n	80052be <UART_SetConfig+0x5a6>
 8004f80:	697b      	ldr	r3, [r7, #20]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a35      	ldr	r2, [pc, #212]	; (800505c <UART_SetConfig+0x344>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d130      	bne.n	8004fec <UART_SetConfig+0x2d4>
 8004f8a:	4b31      	ldr	r3, [pc, #196]	; (8005050 <UART_SetConfig+0x338>)
 8004f8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f8e:	f003 0307 	and.w	r3, r3, #7
 8004f92:	2b05      	cmp	r3, #5
 8004f94:	d826      	bhi.n	8004fe4 <UART_SetConfig+0x2cc>
 8004f96:	a201      	add	r2, pc, #4	; (adr r2, 8004f9c <UART_SetConfig+0x284>)
 8004f98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f9c:	08004fb5 	.word	0x08004fb5
 8004fa0:	08004fbd 	.word	0x08004fbd
 8004fa4:	08004fc5 	.word	0x08004fc5
 8004fa8:	08004fcd 	.word	0x08004fcd
 8004fac:	08004fd5 	.word	0x08004fd5
 8004fb0:	08004fdd 	.word	0x08004fdd
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fba:	e180      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fbc:	2304      	movs	r3, #4
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fc2:	e17c      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fc4:	2308      	movs	r3, #8
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fca:	e178      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fd2:	e174      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fd4:	2320      	movs	r3, #32
 8004fd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fda:	e170      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fdc:	2340      	movs	r3, #64	; 0x40
 8004fde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fe2:	e16c      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fe4:	2380      	movs	r3, #128	; 0x80
 8004fe6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004fea:	e168      	b.n	80052be <UART_SetConfig+0x5a6>
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1b      	ldr	r2, [pc, #108]	; (8005060 <UART_SetConfig+0x348>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d142      	bne.n	800507c <UART_SetConfig+0x364>
 8004ff6:	4b16      	ldr	r3, [pc, #88]	; (8005050 <UART_SetConfig+0x338>)
 8004ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ffa:	f003 0307 	and.w	r3, r3, #7
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d838      	bhi.n	8005074 <UART_SetConfig+0x35c>
 8005002:	a201      	add	r2, pc, #4	; (adr r2, 8005008 <UART_SetConfig+0x2f0>)
 8005004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005008:	08005021 	.word	0x08005021
 800500c:	08005029 	.word	0x08005029
 8005010:	08005031 	.word	0x08005031
 8005014:	08005039 	.word	0x08005039
 8005018:	08005065 	.word	0x08005065
 800501c:	0800506d 	.word	0x0800506d
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005026:	e14a      	b.n	80052be <UART_SetConfig+0x5a6>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800502e:	e146      	b.n	80052be <UART_SetConfig+0x5a6>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005036:	e142      	b.n	80052be <UART_SetConfig+0x5a6>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e13e      	b.n	80052be <UART_SetConfig+0x5a6>
 8005040:	cfff69f3 	.word	0xcfff69f3
 8005044:	58000c00 	.word	0x58000c00
 8005048:	11fff4ff 	.word	0x11fff4ff
 800504c:	40011000 	.word	0x40011000
 8005050:	58024400 	.word	0x58024400
 8005054:	40004400 	.word	0x40004400
 8005058:	40004800 	.word	0x40004800
 800505c:	40004c00 	.word	0x40004c00
 8005060:	40005000 	.word	0x40005000
 8005064:	2320      	movs	r3, #32
 8005066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506a:	e128      	b.n	80052be <UART_SetConfig+0x5a6>
 800506c:	2340      	movs	r3, #64	; 0x40
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005072:	e124      	b.n	80052be <UART_SetConfig+0x5a6>
 8005074:	2380      	movs	r3, #128	; 0x80
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800507a:	e120      	b.n	80052be <UART_SetConfig+0x5a6>
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4acb      	ldr	r2, [pc, #812]	; (80053b0 <UART_SetConfig+0x698>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d176      	bne.n	8005174 <UART_SetConfig+0x45c>
 8005086:	4bcb      	ldr	r3, [pc, #812]	; (80053b4 <UART_SetConfig+0x69c>)
 8005088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800508a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800508e:	2b28      	cmp	r3, #40	; 0x28
 8005090:	d86c      	bhi.n	800516c <UART_SetConfig+0x454>
 8005092:	a201      	add	r2, pc, #4	; (adr r2, 8005098 <UART_SetConfig+0x380>)
 8005094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005098:	0800513d 	.word	0x0800513d
 800509c:	0800516d 	.word	0x0800516d
 80050a0:	0800516d 	.word	0x0800516d
 80050a4:	0800516d 	.word	0x0800516d
 80050a8:	0800516d 	.word	0x0800516d
 80050ac:	0800516d 	.word	0x0800516d
 80050b0:	0800516d 	.word	0x0800516d
 80050b4:	0800516d 	.word	0x0800516d
 80050b8:	08005145 	.word	0x08005145
 80050bc:	0800516d 	.word	0x0800516d
 80050c0:	0800516d 	.word	0x0800516d
 80050c4:	0800516d 	.word	0x0800516d
 80050c8:	0800516d 	.word	0x0800516d
 80050cc:	0800516d 	.word	0x0800516d
 80050d0:	0800516d 	.word	0x0800516d
 80050d4:	0800516d 	.word	0x0800516d
 80050d8:	0800514d 	.word	0x0800514d
 80050dc:	0800516d 	.word	0x0800516d
 80050e0:	0800516d 	.word	0x0800516d
 80050e4:	0800516d 	.word	0x0800516d
 80050e8:	0800516d 	.word	0x0800516d
 80050ec:	0800516d 	.word	0x0800516d
 80050f0:	0800516d 	.word	0x0800516d
 80050f4:	0800516d 	.word	0x0800516d
 80050f8:	08005155 	.word	0x08005155
 80050fc:	0800516d 	.word	0x0800516d
 8005100:	0800516d 	.word	0x0800516d
 8005104:	0800516d 	.word	0x0800516d
 8005108:	0800516d 	.word	0x0800516d
 800510c:	0800516d 	.word	0x0800516d
 8005110:	0800516d 	.word	0x0800516d
 8005114:	0800516d 	.word	0x0800516d
 8005118:	0800515d 	.word	0x0800515d
 800511c:	0800516d 	.word	0x0800516d
 8005120:	0800516d 	.word	0x0800516d
 8005124:	0800516d 	.word	0x0800516d
 8005128:	0800516d 	.word	0x0800516d
 800512c:	0800516d 	.word	0x0800516d
 8005130:	0800516d 	.word	0x0800516d
 8005134:	0800516d 	.word	0x0800516d
 8005138:	08005165 	.word	0x08005165
 800513c:	2301      	movs	r3, #1
 800513e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005142:	e0bc      	b.n	80052be <UART_SetConfig+0x5a6>
 8005144:	2304      	movs	r3, #4
 8005146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800514a:	e0b8      	b.n	80052be <UART_SetConfig+0x5a6>
 800514c:	2308      	movs	r3, #8
 800514e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005152:	e0b4      	b.n	80052be <UART_SetConfig+0x5a6>
 8005154:	2310      	movs	r3, #16
 8005156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800515a:	e0b0      	b.n	80052be <UART_SetConfig+0x5a6>
 800515c:	2320      	movs	r3, #32
 800515e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005162:	e0ac      	b.n	80052be <UART_SetConfig+0x5a6>
 8005164:	2340      	movs	r3, #64	; 0x40
 8005166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800516a:	e0a8      	b.n	80052be <UART_SetConfig+0x5a6>
 800516c:	2380      	movs	r3, #128	; 0x80
 800516e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005172:	e0a4      	b.n	80052be <UART_SetConfig+0x5a6>
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a8f      	ldr	r2, [pc, #572]	; (80053b8 <UART_SetConfig+0x6a0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d130      	bne.n	80051e0 <UART_SetConfig+0x4c8>
 800517e:	4b8d      	ldr	r3, [pc, #564]	; (80053b4 <UART_SetConfig+0x69c>)
 8005180:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005182:	f003 0307 	and.w	r3, r3, #7
 8005186:	2b05      	cmp	r3, #5
 8005188:	d826      	bhi.n	80051d8 <UART_SetConfig+0x4c0>
 800518a:	a201      	add	r2, pc, #4	; (adr r2, 8005190 <UART_SetConfig+0x478>)
 800518c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005190:	080051a9 	.word	0x080051a9
 8005194:	080051b1 	.word	0x080051b1
 8005198:	080051b9 	.word	0x080051b9
 800519c:	080051c1 	.word	0x080051c1
 80051a0:	080051c9 	.word	0x080051c9
 80051a4:	080051d1 	.word	0x080051d1
 80051a8:	2300      	movs	r3, #0
 80051aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ae:	e086      	b.n	80052be <UART_SetConfig+0x5a6>
 80051b0:	2304      	movs	r3, #4
 80051b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b6:	e082      	b.n	80052be <UART_SetConfig+0x5a6>
 80051b8:	2308      	movs	r3, #8
 80051ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051be:	e07e      	b.n	80052be <UART_SetConfig+0x5a6>
 80051c0:	2310      	movs	r3, #16
 80051c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051c6:	e07a      	b.n	80052be <UART_SetConfig+0x5a6>
 80051c8:	2320      	movs	r3, #32
 80051ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ce:	e076      	b.n	80052be <UART_SetConfig+0x5a6>
 80051d0:	2340      	movs	r3, #64	; 0x40
 80051d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051d6:	e072      	b.n	80052be <UART_SetConfig+0x5a6>
 80051d8:	2380      	movs	r3, #128	; 0x80
 80051da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051de:	e06e      	b.n	80052be <UART_SetConfig+0x5a6>
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a75      	ldr	r2, [pc, #468]	; (80053bc <UART_SetConfig+0x6a4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d130      	bne.n	800524c <UART_SetConfig+0x534>
 80051ea:	4b72      	ldr	r3, [pc, #456]	; (80053b4 <UART_SetConfig+0x69c>)
 80051ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ee:	f003 0307 	and.w	r3, r3, #7
 80051f2:	2b05      	cmp	r3, #5
 80051f4:	d826      	bhi.n	8005244 <UART_SetConfig+0x52c>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <UART_SetConfig+0x4e4>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005215 	.word	0x08005215
 8005200:	0800521d 	.word	0x0800521d
 8005204:	08005225 	.word	0x08005225
 8005208:	0800522d 	.word	0x0800522d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800523d 	.word	0x0800523d
 8005214:	2300      	movs	r3, #0
 8005216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800521a:	e050      	b.n	80052be <UART_SetConfig+0x5a6>
 800521c:	2304      	movs	r3, #4
 800521e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005222:	e04c      	b.n	80052be <UART_SetConfig+0x5a6>
 8005224:	2308      	movs	r3, #8
 8005226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800522a:	e048      	b.n	80052be <UART_SetConfig+0x5a6>
 800522c:	2310      	movs	r3, #16
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e044      	b.n	80052be <UART_SetConfig+0x5a6>
 8005234:	2320      	movs	r3, #32
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e040      	b.n	80052be <UART_SetConfig+0x5a6>
 800523c:	2340      	movs	r3, #64	; 0x40
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e03c      	b.n	80052be <UART_SetConfig+0x5a6>
 8005244:	2380      	movs	r3, #128	; 0x80
 8005246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800524a:	e038      	b.n	80052be <UART_SetConfig+0x5a6>
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4a5b      	ldr	r2, [pc, #364]	; (80053c0 <UART_SetConfig+0x6a8>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d130      	bne.n	80052b8 <UART_SetConfig+0x5a0>
 8005256:	4b57      	ldr	r3, [pc, #348]	; (80053b4 <UART_SetConfig+0x69c>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f003 0307 	and.w	r3, r3, #7
 800525e:	2b05      	cmp	r3, #5
 8005260:	d826      	bhi.n	80052b0 <UART_SetConfig+0x598>
 8005262:	a201      	add	r2, pc, #4	; (adr r2, 8005268 <UART_SetConfig+0x550>)
 8005264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005268:	08005281 	.word	0x08005281
 800526c:	08005289 	.word	0x08005289
 8005270:	08005291 	.word	0x08005291
 8005274:	08005299 	.word	0x08005299
 8005278:	080052a1 	.word	0x080052a1
 800527c:	080052a9 	.word	0x080052a9
 8005280:	2302      	movs	r3, #2
 8005282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005286:	e01a      	b.n	80052be <UART_SetConfig+0x5a6>
 8005288:	2304      	movs	r3, #4
 800528a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800528e:	e016      	b.n	80052be <UART_SetConfig+0x5a6>
 8005290:	2308      	movs	r3, #8
 8005292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005296:	e012      	b.n	80052be <UART_SetConfig+0x5a6>
 8005298:	2310      	movs	r3, #16
 800529a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800529e:	e00e      	b.n	80052be <UART_SetConfig+0x5a6>
 80052a0:	2320      	movs	r3, #32
 80052a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052a6:	e00a      	b.n	80052be <UART_SetConfig+0x5a6>
 80052a8:	2340      	movs	r3, #64	; 0x40
 80052aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052ae:	e006      	b.n	80052be <UART_SetConfig+0x5a6>
 80052b0:	2380      	movs	r3, #128	; 0x80
 80052b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80052b6:	e002      	b.n	80052be <UART_SetConfig+0x5a6>
 80052b8:	2380      	movs	r3, #128	; 0x80
 80052ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <UART_SetConfig+0x6a8>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	f040 80f8 	bne.w	80054ba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80052ca:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80052ce:	2b20      	cmp	r3, #32
 80052d0:	dc46      	bgt.n	8005360 <UART_SetConfig+0x648>
 80052d2:	2b02      	cmp	r3, #2
 80052d4:	f2c0 8082 	blt.w	80053dc <UART_SetConfig+0x6c4>
 80052d8:	3b02      	subs	r3, #2
 80052da:	2b1e      	cmp	r3, #30
 80052dc:	d87e      	bhi.n	80053dc <UART_SetConfig+0x6c4>
 80052de:	a201      	add	r2, pc, #4	; (adr r2, 80052e4 <UART_SetConfig+0x5cc>)
 80052e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e4:	08005367 	.word	0x08005367
 80052e8:	080053dd 	.word	0x080053dd
 80052ec:	0800536f 	.word	0x0800536f
 80052f0:	080053dd 	.word	0x080053dd
 80052f4:	080053dd 	.word	0x080053dd
 80052f8:	080053dd 	.word	0x080053dd
 80052fc:	0800537f 	.word	0x0800537f
 8005300:	080053dd 	.word	0x080053dd
 8005304:	080053dd 	.word	0x080053dd
 8005308:	080053dd 	.word	0x080053dd
 800530c:	080053dd 	.word	0x080053dd
 8005310:	080053dd 	.word	0x080053dd
 8005314:	080053dd 	.word	0x080053dd
 8005318:	080053dd 	.word	0x080053dd
 800531c:	0800538f 	.word	0x0800538f
 8005320:	080053dd 	.word	0x080053dd
 8005324:	080053dd 	.word	0x080053dd
 8005328:	080053dd 	.word	0x080053dd
 800532c:	080053dd 	.word	0x080053dd
 8005330:	080053dd 	.word	0x080053dd
 8005334:	080053dd 	.word	0x080053dd
 8005338:	080053dd 	.word	0x080053dd
 800533c:	080053dd 	.word	0x080053dd
 8005340:	080053dd 	.word	0x080053dd
 8005344:	080053dd 	.word	0x080053dd
 8005348:	080053dd 	.word	0x080053dd
 800534c:	080053dd 	.word	0x080053dd
 8005350:	080053dd 	.word	0x080053dd
 8005354:	080053dd 	.word	0x080053dd
 8005358:	080053dd 	.word	0x080053dd
 800535c:	080053cf 	.word	0x080053cf
 8005360:	2b40      	cmp	r3, #64	; 0x40
 8005362:	d037      	beq.n	80053d4 <UART_SetConfig+0x6bc>
 8005364:	e03a      	b.n	80053dc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005366:	f7ff f865 	bl	8004434 <HAL_RCCEx_GetD3PCLK1Freq>
 800536a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800536c:	e03c      	b.n	80053e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800536e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005372:	4618      	mov	r0, r3
 8005374:	f7ff f874 	bl	8004460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800537c:	e034      	b.n	80053e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800537e:	f107 0318 	add.w	r3, r7, #24
 8005382:	4618      	mov	r0, r3
 8005384:	f7ff f9c0 	bl	8004708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800538c:	e02c      	b.n	80053e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800538e:	4b09      	ldr	r3, [pc, #36]	; (80053b4 <UART_SetConfig+0x69c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f003 0320 	and.w	r3, r3, #32
 8005396:	2b00      	cmp	r3, #0
 8005398:	d016      	beq.n	80053c8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800539a:	4b06      	ldr	r3, [pc, #24]	; (80053b4 <UART_SetConfig+0x69c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	08db      	lsrs	r3, r3, #3
 80053a0:	f003 0303 	and.w	r3, r3, #3
 80053a4:	4a07      	ldr	r2, [pc, #28]	; (80053c4 <UART_SetConfig+0x6ac>)
 80053a6:	fa22 f303 	lsr.w	r3, r2, r3
 80053aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053ac:	e01c      	b.n	80053e8 <UART_SetConfig+0x6d0>
 80053ae:	bf00      	nop
 80053b0:	40011400 	.word	0x40011400
 80053b4:	58024400 	.word	0x58024400
 80053b8:	40007800 	.word	0x40007800
 80053bc:	40007c00 	.word	0x40007c00
 80053c0:	58000c00 	.word	0x58000c00
 80053c4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80053c8:	4b9d      	ldr	r3, [pc, #628]	; (8005640 <UART_SetConfig+0x928>)
 80053ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053cc:	e00c      	b.n	80053e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053ce:	4b9d      	ldr	r3, [pc, #628]	; (8005644 <UART_SetConfig+0x92c>)
 80053d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053d2:	e009      	b.n	80053e8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053d4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053da:	e005      	b.n	80053e8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80053e6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80053e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 81de 	beq.w	80057ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	4a94      	ldr	r2, [pc, #592]	; (8005648 <UART_SetConfig+0x930>)
 80053f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053fa:	461a      	mov	r2, r3
 80053fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005402:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	685a      	ldr	r2, [r3, #4]
 8005408:	4613      	mov	r3, r2
 800540a:	005b      	lsls	r3, r3, #1
 800540c:	4413      	add	r3, r2
 800540e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005410:	429a      	cmp	r2, r3
 8005412:	d305      	bcc.n	8005420 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800541a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800541c:	429a      	cmp	r2, r3
 800541e:	d903      	bls.n	8005428 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005426:	e1c1      	b.n	80057ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800542a:	2200      	movs	r2, #0
 800542c:	60bb      	str	r3, [r7, #8]
 800542e:	60fa      	str	r2, [r7, #12]
 8005430:	697b      	ldr	r3, [r7, #20]
 8005432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005434:	4a84      	ldr	r2, [pc, #528]	; (8005648 <UART_SetConfig+0x930>)
 8005436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800543a:	b29b      	uxth	r3, r3
 800543c:	2200      	movs	r2, #0
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005446:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800544a:	f7fa ff45 	bl	80002d8 <__aeabi_uldivmod>
 800544e:	4602      	mov	r2, r0
 8005450:	460b      	mov	r3, r1
 8005452:	4610      	mov	r0, r2
 8005454:	4619      	mov	r1, r3
 8005456:	f04f 0200 	mov.w	r2, #0
 800545a:	f04f 0300 	mov.w	r3, #0
 800545e:	020b      	lsls	r3, r1, #8
 8005460:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005464:	0202      	lsls	r2, r0, #8
 8005466:	6979      	ldr	r1, [r7, #20]
 8005468:	6849      	ldr	r1, [r1, #4]
 800546a:	0849      	lsrs	r1, r1, #1
 800546c:	2000      	movs	r0, #0
 800546e:	460c      	mov	r4, r1
 8005470:	4605      	mov	r5, r0
 8005472:	eb12 0804 	adds.w	r8, r2, r4
 8005476:	eb43 0905 	adc.w	r9, r3, r5
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	469a      	mov	sl, r3
 8005482:	4693      	mov	fp, r2
 8005484:	4652      	mov	r2, sl
 8005486:	465b      	mov	r3, fp
 8005488:	4640      	mov	r0, r8
 800548a:	4649      	mov	r1, r9
 800548c:	f7fa ff24 	bl	80002d8 <__aeabi_uldivmod>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4613      	mov	r3, r2
 8005496:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800549e:	d308      	bcc.n	80054b2 <UART_SetConfig+0x79a>
 80054a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054a6:	d204      	bcs.n	80054b2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80054ae:	60da      	str	r2, [r3, #12]
 80054b0:	e17c      	b.n	80057ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80054b2:	2301      	movs	r3, #1
 80054b4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80054b8:	e178      	b.n	80057ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	69db      	ldr	r3, [r3, #28]
 80054be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054c2:	f040 80c5 	bne.w	8005650 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80054c6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80054ca:	2b20      	cmp	r3, #32
 80054cc:	dc48      	bgt.n	8005560 <UART_SetConfig+0x848>
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	db7b      	blt.n	80055ca <UART_SetConfig+0x8b2>
 80054d2:	2b20      	cmp	r3, #32
 80054d4:	d879      	bhi.n	80055ca <UART_SetConfig+0x8b2>
 80054d6:	a201      	add	r2, pc, #4	; (adr r2, 80054dc <UART_SetConfig+0x7c4>)
 80054d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054dc:	08005567 	.word	0x08005567
 80054e0:	0800556f 	.word	0x0800556f
 80054e4:	080055cb 	.word	0x080055cb
 80054e8:	080055cb 	.word	0x080055cb
 80054ec:	08005577 	.word	0x08005577
 80054f0:	080055cb 	.word	0x080055cb
 80054f4:	080055cb 	.word	0x080055cb
 80054f8:	080055cb 	.word	0x080055cb
 80054fc:	08005587 	.word	0x08005587
 8005500:	080055cb 	.word	0x080055cb
 8005504:	080055cb 	.word	0x080055cb
 8005508:	080055cb 	.word	0x080055cb
 800550c:	080055cb 	.word	0x080055cb
 8005510:	080055cb 	.word	0x080055cb
 8005514:	080055cb 	.word	0x080055cb
 8005518:	080055cb 	.word	0x080055cb
 800551c:	08005597 	.word	0x08005597
 8005520:	080055cb 	.word	0x080055cb
 8005524:	080055cb 	.word	0x080055cb
 8005528:	080055cb 	.word	0x080055cb
 800552c:	080055cb 	.word	0x080055cb
 8005530:	080055cb 	.word	0x080055cb
 8005534:	080055cb 	.word	0x080055cb
 8005538:	080055cb 	.word	0x080055cb
 800553c:	080055cb 	.word	0x080055cb
 8005540:	080055cb 	.word	0x080055cb
 8005544:	080055cb 	.word	0x080055cb
 8005548:	080055cb 	.word	0x080055cb
 800554c:	080055cb 	.word	0x080055cb
 8005550:	080055cb 	.word	0x080055cb
 8005554:	080055cb 	.word	0x080055cb
 8005558:	080055cb 	.word	0x080055cb
 800555c:	080055bd 	.word	0x080055bd
 8005560:	2b40      	cmp	r3, #64	; 0x40
 8005562:	d02e      	beq.n	80055c2 <UART_SetConfig+0x8aa>
 8005564:	e031      	b.n	80055ca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005566:	f7fd fff3 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 800556a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800556c:	e033      	b.n	80055d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800556e:	f7fe f805 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 8005572:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005574:	e02f      	b.n	80055d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005576:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800557a:	4618      	mov	r0, r3
 800557c:	f7fe ff70 	bl	8004460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005582:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005584:	e027      	b.n	80055d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005586:	f107 0318 	add.w	r3, r7, #24
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff f8bc 	bl	8004708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005590:	69fb      	ldr	r3, [r7, #28]
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005594:	e01f      	b.n	80055d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005596:	4b2d      	ldr	r3, [pc, #180]	; (800564c <UART_SetConfig+0x934>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0320 	and.w	r3, r3, #32
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d009      	beq.n	80055b6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80055a2:	4b2a      	ldr	r3, [pc, #168]	; (800564c <UART_SetConfig+0x934>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	08db      	lsrs	r3, r3, #3
 80055a8:	f003 0303 	and.w	r3, r3, #3
 80055ac:	4a24      	ldr	r2, [pc, #144]	; (8005640 <UART_SetConfig+0x928>)
 80055ae:	fa22 f303 	lsr.w	r3, r2, r3
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80055b4:	e00f      	b.n	80055d6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80055b6:	4b22      	ldr	r3, [pc, #136]	; (8005640 <UART_SetConfig+0x928>)
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055ba:	e00c      	b.n	80055d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80055bc:	4b21      	ldr	r3, [pc, #132]	; (8005644 <UART_SetConfig+0x92c>)
 80055be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c0:	e009      	b.n	80055d6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	e005      	b.n	80055d6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80055d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 80e7 	beq.w	80057ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055de:	697b      	ldr	r3, [r7, #20]
 80055e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e2:	4a19      	ldr	r2, [pc, #100]	; (8005648 <UART_SetConfig+0x930>)
 80055e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055e8:	461a      	mov	r2, r3
 80055ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80055f0:	005a      	lsls	r2, r3, #1
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	085b      	lsrs	r3, r3, #1
 80055f8:	441a      	add	r2, r3
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005602:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005606:	2b0f      	cmp	r3, #15
 8005608:	d916      	bls.n	8005638 <UART_SetConfig+0x920>
 800560a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d212      	bcs.n	8005638 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005614:	b29b      	uxth	r3, r3
 8005616:	f023 030f 	bic.w	r3, r3, #15
 800561a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	085b      	lsrs	r3, r3, #1
 8005620:	b29b      	uxth	r3, r3
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	b29a      	uxth	r2, r3
 8005628:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800562a:	4313      	orrs	r3, r2
 800562c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005634:	60da      	str	r2, [r3, #12]
 8005636:	e0b9      	b.n	80057ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800563e:	e0b5      	b.n	80057ac <UART_SetConfig+0xa94>
 8005640:	03d09000 	.word	0x03d09000
 8005644:	003d0900 	.word	0x003d0900
 8005648:	080063ec 	.word	0x080063ec
 800564c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005650:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005654:	2b20      	cmp	r3, #32
 8005656:	dc49      	bgt.n	80056ec <UART_SetConfig+0x9d4>
 8005658:	2b00      	cmp	r3, #0
 800565a:	db7c      	blt.n	8005756 <UART_SetConfig+0xa3e>
 800565c:	2b20      	cmp	r3, #32
 800565e:	d87a      	bhi.n	8005756 <UART_SetConfig+0xa3e>
 8005660:	a201      	add	r2, pc, #4	; (adr r2, 8005668 <UART_SetConfig+0x950>)
 8005662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005666:	bf00      	nop
 8005668:	080056f3 	.word	0x080056f3
 800566c:	080056fb 	.word	0x080056fb
 8005670:	08005757 	.word	0x08005757
 8005674:	08005757 	.word	0x08005757
 8005678:	08005703 	.word	0x08005703
 800567c:	08005757 	.word	0x08005757
 8005680:	08005757 	.word	0x08005757
 8005684:	08005757 	.word	0x08005757
 8005688:	08005713 	.word	0x08005713
 800568c:	08005757 	.word	0x08005757
 8005690:	08005757 	.word	0x08005757
 8005694:	08005757 	.word	0x08005757
 8005698:	08005757 	.word	0x08005757
 800569c:	08005757 	.word	0x08005757
 80056a0:	08005757 	.word	0x08005757
 80056a4:	08005757 	.word	0x08005757
 80056a8:	08005723 	.word	0x08005723
 80056ac:	08005757 	.word	0x08005757
 80056b0:	08005757 	.word	0x08005757
 80056b4:	08005757 	.word	0x08005757
 80056b8:	08005757 	.word	0x08005757
 80056bc:	08005757 	.word	0x08005757
 80056c0:	08005757 	.word	0x08005757
 80056c4:	08005757 	.word	0x08005757
 80056c8:	08005757 	.word	0x08005757
 80056cc:	08005757 	.word	0x08005757
 80056d0:	08005757 	.word	0x08005757
 80056d4:	08005757 	.word	0x08005757
 80056d8:	08005757 	.word	0x08005757
 80056dc:	08005757 	.word	0x08005757
 80056e0:	08005757 	.word	0x08005757
 80056e4:	08005757 	.word	0x08005757
 80056e8:	08005749 	.word	0x08005749
 80056ec:	2b40      	cmp	r3, #64	; 0x40
 80056ee:	d02e      	beq.n	800574e <UART_SetConfig+0xa36>
 80056f0:	e031      	b.n	8005756 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056f2:	f7fd ff2d 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 80056f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80056f8:	e033      	b.n	8005762 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056fa:	f7fd ff3f 	bl	800357c <HAL_RCC_GetPCLK2Freq>
 80056fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005700:	e02f      	b.n	8005762 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005706:	4618      	mov	r0, r3
 8005708:	f7fe feaa 	bl	8004460 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005710:	e027      	b.n	8005762 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005712:	f107 0318 	add.w	r3, r7, #24
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fff6 	bl	8004708 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005720:	e01f      	b.n	8005762 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005722:	4b2d      	ldr	r3, [pc, #180]	; (80057d8 <UART_SetConfig+0xac0>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f003 0320 	and.w	r3, r3, #32
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800572e:	4b2a      	ldr	r3, [pc, #168]	; (80057d8 <UART_SetConfig+0xac0>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	08db      	lsrs	r3, r3, #3
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	4a28      	ldr	r2, [pc, #160]	; (80057dc <UART_SetConfig+0xac4>)
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005740:	e00f      	b.n	8005762 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005742:	4b26      	ldr	r3, [pc, #152]	; (80057dc <UART_SetConfig+0xac4>)
 8005744:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005746:	e00c      	b.n	8005762 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005748:	4b25      	ldr	r3, [pc, #148]	; (80057e0 <UART_SetConfig+0xac8>)
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800574c:	e009      	b.n	8005762 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005754:	e005      	b.n	8005762 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005760:	bf00      	nop
    }

    if (pclk != 0U)
 8005762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005764:	2b00      	cmp	r3, #0
 8005766:	d021      	beq.n	80057ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005768:	697b      	ldr	r3, [r7, #20]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	4a1d      	ldr	r2, [pc, #116]	; (80057e4 <UART_SetConfig+0xacc>)
 800576e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005772:	461a      	mov	r2, r3
 8005774:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005776:	fbb3 f2f2 	udiv	r2, r3, r2
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	441a      	add	r2, r3
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	fbb2 f3f3 	udiv	r3, r2, r3
 800578a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800578c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800578e:	2b0f      	cmp	r3, #15
 8005790:	d909      	bls.n	80057a6 <UART_SetConfig+0xa8e>
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005798:	d205      	bcs.n	80057a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	b29a      	uxth	r2, r3
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	60da      	str	r2, [r3, #12]
 80057a4:	e002      	b.n	80057ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80057a6:	2301      	movs	r3, #1
 80057a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2200      	movs	r2, #0
 80057c6:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80057c8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3748      	adds	r7, #72	; 0x48
 80057d0:	46bd      	mov	sp, r7
 80057d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057d6:	bf00      	nop
 80057d8:	58024400 	.word	0x58024400
 80057dc:	03d09000 	.word	0x03d09000
 80057e0:	003d0900 	.word	0x003d0900
 80057e4:	080063ec 	.word	0x080063ec

080057e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057f4:	f003 0301 	and.w	r3, r3, #1
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d00a      	beq.n	8005812 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	430a      	orrs	r2, r1
 8005810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b00      	cmp	r3, #0
 800581c:	d00a      	beq.n	8005834 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005838:	f003 0304 	and.w	r3, r3, #4
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00a      	beq.n	8005856 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	430a      	orrs	r2, r1
 8005876:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00a      	beq.n	800589a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	430a      	orrs	r2, r1
 8005898:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800589e:	f003 0320 	and.w	r3, r3, #32
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d00a      	beq.n	80058bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	430a      	orrs	r2, r1
 80058ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01a      	beq.n	80058fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058e6:	d10a      	bne.n	80058fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	430a      	orrs	r2, r1
 80058fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	430a      	orrs	r2, r1
 800591e:	605a      	str	r2, [r3, #4]
  }
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af02      	add	r7, sp, #8
 8005932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800593c:	f7fb fd5e 	bl	80013fc <HAL_GetTick>
 8005940:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0308 	and.w	r3, r3, #8
 800594c:	2b08      	cmp	r3, #8
 800594e:	d10e      	bne.n	800596e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005950:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005954:	9300      	str	r3, [sp, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2200      	movs	r2, #0
 800595a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f82f 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d001      	beq.n	800596e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e025      	b.n	80059ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b04      	cmp	r3, #4
 800597a:	d10e      	bne.n	800599a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800597c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2200      	movs	r2, #0
 8005986:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f819 	bl	80059c2 <UART_WaitOnFlagUntilTimeout>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d001      	beq.n	800599a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e00f      	b.n	80059ba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2220      	movs	r2, #32
 800599e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2220      	movs	r2, #32
 80059a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80059b8:	2300      	movs	r3, #0
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b09c      	sub	sp, #112	; 0x70
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	60f8      	str	r0, [r7, #12]
 80059ca:	60b9      	str	r1, [r7, #8]
 80059cc:	603b      	str	r3, [r7, #0]
 80059ce:	4613      	mov	r3, r2
 80059d0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059d2:	e0a9      	b.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059da:	f000 80a5 	beq.w	8005b28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059de:	f7fb fd0d 	bl	80013fc <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d302      	bcc.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
 80059ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d140      	bne.n	8005a76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a08:	667b      	str	r3, [r7, #100]	; 0x64
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e6      	bne.n	80059f4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3308      	adds	r3, #8
 8005a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a30:	e853 3f00 	ldrex	r3, [r3]
 8005a34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a38:	f023 0301 	bic.w	r3, r3, #1
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005a46:	64ba      	str	r2, [r7, #72]	; 0x48
 8005a48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a4e:	e841 2300 	strex	r3, r2, [r1]
 8005a52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d1e5      	bne.n	8005a26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2220      	movs	r2, #32
 8005a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005a72:	2303      	movs	r3, #3
 8005a74:	e069      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d051      	beq.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a92:	d149      	bne.n	8005b28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ab2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	461a      	mov	r2, r3
 8005aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005abc:	637b      	str	r3, [r7, #52]	; 0x34
 8005abe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ac2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e6      	bne.n	8005a9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	3308      	adds	r3, #8
 8005ad6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	e853 3f00 	ldrex	r3, [r3]
 8005ade:	613b      	str	r3, [r7, #16]
   return(result);
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	f023 0301 	bic.w	r3, r3, #1
 8005ae6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	3308      	adds	r3, #8
 8005aee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005af0:	623a      	str	r2, [r7, #32]
 8005af2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af4:	69f9      	ldr	r1, [r7, #28]
 8005af6:	6a3a      	ldr	r2, [r7, #32]
 8005af8:	e841 2300 	strex	r3, r2, [r1]
 8005afc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005afe:	69bb      	ldr	r3, [r7, #24]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e5      	bne.n	8005ad0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2220      	movs	r2, #32
 8005b08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2220      	movs	r2, #32
 8005b18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e010      	b.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	69da      	ldr	r2, [r3, #28]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	4013      	ands	r3, r2
 8005b32:	68ba      	ldr	r2, [r7, #8]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	bf0c      	ite	eq
 8005b38:	2301      	moveq	r3, #1
 8005b3a:	2300      	movne	r3, #0
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	461a      	mov	r2, r3
 8005b40:	79fb      	ldrb	r3, [r7, #7]
 8005b42:	429a      	cmp	r2, r3
 8005b44:	f43f af46 	beq.w	80059d4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3770      	adds	r7, #112	; 0x70
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}

08005b52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005b52:	b480      	push	{r7}
 8005b54:	b085      	sub	sp, #20
 8005b56:	af00      	add	r7, sp, #0
 8005b58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d101      	bne.n	8005b68 <HAL_UARTEx_DisableFifoMode+0x16>
 8005b64:	2302      	movs	r3, #2
 8005b66:	e027      	b.n	8005bb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2224      	movs	r2, #36	; 0x24
 8005b74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	f022 0201 	bic.w	r2, r2, #1
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2200      	movs	r2, #0
 8005bb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3714      	adds	r7, #20
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc2:	4770      	bx	lr

08005bc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d101      	bne.n	8005bdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005bd8:	2302      	movs	r3, #2
 8005bda:	e02d      	b.n	8005c38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2224      	movs	r2, #36	; 0x24
 8005be8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f022 0201 	bic.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	430a      	orrs	r2, r1
 8005c16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 f84f 	bl	8005cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2220      	movs	r2, #32
 8005c2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	2200      	movs	r2, #0
 8005c32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005c36:	2300      	movs	r3, #0
}
 8005c38:	4618      	mov	r0, r3
 8005c3a:	3710      	adds	r7, #16
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}

08005c40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005c54:	2302      	movs	r3, #2
 8005c56:	e02d      	b.n	8005cb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2224      	movs	r2, #36	; 0x24
 8005c64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	683a      	ldr	r2, [r7, #0]
 8005c90:	430a      	orrs	r2, r1
 8005c92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 f811 	bl	8005cbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005cb2:	2300      	movs	r3, #0
}
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	3710      	adds	r7, #16
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	bd80      	pop	{r7, pc}

08005cbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b085      	sub	sp, #20
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d108      	bne.n	8005cde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005cdc:	e031      	b.n	8005d42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005cde:	2310      	movs	r3, #16
 8005ce0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ce2:	2310      	movs	r3, #16
 8005ce4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	689b      	ldr	r3, [r3, #8]
 8005cec:	0e5b      	lsrs	r3, r3, #25
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	f003 0307 	and.w	r3, r3, #7
 8005cf4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	689b      	ldr	r3, [r3, #8]
 8005cfc:	0f5b      	lsrs	r3, r3, #29
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	f003 0307 	and.w	r3, r3, #7
 8005d04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d06:	7bbb      	ldrb	r3, [r7, #14]
 8005d08:	7b3a      	ldrb	r2, [r7, #12]
 8005d0a:	4911      	ldr	r1, [pc, #68]	; (8005d50 <UARTEx_SetNbDataToProcess+0x94>)
 8005d0c:	5c8a      	ldrb	r2, [r1, r2]
 8005d0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005d12:	7b3a      	ldrb	r2, [r7, #12]
 8005d14:	490f      	ldr	r1, [pc, #60]	; (8005d54 <UARTEx_SetNbDataToProcess+0x98>)
 8005d16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005d18:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d1c:	b29a      	uxth	r2, r3
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
 8005d26:	7b7a      	ldrb	r2, [r7, #13]
 8005d28:	4909      	ldr	r1, [pc, #36]	; (8005d50 <UARTEx_SetNbDataToProcess+0x94>)
 8005d2a:	5c8a      	ldrb	r2, [r1, r2]
 8005d2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005d30:	7b7a      	ldrb	r2, [r7, #13]
 8005d32:	4908      	ldr	r1, [pc, #32]	; (8005d54 <UARTEx_SetNbDataToProcess+0x98>)
 8005d34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005d36:	fb93 f3f2 	sdiv	r3, r3, r2
 8005d3a:	b29a      	uxth	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005d42:	bf00      	nop
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop
 8005d50:	08006404 	.word	0x08006404
 8005d54:	0800640c 	.word	0x0800640c

08005d58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d58:	b084      	sub	sp, #16
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	f107 001c 	add.w	r0, r7, #28
 8005d66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	d120      	bne.n	8005db2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	4b2a      	ldr	r3, [pc, #168]	; (8005e2c <USB_CoreInit+0xd4>)
 8005d82:	4013      	ands	r3, r2
 8005d84:	687a      	ldr	r2, [r7, #4]
 8005d86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	68db      	ldr	r3, [r3, #12]
 8005d8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d105      	bne.n	8005da6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	68db      	ldr	r3, [r3, #12]
 8005d9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 faac 	bl	8006304 <USB_CoreReset>
 8005dac:	4603      	mov	r3, r0
 8005dae:	73fb      	strb	r3, [r7, #15]
 8005db0:	e01a      	b.n	8005de8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 faa0 	bl	8006304 <USB_CoreReset>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	639a      	str	r2, [r3, #56]	; 0x38
 8005dda:	e005      	b.n	8005de8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d116      	bne.n	8005e1c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005dfc:	4b0c      	ldr	r3, [pc, #48]	; (8005e30 <USB_CoreInit+0xd8>)
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	687a      	ldr	r2, [r7, #4]
 8005e02:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689b      	ldr	r3, [r3, #8]
 8005e08:	f043 0206 	orr.w	r2, r3, #6
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f043 0220 	orr.w	r2, r3, #32
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e28:	b004      	add	sp, #16
 8005e2a:	4770      	bx	lr
 8005e2c:	ffbdffbf 	.word	0xffbdffbf
 8005e30:	03ee0000 	.word	0x03ee0000

08005e34 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f023 0201 	bic.w	r2, r3, #1
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005e56:	b580      	push	{r7, lr}
 8005e58:	b084      	sub	sp, #16
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
 8005e5e:	460b      	mov	r3, r1
 8005e60:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005e72:	78fb      	ldrb	r3, [r7, #3]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d115      	bne.n	8005ea4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005e84:	2001      	movs	r0, #1
 8005e86:	f7fb fac5 	bl	8001414 <HAL_Delay>
      ms++;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3301      	adds	r3, #1
 8005e8e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fa29 	bl	80062e8 <USB_GetMode>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d01e      	beq.n	8005eda <USB_SetCurrentMode+0x84>
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	2b31      	cmp	r3, #49	; 0x31
 8005ea0:	d9f0      	bls.n	8005e84 <USB_SetCurrentMode+0x2e>
 8005ea2:	e01a      	b.n	8005eda <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d115      	bne.n	8005ed6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005eb6:	2001      	movs	r0, #1
 8005eb8:	f7fb faac 	bl	8001414 <HAL_Delay>
      ms++;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f000 fa10 	bl	80062e8 <USB_GetMode>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d005      	beq.n	8005eda <USB_SetCurrentMode+0x84>
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2b31      	cmp	r3, #49	; 0x31
 8005ed2:	d9f0      	bls.n	8005eb6 <USB_SetCurrentMode+0x60>
 8005ed4:	e001      	b.n	8005eda <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e005      	b.n	8005ee6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2b32      	cmp	r3, #50	; 0x32
 8005ede:	d101      	bne.n	8005ee4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e000      	b.n	8005ee6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b086      	sub	sp, #24
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005efe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	613b      	str	r3, [r7, #16]
 8005f0e:	e009      	b.n	8005f24 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	693b      	ldr	r3, [r7, #16]
 8005f14:	3340      	adds	r3, #64	; 0x40
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	3301      	adds	r3, #1
 8005f22:	613b      	str	r3, [r7, #16]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	2b0e      	cmp	r3, #14
 8005f28:	d9f2      	bls.n	8005f10 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d11c      	bne.n	8005f6a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	685b      	ldr	r3, [r3, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005f3e:	f043 0302 	orr.w	r3, r3, #2
 8005f42:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f48:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	e005      	b.n	8005f76 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	2300      	movs	r3, #0
 8005f80:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f88:	4619      	mov	r1, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f90:	461a      	mov	r2, r3
 8005f92:	680b      	ldr	r3, [r1, #0]
 8005f94:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d10c      	bne.n	8005fb6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d104      	bne.n	8005fac <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005fa2:	2100      	movs	r1, #0
 8005fa4:	6878      	ldr	r0, [r7, #4]
 8005fa6:	f000 f965 	bl	8006274 <USB_SetDevSpeed>
 8005faa:	e008      	b.n	8005fbe <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005fac:	2101      	movs	r1, #1
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 f960 	bl	8006274 <USB_SetDevSpeed>
 8005fb4:	e003      	b.n	8005fbe <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005fb6:	2103      	movs	r1, #3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f000 f95b 	bl	8006274 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005fbe:	2110      	movs	r1, #16
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f8f3 	bl	80061ac <USB_FlushTxFifo>
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d001      	beq.n	8005fd0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f000 f91f 	bl	8006214 <USB_FlushRxFifo>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005fdc:	2301      	movs	r3, #1
 8005fde:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	2300      	movs	r3, #0
 8005fea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffe:	461a      	mov	r2, r3
 8006000:	2300      	movs	r3, #0
 8006002:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006004:	2300      	movs	r3, #0
 8006006:	613b      	str	r3, [r7, #16]
 8006008:	e043      	b.n	8006092 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	4413      	add	r3, r2
 8006012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800601c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006020:	d118      	bne.n	8006054 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d10a      	bne.n	800603e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	015a      	lsls	r2, r3, #5
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006034:	461a      	mov	r2, r3
 8006036:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800603a:	6013      	str	r3, [r2, #0]
 800603c:	e013      	b.n	8006066 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	461a      	mov	r2, r3
 800604c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006050:	6013      	str	r3, [r2, #0]
 8006052:	e008      	b.n	8006066 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006054:	693b      	ldr	r3, [r7, #16]
 8006056:	015a      	lsls	r2, r3, #5
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	4413      	add	r3, r2
 800605c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006060:	461a      	mov	r2, r3
 8006062:	2300      	movs	r3, #0
 8006064:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	015a      	lsls	r2, r3, #5
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	4413      	add	r3, r2
 800606e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006072:	461a      	mov	r2, r3
 8006074:	2300      	movs	r3, #0
 8006076:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	461a      	mov	r2, r3
 8006086:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800608a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	3301      	adds	r3, #1
 8006090:	613b      	str	r3, [r7, #16]
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	693a      	ldr	r2, [r7, #16]
 8006096:	429a      	cmp	r2, r3
 8006098:	d3b7      	bcc.n	800600a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800609a:	2300      	movs	r3, #0
 800609c:	613b      	str	r3, [r7, #16]
 800609e:	e043      	b.n	8006128 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b6:	d118      	bne.n	80060ea <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	4413      	add	r3, r2
 80060c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060ca:	461a      	mov	r2, r3
 80060cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80060d0:	6013      	str	r3, [r2, #0]
 80060d2:	e013      	b.n	80060fc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	461a      	mov	r2, r3
 80060e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80060e6:	6013      	str	r3, [r2, #0]
 80060e8:	e008      	b.n	80060fc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80060ea:	693b      	ldr	r3, [r7, #16]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f6:	461a      	mov	r2, r3
 80060f8:	2300      	movs	r3, #0
 80060fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80060fc:	693b      	ldr	r3, [r7, #16]
 80060fe:	015a      	lsls	r2, r3, #5
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	4413      	add	r3, r2
 8006104:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006108:	461a      	mov	r2, r3
 800610a:	2300      	movs	r3, #0
 800610c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	015a      	lsls	r2, r3, #5
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	4413      	add	r3, r2
 8006116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800611a:	461a      	mov	r2, r3
 800611c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006120:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	3301      	adds	r3, #1
 8006126:	613b      	str	r3, [r7, #16]
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	429a      	cmp	r2, r3
 800612e:	d3b7      	bcc.n	80060a0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	68fa      	ldr	r2, [r7, #12]
 800613a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800613e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006142:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006150:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	2b00      	cmp	r3, #0
 8006156:	d105      	bne.n	8006164 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	699b      	ldr	r3, [r3, #24]
 800615c:	f043 0210 	orr.w	r2, r3, #16
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	699a      	ldr	r2, [r3, #24]
 8006168:	4b0e      	ldr	r3, [pc, #56]	; (80061a4 <USB_DevInit+0x2b4>)
 800616a:	4313      	orrs	r3, r2
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	699b      	ldr	r3, [r3, #24]
 800617a:	f043 0208 	orr.w	r2, r3, #8
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006182:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006184:	2b01      	cmp	r3, #1
 8006186:	d105      	bne.n	8006194 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699a      	ldr	r2, [r3, #24]
 800618c:	4b06      	ldr	r3, [pc, #24]	; (80061a8 <USB_DevInit+0x2b8>)
 800618e:	4313      	orrs	r3, r2
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80061a0:	b004      	add	sp, #16
 80061a2:	4770      	bx	lr
 80061a4:	803c3800 	.word	0x803c3800
 80061a8:	40000004 	.word	0x40000004

080061ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b085      	sub	sp, #20
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80061b6:	2300      	movs	r3, #0
 80061b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	3301      	adds	r3, #1
 80061be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a13      	ldr	r2, [pc, #76]	; (8006210 <USB_FlushTxFifo+0x64>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d901      	bls.n	80061cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80061c8:	2303      	movs	r3, #3
 80061ca:	e01b      	b.n	8006204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	daf2      	bge.n	80061ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	019b      	lsls	r3, r3, #6
 80061dc:	f043 0220 	orr.w	r2, r3, #32
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	3301      	adds	r3, #1
 80061e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4a08      	ldr	r2, [pc, #32]	; (8006210 <USB_FlushTxFifo+0x64>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e006      	b.n	8006204 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	691b      	ldr	r3, [r3, #16]
 80061fa:	f003 0320 	and.w	r3, r3, #32
 80061fe:	2b20      	cmp	r3, #32
 8006200:	d0f0      	beq.n	80061e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr
 8006210:	00030d40 	.word	0x00030d40

08006214 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800621c:	2300      	movs	r3, #0
 800621e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	3301      	adds	r3, #1
 8006224:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	4a11      	ldr	r2, [pc, #68]	; (8006270 <USB_FlushRxFifo+0x5c>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d901      	bls.n	8006232 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800622e:	2303      	movs	r3, #3
 8006230:	e018      	b.n	8006264 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	daf2      	bge.n	8006220 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2210      	movs	r2, #16
 8006242:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	3301      	adds	r3, #1
 8006248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	4a08      	ldr	r2, [pc, #32]	; (8006270 <USB_FlushRxFifo+0x5c>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d901      	bls.n	8006256 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006252:	2303      	movs	r3, #3
 8006254:	e006      	b.n	8006264 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0310 	and.w	r3, r3, #16
 800625e:	2b10      	cmp	r3, #16
 8006260:	d0f0      	beq.n	8006244 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006262:	2300      	movs	r3, #0
}
 8006264:	4618      	mov	r0, r3
 8006266:	3714      	adds	r7, #20
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	00030d40 	.word	0x00030d40

08006274 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006274:	b480      	push	{r7}
 8006276:	b085      	sub	sp, #20
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	460b      	mov	r3, r1
 800627e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	78fb      	ldrb	r3, [r7, #3]
 800628e:	68f9      	ldr	r1, [r7, #12]
 8006290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006294:	4313      	orrs	r3, r2
 8006296:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3714      	adds	r7, #20
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68fa      	ldr	r2, [r7, #12]
 80062bc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80062c0:	f023 0303 	bic.w	r3, r3, #3
 80062c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80062d4:	f043 0302 	orr.w	r3, r3, #2
 80062d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3714      	adds	r7, #20
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	695b      	ldr	r3, [r3, #20]
 80062f4:	f003 0301 	and.w	r3, r3, #1
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	370c      	adds	r7, #12
 80062fc:	46bd      	mov	sp, r7
 80062fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006302:	4770      	bx	lr

08006304 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006304:	b480      	push	{r7}
 8006306:	b085      	sub	sp, #20
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800630c:	2300      	movs	r3, #0
 800630e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	3301      	adds	r3, #1
 8006314:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4a13      	ldr	r2, [pc, #76]	; (8006368 <USB_CoreReset+0x64>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d901      	bls.n	8006322 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800631e:	2303      	movs	r3, #3
 8006320:	e01b      	b.n	800635a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	daf2      	bge.n	8006310 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800632a:	2300      	movs	r3, #0
 800632c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	691b      	ldr	r3, [r3, #16]
 8006332:	f043 0201 	orr.w	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	3301      	adds	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	4a09      	ldr	r2, [pc, #36]	; (8006368 <USB_CoreReset+0x64>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d901      	bls.n	800634c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006348:	2303      	movs	r3, #3
 800634a:	e006      	b.n	800635a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	691b      	ldr	r3, [r3, #16]
 8006350:	f003 0301 	and.w	r3, r3, #1
 8006354:	2b01      	cmp	r3, #1
 8006356:	d0f0      	beq.n	800633a <USB_CoreReset+0x36>

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3714      	adds	r7, #20
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	00030d40 	.word	0x00030d40

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	4d0d      	ldr	r5, [pc, #52]	; (80063a4 <__libc_init_array+0x38>)
 8006370:	4c0d      	ldr	r4, [pc, #52]	; (80063a8 <__libc_init_array+0x3c>)
 8006372:	1b64      	subs	r4, r4, r5
 8006374:	10a4      	asrs	r4, r4, #2
 8006376:	2600      	movs	r6, #0
 8006378:	42a6      	cmp	r6, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	4d0b      	ldr	r5, [pc, #44]	; (80063ac <__libc_init_array+0x40>)
 800637e:	4c0c      	ldr	r4, [pc, #48]	; (80063b0 <__libc_init_array+0x44>)
 8006380:	f000 f820 	bl	80063c4 <_init>
 8006384:	1b64      	subs	r4, r4, r5
 8006386:	10a4      	asrs	r4, r4, #2
 8006388:	2600      	movs	r6, #0
 800638a:	42a6      	cmp	r6, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f855 3b04 	ldr.w	r3, [r5], #4
 8006394:	4798      	blx	r3
 8006396:	3601      	adds	r6, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	f855 3b04 	ldr.w	r3, [r5], #4
 800639e:	4798      	blx	r3
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	0800641c 	.word	0x0800641c
 80063a8:	0800641c 	.word	0x0800641c
 80063ac:	0800641c 	.word	0x0800641c
 80063b0:	08006420 	.word	0x08006420

080063b4 <memset>:
 80063b4:	4402      	add	r2, r0
 80063b6:	4603      	mov	r3, r0
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d100      	bne.n	80063be <memset+0xa>
 80063bc:	4770      	bx	lr
 80063be:	f803 1b01 	strb.w	r1, [r3], #1
 80063c2:	e7f9      	b.n	80063b8 <memset+0x4>

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
