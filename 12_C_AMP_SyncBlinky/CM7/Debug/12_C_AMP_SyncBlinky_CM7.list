
12_C_AMP_SyncBlinky_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000531c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080055b4  080055b4  000155b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055ec  080055ec  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  080055ec  080055ec  000155ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055f4  080055f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055f4  080055f4  000155f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055f8  080055f8  000155f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080055fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005bc  24000010  0800560c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240005cc  0800560c  000205cc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001676d  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002627  00000000  00000000  000367ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  00038dd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d80  00000000  00000000  00039c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039f80  00000000  00000000  0003a9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b68  00000000  00000000  00074930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f12d  00000000  00000000  00087498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002065c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c04  00000000  00000000  00206618  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800559c 	.word	0x0800559c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	0800559c 	.word	0x0800559c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b22      	ldr	r3, [pc, #136]	; (80007a0 <main+0x98>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
  if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
  {
  Error_Handler();
 8000732:	f000 f9b9 	bl	8000aa8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fb19 	bl	8000d6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f833 	bl	80007a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <main+0x98>)
 8000740:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000744:	4a16      	ldr	r2, [pc, #88]	; (80007a0 <main+0x98>)
 8000746:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <main+0x98>)
 8000750:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800075c:	2000      	movs	r0, #0
 800075e:	f000 fe75 	bl	800144c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000762:	2100      	movs	r1, #0
 8000764:	2000      	movs	r0, #0
 8000766:	f000 fe8b 	bl	8001480 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000770:	bf00      	nop
 8000772:	4b0b      	ldr	r3, [pc, #44]	; (80007a0 <main+0x98>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d104      	bne.n	8000788 <main+0x80>
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	1e5a      	subs	r2, r3, #1
 8000782:	607a      	str	r2, [r7, #4]
 8000784:	2b00      	cmp	r3, #0
 8000786:	dcf4      	bgt.n	8000772 <main+0x6a>
if ( timeout < 0 )
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	2b00      	cmp	r3, #0
 800078c:	da01      	bge.n	8000792 <main+0x8a>
{
Error_Handler();
 800078e:	f000 f98b 	bl	8000aa8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000792:	f000 f909 	bl	80009a8 <MX_GPIO_Init>
  //MX_ETH_Init();
  MX_USART3_UART_Init();
 8000796:	f000 f889 	bl	80008ac <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800079a:	f000 f8d3 	bl	8000944 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079e:	e7fe      	b.n	800079e <main+0x96>
 80007a0:	58024400 	.word	0x58024400

080007a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b09c      	sub	sp, #112	; 0x70
 80007a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ae:	224c      	movs	r2, #76	; 0x4c
 80007b0:	2100      	movs	r1, #0
 80007b2:	4618      	mov	r0, r3
 80007b4:	f004 feea 	bl	800558c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b8:	1d3b      	adds	r3, r7, #4
 80007ba:	2220      	movs	r2, #32
 80007bc:	2100      	movs	r1, #0
 80007be:	4618      	mov	r0, r3
 80007c0:	f004 fee4 	bl	800558c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c4:	2004      	movs	r0, #4
 80007c6:	f000 ffb7 	bl	8001738 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80007ca:	2300      	movs	r3, #0
 80007cc:	603b      	str	r3, [r7, #0]
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <SystemClock_Config+0xfc>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <SystemClock_Config+0xfc>)
 80007d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <SystemClock_Config+0xfc>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	4b2f      	ldr	r3, [pc, #188]	; (80008a4 <SystemClock_Config+0x100>)
 80007e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007e8:	4a2e      	ldr	r2, [pc, #184]	; (80008a4 <SystemClock_Config+0x100>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007f0:	4b2c      	ldr	r3, [pc, #176]	; (80008a4 <SystemClock_Config+0x100>)
 80007f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fc:	bf00      	nop
 80007fe:	4b28      	ldr	r3, [pc, #160]	; (80008a0 <SystemClock_Config+0xfc>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080a:	d1f8      	bne.n	80007fe <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800080c:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <SystemClock_Config+0x104>)
 800080e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000810:	f023 0303 	bic.w	r3, r3, #3
 8000814:	4a24      	ldr	r2, [pc, #144]	; (80008a8 <SystemClock_Config+0x104>)
 8000816:	f043 0302 	orr.w	r3, r3, #2
 800081a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800081c:	2301      	movs	r3, #1
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000820:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000824:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000826:	2302      	movs	r3, #2
 8000828:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082a:	2302      	movs	r3, #2
 800082c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082e:	2301      	movs	r3, #1
 8000830:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000832:	2378      	movs	r3, #120	; 0x78
 8000834:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800083a:	2302      	movs	r3, #2
 800083c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800083e:	2302      	movs	r3, #2
 8000840:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000842:	230c      	movs	r3, #12
 8000844:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000846:	2300      	movs	r3, #0
 8000848:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4618      	mov	r0, r3
 8000854:	f000 ffda 	bl	800180c <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800085e:	f000 f923 	bl	8000aa8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	233f      	movs	r3, #63	; 0x3f
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800086e:	2308      	movs	r3, #8
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000872:	2340      	movs	r3, #64	; 0x40
 8000874:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000876:	2340      	movs	r3, #64	; 0x40
 8000878:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800087a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000880:	2340      	movs	r3, #64	; 0x40
 8000882:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2104      	movs	r1, #4
 8000888:	4618      	mov	r0, r3
 800088a:	f001 fbed 	bl	8002068 <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8000894:	f000 f908 	bl	8000aa8 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3770      	adds	r7, #112	; 0x70
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	58024800 	.word	0x58024800
 80008a4:	58000400 	.word	0x58000400
 80008a8:	58024400 	.word	0x58024400

080008ac <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b2:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_USART3_UART_Init+0x94>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80008b6:	4b21      	ldr	r3, [pc, #132]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b1f      	ldr	r3, [pc, #124]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b1c      	ldr	r3, [pc, #112]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008e2:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80008f4:	4811      	ldr	r0, [pc, #68]	; (800093c <MX_USART3_UART_Init+0x90>)
 80008f6:	f003 faab 	bl	8003e50 <HAL_UART_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000900:	f000 f8d2 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000904:	2100      	movs	r1, #0
 8000906:	480d      	ldr	r0, [pc, #52]	; (800093c <MX_USART3_UART_Init+0x90>)
 8000908:	f004 fa48 	bl	8004d9c <HAL_UARTEx_SetTxFifoThreshold>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000912:	f000 f8c9 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	4808      	ldr	r0, [pc, #32]	; (800093c <MX_USART3_UART_Init+0x90>)
 800091a:	f004 fa7d 	bl	8004e18 <HAL_UARTEx_SetRxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000924:	f000 f8c0 	bl	8000aa8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_USART3_UART_Init+0x90>)
 800092a:	f004 f9fe 	bl	8004d2a <HAL_UARTEx_DisableFifoMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000934:	f000 f8b8 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	2400002c 	.word	0x2400002c
 8000940:	40004800 	.word	0x40004800

08000944 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000948:	4b15      	ldr	r3, [pc, #84]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800094c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800094e:	4b14      	ldr	r3, [pc, #80]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000950:	2209      	movs	r2, #9
 8000952:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000956:	2202      	movs	r2, #2
 8000958:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800095a:	4b11      	ldr	r3, [pc, #68]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000960:	4b0f      	ldr	r3, [pc, #60]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000962:	2202      	movs	r2, #2
 8000964:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000966:	4b0e      	ldr	r3, [pc, #56]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800096c:	4b0c      	ldr	r3, [pc, #48]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000972:	4b0b      	ldr	r3, [pc, #44]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000978:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800097a:	2201      	movs	r2, #1
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000980:	2201      	movs	r2, #1
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800098c:	f000 fd8c 	bl	80014a8 <HAL_PCD_Init>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000996:	f000 f887 	bl	8000aa8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	240000bc 	.word	0x240000bc
 80009a4:	40080000 	.word	0x40080000

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
 80009bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009be:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c4:	4a36      	ldr	r2, [pc, #216]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009c6:	f043 0304 	orr.w	r3, r3, #4
 80009ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d4:	f003 0304 	and.w	r3, r3, #4
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e2:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fa:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a27      	ldr	r2, [pc, #156]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b25      	ldr	r3, [pc, #148]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	613b      	str	r3, [r7, #16]
 8000a16:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a18:	4b21      	ldr	r3, [pc, #132]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a1e:	4a20      	ldr	r2, [pc, #128]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a36:	4b1a      	ldr	r3, [pc, #104]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	60bb      	str	r3, [r7, #8]
 8000a52:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5a:	4a11      	ldr	r2, [pc, #68]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a64:	4b0e      	ldr	r3, [pc, #56]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000a72:	2200      	movs	r2, #0
 8000a74:	2101      	movs	r1, #1
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <MX_GPIO_Init+0xfc>)
 8000a78:	f000 fcce 	bl	8001418 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a80:	2301      	movs	r3, #1
 8000a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a84:	2300      	movs	r3, #0
 8000a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 031c 	add.w	r3, r7, #28
 8000a90:	4619      	mov	r1, r3
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_GPIO_Init+0xfc>)
 8000a94:	f000 fb10 	bl	80010b8 <HAL_GPIO_Init>

}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	; 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	58024400 	.word	0x58024400
 8000aa4:	58020400 	.word	0x58020400

08000aa8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aac:	b672      	cpsid	i
}
 8000aae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <Error_Handler+0x8>
	...

08000ab4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <HAL_MspInit+0x30>)
 8000abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ac0:	4a08      	ldr	r2, [pc, #32]	; (8000ae4 <HAL_MspInit+0x30>)
 8000ac2:	f043 0302 	orr.w	r3, r3, #2
 8000ac6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000aca:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <HAL_MspInit+0x30>)
 8000acc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000ad0:	f003 0302 	and.w	r3, r3, #2
 8000ad4:	607b      	str	r3, [r7, #4]
 8000ad6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	370c      	adds	r7, #12
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr
 8000ae4:	58024400 	.word	0x58024400

08000ae8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b0b8      	sub	sp, #224	; 0xe0
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	22bc      	movs	r2, #188	; 0xbc
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f004 fd3f 	bl	800558c <memset>
  if(huart->Instance==USART3)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a25      	ldr	r2, [pc, #148]	; (8000ba8 <HAL_UART_MspInit+0xc0>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d142      	bne.n	8000b9e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b22:	f107 0310 	add.w	r3, r7, #16
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fe2a 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b32:	f7ff ffb9 	bl	8000aa8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b36:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b3c:	4a1b      	ldr	r2, [pc, #108]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b42:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000b46:	4b19      	ldr	r3, [pc, #100]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000b4c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b54:	4b15      	ldr	r3, [pc, #84]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b5a:	4a14      	ldr	r2, [pc, #80]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b5c:	f043 0308 	orr.w	r3, r3, #8
 8000b60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b64:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0xc4>)
 8000b66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000b72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b86:	2300      	movs	r3, #0
 8000b88:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b8c:	2307      	movs	r3, #7
 8000b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000b96:	4619      	mov	r1, r3
 8000b98:	4805      	ldr	r0, [pc, #20]	; (8000bb0 <HAL_UART_MspInit+0xc8>)
 8000b9a:	f000 fa8d 	bl	80010b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000b9e:	bf00      	nop
 8000ba0:	37e0      	adds	r7, #224	; 0xe0
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004800 	.word	0x40004800
 8000bac:	58024400 	.word	0x58024400
 8000bb0:	58020c00 	.word	0x58020c00

08000bb4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0b8      	sub	sp, #224	; 0xe0
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	22bc      	movs	r2, #188	; 0xbc
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fcd9 	bl	800558c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a36      	ldr	r2, [pc, #216]	; (8000cb8 <HAL_PCD_MspInit+0x104>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d165      	bne.n	8000cb0 <HAL_PCD_MspInit+0xfc>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000be4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000be8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000bea:	2301      	movs	r3, #1
 8000bec:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000bee:	2318      	movs	r3, #24
 8000bf0:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000bfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c02:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000c08:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000c0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c10:	f107 0310 	add.w	r3, r7, #16
 8000c14:	4618      	mov	r0, r3
 8000c16:	f001 fdb3 	bl	8002780 <HAL_RCCEx_PeriphCLKConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8000c20:	f7ff ff42 	bl	8000aa8 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000c24:	f000 fde2 	bl	80017ec <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b24      	ldr	r3, [pc, #144]	; (8000cbc <HAL_PCD_MspInit+0x108>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a23      	ldr	r2, [pc, #140]	; (8000cbc <HAL_PCD_MspInit+0x108>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b20      	ldr	r3, [pc, #128]	; (8000cbc <HAL_PCD_MspInit+0x108>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000c46:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000c4a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000c60:	230a      	movs	r3, #10
 8000c62:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	4814      	ldr	r0, [pc, #80]	; (8000cc0 <HAL_PCD_MspInit+0x10c>)
 8000c6e:	f000 fa23 	bl	80010b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c76:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480c      	ldr	r0, [pc, #48]	; (8000cc0 <HAL_PCD_MspInit+0x10c>)
 8000c8e:	f000 fa13 	bl	80010b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000c92:	4b0a      	ldr	r3, [pc, #40]	; (8000cbc <HAL_PCD_MspInit+0x108>)
 8000c94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <HAL_PCD_MspInit+0x108>)
 8000c9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c9e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000ca2:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <HAL_PCD_MspInit+0x108>)
 8000ca4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000cb0:	bf00      	nop
 8000cb2:	37e0      	adds	r7, #224	; 0xe0
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40080000 	.word	0x40080000
 8000cbc:	58024400 	.word	0x58024400
 8000cc0:	58020000 	.word	0x58020000

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 f89e 	bl	8000e50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d50 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000d1c:	f7ff fc5e 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d22:	490d      	ldr	r1, [pc, #52]	; (8000d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d24:	4a0d      	ldr	r2, [pc, #52]	; (8000d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d28:	e002      	b.n	8000d30 <LoopCopyDataInit>

08000d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d2e:	3304      	adds	r3, #4

08000d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d34:	d3f9      	bcc.n	8000d2a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d38:	4c0a      	ldr	r4, [pc, #40]	; (8000d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d3c:	e001      	b.n	8000d42 <LoopFillZerobss>

08000d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d40:	3204      	adds	r2, #4

08000d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d44:	d3fb      	bcc.n	8000d3e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d46:	f004 fbfd 	bl	8005544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4a:	f7ff fcdd 	bl	8000708 <main>
  bx  lr
 8000d4e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d50:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000d54:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000d58:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000d5c:	080055fc 	.word	0x080055fc
  ldr r2, =_sbss
 8000d60:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000d64:	240005cc 	.word	0x240005cc

08000d68 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d68:	e7fe      	b.n	8000d68 <ADC3_IRQHandler>
	...

08000d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f000 f96e 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000d78:	f001 fb2c 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <HAL_Init+0x68>)
 8000d80:	699b      	ldr	r3, [r3, #24]
 8000d82:	0a1b      	lsrs	r3, r3, #8
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	4913      	ldr	r1, [pc, #76]	; (8000dd8 <HAL_Init+0x6c>)
 8000d8a:	5ccb      	ldrb	r3, [r1, r3]
 8000d8c:	f003 031f 	and.w	r3, r3, #31
 8000d90:	fa22 f303 	lsr.w	r3, r2, r3
 8000d94:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <HAL_Init+0x68>)
 8000d98:	699b      	ldr	r3, [r3, #24]
 8000d9a:	f003 030f 	and.w	r3, r3, #15
 8000d9e:	4a0e      	ldr	r2, [pc, #56]	; (8000dd8 <HAL_Init+0x6c>)
 8000da0:	5cd3      	ldrb	r3, [r2, r3]
 8000da2:	f003 031f 	and.w	r3, r3, #31
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	fa22 f303 	lsr.w	r3, r2, r3
 8000dac:	4a0b      	ldr	r2, [pc, #44]	; (8000ddc <HAL_Init+0x70>)
 8000dae:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000db0:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <HAL_Init+0x74>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 f814 	bl	8000de4 <HAL_InitTick>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d001      	beq.n	8000dc6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e002      	b.n	8000dcc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000dc6:	f7ff fe75 	bl	8000ab4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dca:	2300      	movs	r3, #0
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	080055b4 	.word	0x080055b4
 8000ddc:	24000004 	.word	0x24000004
 8000de0:	24000000 	.word	0x24000000

08000de4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b082      	sub	sp, #8
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_InitTick+0x60>)
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e021      	b.n	8000e3c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000df8:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_InitTick+0x64>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <HAL_InitTick+0x60>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	4619      	mov	r1, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f000 f945 	bl	800109e <HAL_SYSTICK_Config>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000e1a:	2301      	movs	r3, #1
 8000e1c:	e00e      	b.n	8000e3c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2b0f      	cmp	r3, #15
 8000e22:	d80a      	bhi.n	8000e3a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e24:	2200      	movs	r2, #0
 8000e26:	6879      	ldr	r1, [r7, #4]
 8000e28:	f04f 30ff 	mov.w	r0, #4294967295
 8000e2c:	f000 f91d 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e30:	4a06      	ldr	r2, [pc, #24]	; (8000e4c <HAL_InitTick+0x68>)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	e000      	b.n	8000e3c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
}
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	3708      	adds	r7, #8
 8000e40:	46bd      	mov	sp, r7
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	2400000c 	.word	0x2400000c
 8000e48:	24000000 	.word	0x24000000
 8000e4c:	24000008 	.word	0x24000008

08000e50 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e54:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x20>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	4b06      	ldr	r3, [pc, #24]	; (8000e74 <HAL_IncTick+0x24>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4413      	add	r3, r2
 8000e60:	4a04      	ldr	r2, [pc, #16]	; (8000e74 <HAL_IncTick+0x24>)
 8000e62:	6013      	str	r3, [r2, #0]
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	2400000c 	.word	0x2400000c
 8000e74:	240005c8 	.word	0x240005c8

08000e78 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <HAL_GetTick+0x14>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	240005c8 	.word	0x240005c8

08000e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e98:	f7ff ffee 	bl	8000e78 <HAL_GetTick>
 8000e9c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ea2:	68fb      	ldr	r3, [r7, #12]
 8000ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea8:	d005      	beq.n	8000eb6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_Delay+0x44>)
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	461a      	mov	r2, r3
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	4413      	add	r3, r2
 8000eb4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000eb6:	bf00      	nop
 8000eb8:	f7ff ffde 	bl	8000e78 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	68fa      	ldr	r2, [r7, #12]
 8000ec4:	429a      	cmp	r2, r3
 8000ec6:	d8f7      	bhi.n	8000eb8 <HAL_Delay+0x28>
  {
  }
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	2400000c 	.word	0x2400000c

08000ed8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <HAL_GetREVID+0x14>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	0c1b      	lsrs	r3, r3, #16
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	5c001000 	.word	0x5c001000

08000ef0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f003 0307 	and.w	r3, r3, #7
 8000efe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f00:	4b0b      	ldr	r3, [pc, #44]	; (8000f30 <__NVIC_SetPriorityGrouping+0x40>)
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f06:	68ba      	ldr	r2, [r7, #8]
 8000f08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <__NVIC_SetPriorityGrouping+0x44>)
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1e:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <__NVIC_SetPriorityGrouping+0x40>)
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	60d3      	str	r3, [r2, #12]
}
 8000f24:	bf00      	nop
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	e000ed00 	.word	0xe000ed00
 8000f34:	05fa0000 	.word	0x05fa0000

08000f38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <__NVIC_GetPriorityGrouping+0x18>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	0a1b      	lsrs	r3, r3, #8
 8000f42:	f003 0307 	and.w	r3, r3, #7
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	e000ed00 	.word	0xe000ed00

08000f54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b083      	sub	sp, #12
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	6039      	str	r1, [r7, #0]
 8000f5e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000f60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	db0a      	blt.n	8000f7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	b2da      	uxtb	r2, r3
 8000f6c:	490c      	ldr	r1, [pc, #48]	; (8000fa0 <__NVIC_SetPriority+0x4c>)
 8000f6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f72:	0112      	lsls	r2, r2, #4
 8000f74:	b2d2      	uxtb	r2, r2
 8000f76:	440b      	add	r3, r1
 8000f78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f7c:	e00a      	b.n	8000f94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	b2da      	uxtb	r2, r3
 8000f82:	4908      	ldr	r1, [pc, #32]	; (8000fa4 <__NVIC_SetPriority+0x50>)
 8000f84:	88fb      	ldrh	r3, [r7, #6]
 8000f86:	f003 030f 	and.w	r3, r3, #15
 8000f8a:	3b04      	subs	r3, #4
 8000f8c:	0112      	lsls	r2, r2, #4
 8000f8e:	b2d2      	uxtb	r2, r2
 8000f90:	440b      	add	r3, r1
 8000f92:	761a      	strb	r2, [r3, #24]
}
 8000f94:	bf00      	nop
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b089      	sub	sp, #36	; 0x24
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	60f8      	str	r0, [r7, #12]
 8000fb0:	60b9      	str	r1, [r7, #8]
 8000fb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f1c3 0307 	rsb	r3, r3, #7
 8000fc2:	2b04      	cmp	r3, #4
 8000fc4:	bf28      	it	cs
 8000fc6:	2304      	movcs	r3, #4
 8000fc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fca:	69fb      	ldr	r3, [r7, #28]
 8000fcc:	3304      	adds	r3, #4
 8000fce:	2b06      	cmp	r3, #6
 8000fd0:	d902      	bls.n	8000fd8 <NVIC_EncodePriority+0x30>
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	e000      	b.n	8000fda <NVIC_EncodePriority+0x32>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43da      	mvns	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	401a      	ands	r2, r3
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffa:	43d9      	mvns	r1, r3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001000:	4313      	orrs	r3, r2
         );
}
 8001002:	4618      	mov	r0, r3
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
	...

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295
 8001034:	f7ff ff8e 	bl	8000f54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	; (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	; (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff47 	bl	8000ef0 <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff5e 	bl	8000f38 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff90 	bl	8000fa8 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5f 	bl	8000f54 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff ffb2 	bl	8001010 <SysTick_Config>
 80010ac:	4603      	mov	r3, r0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
	...

080010b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	; 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80010c2:	2300      	movs	r3, #0
 80010c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80010c6:	4b89      	ldr	r3, [pc, #548]	; (80012ec <HAL_GPIO_Init+0x234>)
 80010c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80010ca:	e194      	b.n	80013f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	2101      	movs	r1, #1
 80010d2:	69fb      	ldr	r3, [r7, #28]
 80010d4:	fa01 f303 	lsl.w	r3, r1, r3
 80010d8:	4013      	ands	r3, r2
 80010da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	f000 8186 	beq.w	80013f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f003 0303 	and.w	r3, r3, #3
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d005      	beq.n	80010fc <HAL_GPIO_Init+0x44>
 80010f0:	683b      	ldr	r3, [r7, #0]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	f003 0303 	and.w	r3, r3, #3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d130      	bne.n	800115e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	68da      	ldr	r2, [r3, #12]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	69ba      	ldr	r2, [r7, #24]
 800112a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001132:	2201      	movs	r2, #1
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	091b      	lsrs	r3, r3, #4
 8001148:	f003 0201 	and.w	r2, r3, #1
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	69ba      	ldr	r2, [r7, #24]
 8001154:	4313      	orrs	r3, r2
 8001156:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	2b03      	cmp	r3, #3
 8001168:	d017      	beq.n	800119a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	68db      	ldr	r3, [r3, #12]
 800116e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	2203      	movs	r2, #3
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4013      	ands	r3, r2
 8001180:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	689a      	ldr	r2, [r3, #8]
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	69ba      	ldr	r2, [r7, #24]
 8001190:	4313      	orrs	r3, r2
 8001192:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f003 0303 	and.w	r3, r3, #3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d123      	bne.n	80011ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	08da      	lsrs	r2, r3, #3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	3208      	adds	r2, #8
 80011ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	220f      	movs	r2, #15
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43db      	mvns	r3, r3
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	4013      	ands	r3, r2
 80011c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	691a      	ldr	r2, [r3, #16]
 80011ce:	69fb      	ldr	r3, [r7, #28]
 80011d0:	f003 0307 	and.w	r3, r3, #7
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	08da      	lsrs	r2, r3, #3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	3208      	adds	r2, #8
 80011e8:	69b9      	ldr	r1, [r7, #24]
 80011ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	005b      	lsls	r3, r3, #1
 80011f8:	2203      	movs	r2, #3
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43db      	mvns	r3, r3
 8001200:	69ba      	ldr	r2, [r7, #24]
 8001202:	4013      	ands	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f003 0203 	and.w	r2, r3, #3
 800120e:	69fb      	ldr	r3, [r7, #28]
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	fa02 f303 	lsl.w	r3, r2, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4313      	orrs	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800122a:	2b00      	cmp	r3, #0
 800122c:	f000 80e0 	beq.w	80013f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001230:	4b2f      	ldr	r3, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x238>)
 8001232:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_GPIO_Init+0x238>)
 8001238:	f043 0302 	orr.w	r3, r3, #2
 800123c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001240:	4b2b      	ldr	r3, [pc, #172]	; (80012f0 <HAL_GPIO_Init+0x238>)
 8001242:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800124e:	4a29      	ldr	r2, [pc, #164]	; (80012f4 <HAL_GPIO_Init+0x23c>)
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	089b      	lsrs	r3, r3, #2
 8001254:	3302      	adds	r3, #2
 8001256:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800125a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	009b      	lsls	r3, r3, #2
 8001264:	220f      	movs	r2, #15
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4013      	ands	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4a20      	ldr	r2, [pc, #128]	; (80012f8 <HAL_GPIO_Init+0x240>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d052      	beq.n	8001320 <HAL_GPIO_Init+0x268>
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <HAL_GPIO_Init+0x244>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d031      	beq.n	80012e6 <HAL_GPIO_Init+0x22e>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	4a1e      	ldr	r2, [pc, #120]	; (8001300 <HAL_GPIO_Init+0x248>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d02b      	beq.n	80012e2 <HAL_GPIO_Init+0x22a>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	4a1d      	ldr	r2, [pc, #116]	; (8001304 <HAL_GPIO_Init+0x24c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d025      	beq.n	80012de <HAL_GPIO_Init+0x226>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4a1c      	ldr	r2, [pc, #112]	; (8001308 <HAL_GPIO_Init+0x250>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d01f      	beq.n	80012da <HAL_GPIO_Init+0x222>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_GPIO_Init+0x254>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d019      	beq.n	80012d6 <HAL_GPIO_Init+0x21e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a1a      	ldr	r2, [pc, #104]	; (8001310 <HAL_GPIO_Init+0x258>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d013      	beq.n	80012d2 <HAL_GPIO_Init+0x21a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a19      	ldr	r2, [pc, #100]	; (8001314 <HAL_GPIO_Init+0x25c>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d00d      	beq.n	80012ce <HAL_GPIO_Init+0x216>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a18      	ldr	r2, [pc, #96]	; (8001318 <HAL_GPIO_Init+0x260>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d007      	beq.n	80012ca <HAL_GPIO_Init+0x212>
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a17      	ldr	r2, [pc, #92]	; (800131c <HAL_GPIO_Init+0x264>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d101      	bne.n	80012c6 <HAL_GPIO_Init+0x20e>
 80012c2:	2309      	movs	r3, #9
 80012c4:	e02d      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012c6:	230a      	movs	r3, #10
 80012c8:	e02b      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012ca:	2308      	movs	r3, #8
 80012cc:	e029      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012ce:	2307      	movs	r3, #7
 80012d0:	e027      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012d2:	2306      	movs	r3, #6
 80012d4:	e025      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012d6:	2305      	movs	r3, #5
 80012d8:	e023      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012da:	2304      	movs	r3, #4
 80012dc:	e021      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012de:	2303      	movs	r3, #3
 80012e0:	e01f      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012e2:	2302      	movs	r3, #2
 80012e4:	e01d      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012e6:	2301      	movs	r3, #1
 80012e8:	e01b      	b.n	8001322 <HAL_GPIO_Init+0x26a>
 80012ea:	bf00      	nop
 80012ec:	58000080 	.word	0x58000080
 80012f0:	58024400 	.word	0x58024400
 80012f4:	58000400 	.word	0x58000400
 80012f8:	58020000 	.word	0x58020000
 80012fc:	58020400 	.word	0x58020400
 8001300:	58020800 	.word	0x58020800
 8001304:	58020c00 	.word	0x58020c00
 8001308:	58021000 	.word	0x58021000
 800130c:	58021400 	.word	0x58021400
 8001310:	58021800 	.word	0x58021800
 8001314:	58021c00 	.word	0x58021c00
 8001318:	58022000 	.word	0x58022000
 800131c:	58022400 	.word	0x58022400
 8001320:	2300      	movs	r3, #0
 8001322:	69fa      	ldr	r2, [r7, #28]
 8001324:	f002 0203 	and.w	r2, r2, #3
 8001328:	0092      	lsls	r2, r2, #2
 800132a:	4093      	lsls	r3, r2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001332:	4938      	ldr	r1, [pc, #224]	; (8001414 <HAL_GPIO_Init+0x35c>)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	089b      	lsrs	r3, r3, #2
 8001338:	3302      	adds	r3, #2
 800133a:	69ba      	ldr	r2, [r7, #24]
 800133c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001340:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	43db      	mvns	r3, r3
 800134c:	69ba      	ldr	r2, [r7, #24]
 800134e:	4013      	ands	r3, r2
 8001350:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800135a:	2b00      	cmp	r3, #0
 800135c:	d003      	beq.n	8001366 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	4313      	orrs	r3, r2
 8001364:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001366:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800136e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	43db      	mvns	r3, r3
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	4013      	ands	r3, r2
 800137e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001388:	2b00      	cmp	r3, #0
 800138a:	d003      	beq.n	8001394 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800138c:	69ba      	ldr	r2, [r7, #24]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001394:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d003      	beq.n	80013c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	69ba      	ldr	r2, [r7, #24]
 80013c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	43db      	mvns	r3, r3
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	4013      	ands	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d003      	beq.n	80013ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4313      	orrs	r3, r2
 80013e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	3301      	adds	r3, #1
 80013f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	f47f ae63 	bne.w	80010cc <HAL_GPIO_Init+0x14>
  }
}
 8001406:	bf00      	nop
 8001408:	bf00      	nop
 800140a:	3724      	adds	r7, #36	; 0x24
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	58000400 	.word	0x58000400

08001418 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	460b      	mov	r3, r1
 8001422:	807b      	strh	r3, [r7, #2]
 8001424:	4613      	mov	r3, r2
 8001426:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001428:	787b      	ldrb	r3, [r7, #1]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001434:	e003      	b.n	800143e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001436:	887b      	ldrh	r3, [r7, #2]
 8001438:	041a      	lsls	r2, r3, #16
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	619a      	str	r2, [r3, #24]
}
 800143e:	bf00      	nop
 8001440:	370c      	adds	r7, #12
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
	...

0800144c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001454:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_HSEM_FastTake+0x2c>)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3320      	adds	r3, #32
 800145a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800145e:	4a07      	ldr	r2, [pc, #28]	; (800147c <HAL_HSEM_FastTake+0x30>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d101      	bne.n	8001468 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001464:	2300      	movs	r3, #0
 8001466:	e000      	b.n	800146a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001468:	2301      	movs	r3, #1
}
 800146a:	4618      	mov	r0, r3
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	58026400 	.word	0x58026400
 800147c:	80000300 	.word	0x80000300

08001480 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800148a:	4906      	ldr	r1, [pc, #24]	; (80014a4 <HAL_HSEM_Release+0x24>)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	58026400 	.word	0x58026400

080014a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014aa:	b08f      	sub	sp, #60	; 0x3c
 80014ac:	af0a      	add	r7, sp, #40	; 0x28
 80014ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d101      	bne.n	80014ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e116      	b.n	80016e8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80014c6:	b2db      	uxtb	r3, r3
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d106      	bne.n	80014da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fb6d 	bl	8000bb4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	2203      	movs	r2, #3
 80014de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d102      	bne.n	80014f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2200      	movs	r2, #0
 80014f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	4618      	mov	r0, r3
 80014fa:	f003 fd87 	bl	800500c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	603b      	str	r3, [r7, #0]
 8001504:	687e      	ldr	r6, [r7, #4]
 8001506:	466d      	mov	r5, sp
 8001508:	f106 0410 	add.w	r4, r6, #16
 800150c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001510:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001512:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001514:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001518:	e885 0003 	stmia.w	r5, {r0, r1}
 800151c:	1d33      	adds	r3, r6, #4
 800151e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001520:	6838      	ldr	r0, [r7, #0]
 8001522:	f003 fd05 	bl	8004f30 <USB_CoreInit>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d005      	beq.n	8001538 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2202      	movs	r2, #2
 8001530:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e0d7      	b.n	80016e8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2100      	movs	r1, #0
 800153e:	4618      	mov	r0, r3
 8001540:	f003 fd75 	bl	800502e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001544:	2300      	movs	r3, #0
 8001546:	73fb      	strb	r3, [r7, #15]
 8001548:	e04a      	b.n	80015e0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800154a:	7bfa      	ldrb	r2, [r7, #15]
 800154c:	6879      	ldr	r1, [r7, #4]
 800154e:	4613      	mov	r3, r2
 8001550:	00db      	lsls	r3, r3, #3
 8001552:	4413      	add	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	440b      	add	r3, r1
 8001558:	333d      	adds	r3, #61	; 0x3d
 800155a:	2201      	movs	r2, #1
 800155c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800155e:	7bfa      	ldrb	r2, [r7, #15]
 8001560:	6879      	ldr	r1, [r7, #4]
 8001562:	4613      	mov	r3, r2
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	4413      	add	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	440b      	add	r3, r1
 800156c:	333c      	adds	r3, #60	; 0x3c
 800156e:	7bfa      	ldrb	r2, [r7, #15]
 8001570:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001572:	7bfa      	ldrb	r2, [r7, #15]
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	b298      	uxth	r0, r3
 8001578:	6879      	ldr	r1, [r7, #4]
 800157a:	4613      	mov	r3, r2
 800157c:	00db      	lsls	r3, r3, #3
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	440b      	add	r3, r1
 8001584:	3344      	adds	r3, #68	; 0x44
 8001586:	4602      	mov	r2, r0
 8001588:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800158a:	7bfa      	ldrb	r2, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	440b      	add	r3, r1
 8001598:	3340      	adds	r3, #64	; 0x40
 800159a:	2200      	movs	r2, #0
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	440b      	add	r3, r1
 80015ac:	3348      	adds	r3, #72	; 0x48
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	6879      	ldr	r1, [r7, #4]
 80015b6:	4613      	mov	r3, r2
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	4413      	add	r3, r2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	440b      	add	r3, r1
 80015c0:	334c      	adds	r3, #76	; 0x4c
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015c6:	7bfa      	ldrb	r2, [r7, #15]
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	4613      	mov	r3, r2
 80015cc:	00db      	lsls	r3, r3, #3
 80015ce:	4413      	add	r3, r2
 80015d0:	009b      	lsls	r3, r3, #2
 80015d2:	440b      	add	r3, r1
 80015d4:	3354      	adds	r3, #84	; 0x54
 80015d6:	2200      	movs	r2, #0
 80015d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	3301      	adds	r3, #1
 80015de:	73fb      	strb	r3, [r7, #15]
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	d3af      	bcc.n	800154a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	73fb      	strb	r3, [r7, #15]
 80015ee:	e044      	b.n	800167a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015f0:	7bfa      	ldrb	r2, [r7, #15]
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	4613      	mov	r3, r2
 80015f6:	00db      	lsls	r3, r3, #3
 80015f8:	4413      	add	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001606:	7bfa      	ldrb	r2, [r7, #15]
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	4613      	mov	r3, r2
 800160c:	00db      	lsls	r3, r3, #3
 800160e:	4413      	add	r3, r2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	440b      	add	r3, r1
 8001614:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001618:	7bfa      	ldrb	r2, [r7, #15]
 800161a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800161c:	7bfa      	ldrb	r2, [r7, #15]
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	4613      	mov	r3, r2
 8001622:	00db      	lsls	r3, r3, #3
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001632:	7bfa      	ldrb	r2, [r7, #15]
 8001634:	6879      	ldr	r1, [r7, #4]
 8001636:	4613      	mov	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	4413      	add	r3, r2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	440b      	add	r3, r1
 8001640:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001648:	7bfa      	ldrb	r2, [r7, #15]
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	4613      	mov	r3, r2
 800164e:	00db      	lsls	r3, r3, #3
 8001650:	4413      	add	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	440b      	add	r3, r1
 8001656:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800165e:	7bfa      	ldrb	r2, [r7, #15]
 8001660:	6879      	ldr	r1, [r7, #4]
 8001662:	4613      	mov	r3, r2
 8001664:	00db      	lsls	r3, r3, #3
 8001666:	4413      	add	r3, r2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	440b      	add	r3, r1
 800166c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001674:	7bfb      	ldrb	r3, [r7, #15]
 8001676:	3301      	adds	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
 800167a:	7bfa      	ldrb	r2, [r7, #15]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	429a      	cmp	r2, r3
 8001682:	d3b5      	bcc.n	80015f0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	687e      	ldr	r6, [r7, #4]
 800168c:	466d      	mov	r5, sp
 800168e:	f106 0410 	add.w	r4, r6, #16
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800169a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169e:	e885 0003 	stmia.w	r5, {r0, r1}
 80016a2:	1d33      	adds	r3, r6, #4
 80016a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a6:	6838      	ldr	r0, [r7, #0]
 80016a8:	f003 fd0e 	bl	80050c8 <USB_DevInit>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2202      	movs	r2, #2
 80016b6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e014      	b.n	80016e8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2201      	movs	r2, #1
 80016ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d102      	bne.n	80016dc <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f80a 	bl	80016f0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f003 fecc 	bl	800547e <USB_DevDisconnect>

  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3714      	adds	r7, #20
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016f0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2201      	movs	r2, #1
 8001702:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2200      	movs	r2, #0
 800170a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800171e:	4b05      	ldr	r3, [pc, #20]	; (8001734 <HAL_PCDEx_ActivateLPM+0x44>)
 8001720:	4313      	orrs	r3, r2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	10000003 	.word	0x10000003

08001738 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b084      	sub	sp, #16
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001740:	4b29      	ldr	r3, [pc, #164]	; (80017e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	f003 0307 	and.w	r3, r3, #7
 8001748:	2b06      	cmp	r3, #6
 800174a:	d00a      	beq.n	8001762 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800174c:	4b26      	ldr	r3, [pc, #152]	; (80017e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001754:	687a      	ldr	r2, [r7, #4]
 8001756:	429a      	cmp	r2, r3
 8001758:	d001      	beq.n	800175e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e040      	b.n	80017e0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e03e      	b.n	80017e0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001762:	4b21      	ldr	r3, [pc, #132]	; (80017e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001764:	68db      	ldr	r3, [r3, #12]
 8001766:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800176a:	491f      	ldr	r1, [pc, #124]	; (80017e8 <HAL_PWREx_ConfigSupply+0xb0>)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	4313      	orrs	r3, r2
 8001770:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001772:	f7ff fb81 	bl	8000e78 <HAL_GetTick>
 8001776:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001778:	e009      	b.n	800178e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800177a:	f7ff fb7d 	bl	8000e78 <HAL_GetTick>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	1ad3      	subs	r3, r2, r3
 8001784:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001788:	d901      	bls.n	800178e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e028      	b.n	80017e0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001796:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800179a:	d1ee      	bne.n	800177a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2b1e      	cmp	r3, #30
 80017a0:	d008      	beq.n	80017b4 <HAL_PWREx_ConfigSupply+0x7c>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2b2e      	cmp	r3, #46	; 0x2e
 80017a6:	d005      	beq.n	80017b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2b1d      	cmp	r3, #29
 80017ac:	d002      	beq.n	80017b4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b2d      	cmp	r3, #45	; 0x2d
 80017b2:	d114      	bne.n	80017de <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80017b4:	f7ff fb60 	bl	8000e78 <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017ba:	e009      	b.n	80017d0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80017bc:	f7ff fb5c 	bl	8000e78 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017ca:	d901      	bls.n	80017d0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e007      	b.n	80017e0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <HAL_PWREx_ConfigSupply+0xb0>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017dc:	d1ee      	bne.n	80017bc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80017de:	2300      	movs	r3, #0
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3710      	adds	r7, #16
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	58024800 	.word	0x58024800

080017ec <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80017f2:	68db      	ldr	r3, [r3, #12]
 80017f4:	4a04      	ldr	r2, [pc, #16]	; (8001808 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80017f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	58024800 	.word	0x58024800

0800180c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b08c      	sub	sp, #48	; 0x30
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d102      	bne.n	8001820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	f000 bc1d 	b.w	800205a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0301 	and.w	r3, r3, #1
 8001828:	2b00      	cmp	r3, #0
 800182a:	f000 8087 	beq.w	800193c <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182e:	4b99      	ldr	r3, [pc, #612]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001830:	691b      	ldr	r3, [r3, #16]
 8001832:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001836:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001838:	4b96      	ldr	r3, [pc, #600]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800183a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800183e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001840:	2b10      	cmp	r3, #16
 8001842:	d007      	beq.n	8001854 <HAL_RCC_OscConfig+0x48>
 8001844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001846:	2b18      	cmp	r3, #24
 8001848:	d110      	bne.n	800186c <HAL_RCC_OscConfig+0x60>
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	f003 0303 	and.w	r3, r3, #3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b8f      	ldr	r3, [pc, #572]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d06c      	beq.n	800193a <HAL_RCC_OscConfig+0x12e>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d168      	bne.n	800193a <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e3f6      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x78>
 8001876:	4b87      	ldr	r3, [pc, #540]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a86      	ldr	r2, [pc, #536]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e02e      	b.n	80018e2 <HAL_RCC_OscConfig+0xd6>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10c      	bne.n	80018a6 <HAL_RCC_OscConfig+0x9a>
 800188c:	4b81      	ldr	r3, [pc, #516]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a80      	ldr	r2, [pc, #512]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b7e      	ldr	r3, [pc, #504]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a7d      	ldr	r2, [pc, #500]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	e01d      	b.n	80018e2 <HAL_RCC_OscConfig+0xd6>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0xbe>
 80018b0:	4b78      	ldr	r3, [pc, #480]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a77      	ldr	r2, [pc, #476]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018ba:	6013      	str	r3, [r2, #0]
 80018bc:	4b75      	ldr	r3, [pc, #468]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a74      	ldr	r2, [pc, #464]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	e00b      	b.n	80018e2 <HAL_RCC_OscConfig+0xd6>
 80018ca:	4b72      	ldr	r3, [pc, #456]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a71      	ldr	r2, [pc, #452]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b6f      	ldr	r3, [pc, #444]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a6e      	ldr	r2, [pc, #440]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80018dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018e0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d013      	beq.n	8001912 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fac5 	bl	8000e78 <HAL_GetTick>
 80018ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80018f2:	f7ff fac1 	bl	8000e78 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b64      	cmp	r3, #100	; 0x64
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e3aa      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001904:	4b63      	ldr	r3, [pc, #396]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0xe6>
 8001910:	e014      	b.n	800193c <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001912:	f7ff fab1 	bl	8000e78 <HAL_GetTick>
 8001916:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001918:	e008      	b.n	800192c <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800191a:	f7ff faad 	bl	8000e78 <HAL_GetTick>
 800191e:	4602      	mov	r2, r0
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	1ad3      	subs	r3, r2, r3
 8001924:	2b64      	cmp	r3, #100	; 0x64
 8001926:	d901      	bls.n	800192c <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001928:	2303      	movs	r3, #3
 800192a:	e396      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800192c:	4b59      	ldr	r3, [pc, #356]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d1f0      	bne.n	800191a <HAL_RCC_OscConfig+0x10e>
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80cb 	beq.w	8001ae0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800194a:	4b52      	ldr	r3, [pc, #328]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800194c:	691b      	ldr	r3, [r3, #16]
 800194e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001952:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001954:	4b4f      	ldr	r3, [pc, #316]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001958:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800195a:	6a3b      	ldr	r3, [r7, #32]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d007      	beq.n	8001970 <HAL_RCC_OscConfig+0x164>
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	2b18      	cmp	r3, #24
 8001964:	d156      	bne.n	8001a14 <HAL_RCC_OscConfig+0x208>
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d151      	bne.n	8001a14 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001970:	4b48      	ldr	r3, [pc, #288]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d005      	beq.n	8001988 <HAL_RCC_OscConfig+0x17c>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	68db      	ldr	r3, [r3, #12]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d101      	bne.n	8001988 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	e368      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001988:	4b42      	ldr	r3, [pc, #264]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 0219 	bic.w	r2, r3, #25
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	493f      	ldr	r1, [pc, #252]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001996:	4313      	orrs	r3, r2
 8001998:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800199a:	f7ff fa6d 	bl	8000e78 <HAL_GetTick>
 800199e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fa69 	bl	8000e78 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e352      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0304 	and.w	r3, r3, #4
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d0f0      	beq.n	80019a2 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019c0:	f7ff fa8a 	bl	8000ed8 <HAL_GetREVID>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d817      	bhi.n	80019fe <HAL_RCC_OscConfig+0x1f2>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	691b      	ldr	r3, [r3, #16]
 80019d2:	2b40      	cmp	r3, #64	; 0x40
 80019d4:	d108      	bne.n	80019e8 <HAL_RCC_OscConfig+0x1dc>
 80019d6:	4b2f      	ldr	r3, [pc, #188]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019de:	4a2d      	ldr	r2, [pc, #180]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e6:	e07b      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019e8:	4b2a      	ldr	r3, [pc, #168]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	691b      	ldr	r3, [r3, #16]
 80019f4:	031b      	lsls	r3, r3, #12
 80019f6:	4927      	ldr	r1, [pc, #156]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019fc:	e070      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019fe:	4b25      	ldr	r3, [pc, #148]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	691b      	ldr	r3, [r3, #16]
 8001a0a:	061b      	lsls	r3, r3, #24
 8001a0c:	4921      	ldr	r1, [pc, #132]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a12:	e065      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	68db      	ldr	r3, [r3, #12]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d048      	beq.n	8001aae <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a1c:	4b1d      	ldr	r3, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f023 0219 	bic.w	r2, r3, #25
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	491a      	ldr	r1, [pc, #104]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	4313      	orrs	r3, r2
 8001a2c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa23 	bl	8000e78 <HAL_GetTick>
 8001a32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fa1f 	bl	8000e78 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e308      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f003 0304 	and.w	r3, r3, #4
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	f7ff fa40 	bl	8000ed8 <HAL_GetREVID>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d81a      	bhi.n	8001a98 <HAL_RCC_OscConfig+0x28c>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	2b40      	cmp	r3, #64	; 0x40
 8001a68:	d108      	bne.n	8001a7c <HAL_RCC_OscConfig+0x270>
 8001a6a:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001a72:	4a08      	ldr	r2, [pc, #32]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a78:	6053      	str	r3, [r2, #4]
 8001a7a:	e031      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	691b      	ldr	r3, [r3, #16]
 8001a88:	031b      	lsls	r3, r3, #12
 8001a8a:	4902      	ldr	r1, [pc, #8]	; (8001a94 <HAL_RCC_OscConfig+0x288>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
 8001a90:	e026      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
 8001a92:	bf00      	nop
 8001a94:	58024400 	.word	0x58024400
 8001a98:	4b9a      	ldr	r3, [pc, #616]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	691b      	ldr	r3, [r3, #16]
 8001aa4:	061b      	lsls	r3, r3, #24
 8001aa6:	4997      	ldr	r1, [pc, #604]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]
 8001aac:	e018      	b.n	8001ae0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aae:	4b95      	ldr	r3, [pc, #596]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a94      	ldr	r2, [pc, #592]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001ab4:	f023 0301 	bic.w	r3, r3, #1
 8001ab8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aba:	f7ff f9dd 	bl	8000e78 <HAL_GetTick>
 8001abe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ac2:	f7ff f9d9 	bl	8000e78 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e2c2      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001ad4:	4b8b      	ldr	r3, [pc, #556]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0304 	and.w	r3, r3, #4
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f000 80a9 	beq.w	8001c40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aee:	4b85      	ldr	r3, [pc, #532]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001af0:	691b      	ldr	r3, [r3, #16]
 8001af2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001af6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001af8:	4b82      	ldr	r3, [pc, #520]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b08      	cmp	r3, #8
 8001b02:	d007      	beq.n	8001b14 <HAL_RCC_OscConfig+0x308>
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	2b18      	cmp	r3, #24
 8001b08:	d13a      	bne.n	8001b80 <HAL_RCC_OscConfig+0x374>
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d135      	bne.n	8001b80 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b14:	4b7b      	ldr	r3, [pc, #492]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d005      	beq.n	8001b2c <HAL_RCC_OscConfig+0x320>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	2b80      	cmp	r3, #128	; 0x80
 8001b26:	d001      	beq.n	8001b2c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e296      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b2c:	f7ff f9d4 	bl	8000ed8 <HAL_GetREVID>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d817      	bhi.n	8001b6a <HAL_RCC_OscConfig+0x35e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6a1b      	ldr	r3, [r3, #32]
 8001b3e:	2b20      	cmp	r3, #32
 8001b40:	d108      	bne.n	8001b54 <HAL_RCC_OscConfig+0x348>
 8001b42:	4b70      	ldr	r3, [pc, #448]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b4a:	4a6e      	ldr	r2, [pc, #440]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b50:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b52:	e075      	b.n	8001c40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b54:	4b6b      	ldr	r3, [pc, #428]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6a1b      	ldr	r3, [r3, #32]
 8001b60:	069b      	lsls	r3, r3, #26
 8001b62:	4968      	ldr	r1, [pc, #416]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b68:	e06a      	b.n	8001c40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b6a:	4b66      	ldr	r3, [pc, #408]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	061b      	lsls	r3, r3, #24
 8001b78:	4962      	ldr	r1, [pc, #392]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001b7e:	e05f      	b.n	8001c40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d042      	beq.n	8001c0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001b88:	4b5e      	ldr	r3, [pc, #376]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a5d      	ldr	r2, [pc, #372]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001b8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b94:	f7ff f970 	bl	8000e78 <HAL_GetTick>
 8001b98:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001b9c:	f7ff f96c 	bl	8000e78 <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e255      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001bae:	4b55      	ldr	r3, [pc, #340]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001bba:	f7ff f98d 	bl	8000ed8 <HAL_GetREVID>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	f241 0203 	movw	r2, #4099	; 0x1003
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d817      	bhi.n	8001bf8 <HAL_RCC_OscConfig+0x3ec>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	2b20      	cmp	r3, #32
 8001bce:	d108      	bne.n	8001be2 <HAL_RCC_OscConfig+0x3d6>
 8001bd0:	4b4c      	ldr	r3, [pc, #304]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001bd8:	4a4a      	ldr	r2, [pc, #296]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001bda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001bde:	6053      	str	r3, [r2, #4]
 8001be0:	e02e      	b.n	8001c40 <HAL_RCC_OscConfig+0x434>
 8001be2:	4b48      	ldr	r3, [pc, #288]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a1b      	ldr	r3, [r3, #32]
 8001bee:	069b      	lsls	r3, r3, #26
 8001bf0:	4944      	ldr	r1, [pc, #272]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	604b      	str	r3, [r1, #4]
 8001bf6:	e023      	b.n	8001c40 <HAL_RCC_OscConfig+0x434>
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a1b      	ldr	r3, [r3, #32]
 8001c04:	061b      	lsls	r3, r3, #24
 8001c06:	493f      	ldr	r1, [pc, #252]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	60cb      	str	r3, [r1, #12]
 8001c0c:	e018      	b.n	8001c40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001c0e:	4b3d      	ldr	r3, [pc, #244]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a3c      	ldr	r2, [pc, #240]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001c18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c1a:	f7ff f92d 	bl	8000e78 <HAL_GetTick>
 8001c1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c20:	e008      	b.n	8001c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8001c22:	f7ff f929 	bl	8000e78 <HAL_GetTick>
 8001c26:	4602      	mov	r2, r0
 8001c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c2a:	1ad3      	subs	r3, r2, r3
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d901      	bls.n	8001c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e212      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001c34:	4b33      	ldr	r3, [pc, #204]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d1f0      	bne.n	8001c22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0308 	and.w	r3, r3, #8
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d036      	beq.n	8001cba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d019      	beq.n	8001c88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c54:	4b2b      	ldr	r3, [pc, #172]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c58:	4a2a      	ldr	r2, [pc, #168]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c60:	f7ff f90a 	bl	8000e78 <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c68:	f7ff f906 	bl	8000e78 <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1ef      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001c7a:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d0f0      	beq.n	8001c68 <HAL_RCC_OscConfig+0x45c>
 8001c86:	e018      	b.n	8001cba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c88:	4b1e      	ldr	r3, [pc, #120]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff f8f0 	bl	8000e78 <HAL_GetTick>
 8001c98:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c9c:	f7ff f8ec 	bl	8000e78 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e1d5      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cae:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f0      	bne.n	8001c9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d039      	beq.n	8001d3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d01c      	beq.n	8001d08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001cce:	4b0d      	ldr	r3, [pc, #52]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a0c      	ldr	r2, [pc, #48]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001cd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cd8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001cda:	f7ff f8cd 	bl	8000e78 <HAL_GetTick>
 8001cde:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ce0:	e008      	b.n	8001cf4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001ce2:	f7ff f8c9 	bl	8000e78 <HAL_GetTick>
 8001ce6:	4602      	mov	r2, r0
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	1ad3      	subs	r3, r2, r3
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d901      	bls.n	8001cf4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	e1b2      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001cf4:	4b03      	ldr	r3, [pc, #12]	; (8001d04 <HAL_RCC_OscConfig+0x4f8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d0f0      	beq.n	8001ce2 <HAL_RCC_OscConfig+0x4d6>
 8001d00:	e01b      	b.n	8001d3a <HAL_RCC_OscConfig+0x52e>
 8001d02:	bf00      	nop
 8001d04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d08:	4b9b      	ldr	r3, [pc, #620]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a9a      	ldr	r2, [pc, #616]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001d12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001d14:	f7ff f8b0 	bl	8000e78 <HAL_GetTick>
 8001d18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff f8ac 	bl	8000e78 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e195      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001d2e:	4b92      	ldr	r3, [pc, #584]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d1f0      	bne.n	8001d1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0304 	and.w	r3, r3, #4
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 8081 	beq.w	8001e4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d48:	4b8c      	ldr	r3, [pc, #560]	; (8001f7c <HAL_RCC_OscConfig+0x770>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a8b      	ldr	r2, [pc, #556]	; (8001f7c <HAL_RCC_OscConfig+0x770>)
 8001d4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d54:	f7ff f890 	bl	8000e78 <HAL_GetTick>
 8001d58:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d5a:	e008      	b.n	8001d6e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001d5c:	f7ff f88c 	bl	8000e78 <HAL_GetTick>
 8001d60:	4602      	mov	r2, r0
 8001d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d901      	bls.n	8001d6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	e175      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001d6e:	4b83      	ldr	r3, [pc, #524]	; (8001f7c <HAL_RCC_OscConfig+0x770>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d0f0      	beq.n	8001d5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d106      	bne.n	8001d90 <HAL_RCC_OscConfig+0x584>
 8001d82:	4b7d      	ldr	r3, [pc, #500]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d86:	4a7c      	ldr	r2, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8e:	e02d      	b.n	8001dec <HAL_RCC_OscConfig+0x5e0>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCC_OscConfig+0x5a6>
 8001d98:	4b77      	ldr	r3, [pc, #476]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d9c:	4a76      	ldr	r2, [pc, #472]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001d9e:	f023 0301 	bic.w	r3, r3, #1
 8001da2:	6713      	str	r3, [r2, #112]	; 0x70
 8001da4:	4b74      	ldr	r3, [pc, #464]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da8:	4a73      	ldr	r2, [pc, #460]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001daa:	f023 0304 	bic.w	r3, r3, #4
 8001dae:	6713      	str	r3, [r2, #112]	; 0x70
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x5e0>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x5c8>
 8001dba:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a6e      	ldr	r2, [pc, #440]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	4b6c      	ldr	r3, [pc, #432]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a6b      	ldr	r2, [pc, #428]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x5e0>
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	; 0x70
 8001de0:	4b65      	ldr	r3, [pc, #404]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001de4:	4a64      	ldr	r2, [pc, #400]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d015      	beq.n	8001e20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff f840 	bl	8000e78 <HAL_GetTick>
 8001df8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f83c 	bl	8000e78 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e123      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e12:	4b59      	ldr	r3, [pc, #356]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ee      	beq.n	8001dfc <HAL_RCC_OscConfig+0x5f0>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f82a 	bl	8000e78 <HAL_GetTick>
 8001e24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff f826 	bl	8000e78 <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e10d      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e3e:	4b4e      	ldr	r3, [pc, #312]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ee      	bne.n	8001e28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 8102 	beq.w	8002058 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001e54:	4b48      	ldr	r3, [pc, #288]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e5c:	2b18      	cmp	r3, #24
 8001e5e:	f000 80bd 	beq.w	8001fdc <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	f040 809e 	bne.w	8001fa8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e6c:	4b42      	ldr	r3, [pc, #264]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a41      	ldr	r2, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001e72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e78:	f7fe fffe 	bl	8000e78 <HAL_GetTick>
 8001e7c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e7e:	e008      	b.n	8001e92 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001e80:	f7fe fffa 	bl	8000e78 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b02      	cmp	r3, #2
 8001e8c:	d901      	bls.n	8001e92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001e8e:	2303      	movs	r3, #3
 8001e90:	e0e3      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001e92:	4b39      	ldr	r3, [pc, #228]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d1f0      	bne.n	8001e80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e9e:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001ea0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ea2:	4b37      	ldr	r3, [pc, #220]	; (8001f80 <HAL_RCC_OscConfig+0x774>)
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001eaa:	687a      	ldr	r2, [r7, #4]
 8001eac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eae:	0112      	lsls	r2, r2, #4
 8001eb0:	430a      	orrs	r2, r1
 8001eb2:	4931      	ldr	r1, [pc, #196]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	628b      	str	r3, [r1, #40]	; 0x28
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	431a      	orrs	r2, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	041b      	lsls	r3, r3, #16
 8001ed6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001ee8:	4923      	ldr	r1, [pc, #140]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef2:	4a21      	ldr	r2, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001ef4:	f023 0301 	bic.w	r3, r3, #1
 8001ef8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001efa:	4b1f      	ldr	r3, [pc, #124]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001efc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <HAL_RCC_OscConfig+0x778>)
 8001f00:	4013      	ands	r3, r2
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001f06:	00d2      	lsls	r2, r2, #3
 8001f08:	491b      	ldr	r1, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001f0e:	4b1a      	ldr	r3, [pc, #104]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	f023 020c 	bic.w	r2, r3, #12
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	4917      	ldr	r1, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001f20:	4b15      	ldr	r3, [pc, #84]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f24:	f023 0202 	bic.w	r2, r3, #2
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2c:	4912      	ldr	r1, [pc, #72]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	4a0d      	ldr	r2, [pc, #52]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4e:	4a0a      	ldr	r2, [pc, #40]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	4a07      	ldr	r2, [pc, #28]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f5c:	f043 0301 	orr.w	r3, r3, #1
 8001f60:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a04      	ldr	r2, [pc, #16]	; (8001f78 <HAL_RCC_OscConfig+0x76c>)
 8001f68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7fe ff83 	bl	8000e78 <HAL_GetTick>
 8001f72:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f74:	e011      	b.n	8001f9a <HAL_RCC_OscConfig+0x78e>
 8001f76:	bf00      	nop
 8001f78:	58024400 	.word	0x58024400
 8001f7c:	58024800 	.word	0x58024800
 8001f80:	fffffc0c 	.word	0xfffffc0c
 8001f84:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f88:	f7fe ff76 	bl	8000e78 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e05f      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f9a:	4b32      	ldr	r3, [pc, #200]	; (8002064 <HAL_RCC_OscConfig+0x858>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x77c>
 8001fa6:	e057      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <HAL_RCC_OscConfig+0x858>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a2d      	ldr	r2, [pc, #180]	; (8002064 <HAL_RCC_OscConfig+0x858>)
 8001fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7fe ff60 	bl	8000e78 <HAL_GetTick>
 8001fb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7fe ff5c 	bl	8000e78 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e045      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fce:	4b25      	ldr	r3, [pc, #148]	; (8002064 <HAL_RCC_OscConfig+0x858>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x7b0>
 8001fda:	e03d      	b.n	8002058 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001fdc:	4b21      	ldr	r3, [pc, #132]	; (8002064 <HAL_RCC_OscConfig+0x858>)
 8001fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fe0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001fe2:	4b20      	ldr	r3, [pc, #128]	; (8002064 <HAL_RCC_OscConfig+0x858>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2b01      	cmp	r3, #1
 8001fee:	d031      	beq.n	8002054 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0203 	and.w	r2, r3, #3
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d12a      	bne.n	8002054 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d122      	bne.n	8002054 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002018:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800201a:	429a      	cmp	r2, r3
 800201c:	d11a      	bne.n	8002054 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	0a5b      	lsrs	r3, r3, #9
 8002022:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800202a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800202c:	429a      	cmp	r2, r3
 800202e:	d111      	bne.n	8002054 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	0c1b      	lsrs	r3, r3, #16
 8002034:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800203c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d108      	bne.n	8002054 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	0e1b      	lsrs	r3, r3, #24
 8002046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002050:	429a      	cmp	r2, r3
 8002052:	d001      	beq.n	8002058 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3730      	adds	r7, #48	; 0x30
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	58024400 	.word	0x58024400

08002068 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
 8002070:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	e19c      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800207c:	4b8a      	ldr	r3, [pc, #552]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 030f 	and.w	r3, r3, #15
 8002084:	683a      	ldr	r2, [r7, #0]
 8002086:	429a      	cmp	r2, r3
 8002088:	d910      	bls.n	80020ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800208a:	4b87      	ldr	r3, [pc, #540]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 020f 	bic.w	r2, r3, #15
 8002092:	4985      	ldr	r1, [pc, #532]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800209a:	4b83      	ldr	r3, [pc, #524]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e184      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0304 	and.w	r3, r3, #4
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691a      	ldr	r2, [r3, #16]
 80020bc:	4b7b      	ldr	r3, [pc, #492]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80020c8:	4b78      	ldr	r3, [pc, #480]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	691b      	ldr	r3, [r3, #16]
 80020d4:	4975      	ldr	r1, [pc, #468]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0308 	and.w	r3, r3, #8
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695a      	ldr	r2, [r3, #20]
 80020ea:	4b70      	ldr	r3, [pc, #448]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d908      	bls.n	8002108 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80020f6:	4b6d      	ldr	r3, [pc, #436]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695b      	ldr	r3, [r3, #20]
 8002102:	496a      	ldr	r1, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002104:	4313      	orrs	r3, r2
 8002106:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0310 	and.w	r3, r3, #16
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	699a      	ldr	r2, [r3, #24]
 8002118:	4b64      	ldr	r3, [pc, #400]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002120:	429a      	cmp	r2, r3
 8002122:	d908      	bls.n	8002136 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002124:	4b61      	ldr	r3, [pc, #388]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	699b      	ldr	r3, [r3, #24]
 8002130:	495e      	ldr	r1, [pc, #376]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002132:	4313      	orrs	r3, r2
 8002134:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0320 	and.w	r3, r3, #32
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	69da      	ldr	r2, [r3, #28]
 8002146:	4b59      	ldr	r3, [pc, #356]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d908      	bls.n	8002164 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002152:	4b56      	ldr	r3, [pc, #344]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002154:	6a1b      	ldr	r3, [r3, #32]
 8002156:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4953      	ldr	r1, [pc, #332]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002160:	4313      	orrs	r3, r2
 8002162:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	2b00      	cmp	r3, #0
 800216e:	d010      	beq.n	8002192 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	4b4d      	ldr	r3, [pc, #308]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	f003 030f 	and.w	r3, r3, #15
 800217c:	429a      	cmp	r2, r3
 800217e:	d908      	bls.n	8002192 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002180:	4b4a      	ldr	r3, [pc, #296]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	f023 020f 	bic.w	r2, r3, #15
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	68db      	ldr	r3, [r3, #12]
 800218c:	4947      	ldr	r1, [pc, #284]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 800218e:	4313      	orrs	r3, r2
 8002190:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	2b00      	cmp	r3, #0
 800219c:	d055      	beq.n	800224a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800219e:	4b43      	ldr	r3, [pc, #268]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	4940      	ldr	r1, [pc, #256]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80021ac:	4313      	orrs	r3, r2
 80021ae:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80021b8:	4b3c      	ldr	r3, [pc, #240]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d121      	bne.n	8002208 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e0f6      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	2b03      	cmp	r3, #3
 80021ce:	d107      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80021d0:	4b36      	ldr	r3, [pc, #216]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d115      	bne.n	8002208 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0ea      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80021e8:	4b30      	ldr	r3, [pc, #192]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d109      	bne.n	8002208 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e0de      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021f8:	4b2c      	ldr	r3, [pc, #176]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f003 0304 	and.w	r3, r3, #4
 8002200:	2b00      	cmp	r3, #0
 8002202:	d101      	bne.n	8002208 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e0d6      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002208:	4b28      	ldr	r3, [pc, #160]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	f023 0207 	bic.w	r2, r3, #7
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	4925      	ldr	r1, [pc, #148]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002216:	4313      	orrs	r3, r2
 8002218:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221a:	f7fe fe2d 	bl	8000e78 <HAL_GetTick>
 800221e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002220:	e00a      	b.n	8002238 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002222:	f7fe fe29 	bl	8000e78 <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	1ad3      	subs	r3, r2, r3
 800222c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002230:	4293      	cmp	r3, r2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e0be      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002238:	4b1c      	ldr	r3, [pc, #112]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	00db      	lsls	r3, r3, #3
 8002246:	429a      	cmp	r2, r3
 8002248:	d1eb      	bne.n	8002222 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d010      	beq.n	8002278 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	68da      	ldr	r2, [r3, #12]
 800225a:	4b14      	ldr	r3, [pc, #80]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	f003 030f 	and.w	r3, r3, #15
 8002262:	429a      	cmp	r2, r3
 8002264:	d208      	bcs.n	8002278 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002266:	4b11      	ldr	r3, [pc, #68]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f023 020f 	bic.w	r2, r3, #15
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	490e      	ldr	r1, [pc, #56]	; (80022ac <HAL_RCC_ClockConfig+0x244>)
 8002274:	4313      	orrs	r3, r2
 8002276:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002278:	4b0b      	ldr	r3, [pc, #44]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	429a      	cmp	r2, r3
 8002284:	d214      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002286:	4b08      	ldr	r3, [pc, #32]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f023 020f 	bic.w	r2, r3, #15
 800228e:	4906      	ldr	r1, [pc, #24]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	4313      	orrs	r3, r2
 8002294:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002296:	4b04      	ldr	r3, [pc, #16]	; (80022a8 <HAL_RCC_ClockConfig+0x240>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	683a      	ldr	r2, [r7, #0]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	e086      	b.n	80023b6 <HAL_RCC_ClockConfig+0x34e>
 80022a8:	52002000 	.word	0x52002000
 80022ac:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	691a      	ldr	r2, [r3, #16]
 80022c0:	4b3f      	ldr	r3, [pc, #252]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 80022c2:	699b      	ldr	r3, [r3, #24]
 80022c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d208      	bcs.n	80022de <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80022cc:	4b3c      	ldr	r3, [pc, #240]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	4939      	ldr	r1, [pc, #228]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0308 	and.w	r3, r3, #8
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	695a      	ldr	r2, [r3, #20]
 80022ee:	4b34      	ldr	r3, [pc, #208]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d208      	bcs.n	800230c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022fa:	4b31      	ldr	r3, [pc, #196]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 80022fc:	69db      	ldr	r3, [r3, #28]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	492e      	ldr	r1, [pc, #184]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 8002308:	4313      	orrs	r3, r2
 800230a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	d010      	beq.n	800233a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	699a      	ldr	r2, [r3, #24]
 800231c:	4b28      	ldr	r3, [pc, #160]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002324:	429a      	cmp	r2, r3
 8002326:	d208      	bcs.n	800233a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002328:	4b25      	ldr	r3, [pc, #148]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	4922      	ldr	r1, [pc, #136]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 8002336:	4313      	orrs	r3, r2
 8002338:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0320 	and.w	r3, r3, #32
 8002342:	2b00      	cmp	r3, #0
 8002344:	d010      	beq.n	8002368 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69da      	ldr	r2, [r3, #28]
 800234a:	4b1d      	ldr	r3, [pc, #116]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 800234c:	6a1b      	ldr	r3, [r3, #32]
 800234e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002352:	429a      	cmp	r2, r3
 8002354:	d208      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69db      	ldr	r3, [r3, #28]
 8002362:	4917      	ldr	r1, [pc, #92]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 8002364:	4313      	orrs	r3, r2
 8002366:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002368:	f000 f834 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 800236c:	4602      	mov	r2, r0
 800236e:	4b14      	ldr	r3, [pc, #80]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	4912      	ldr	r1, [pc, #72]	; (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	fa22 f303 	lsr.w	r3, r2, r3
 8002384:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002386:	4b0e      	ldr	r3, [pc, #56]	; (80023c0 <HAL_RCC_ClockConfig+0x358>)
 8002388:	699b      	ldr	r3, [r3, #24]
 800238a:	f003 030f 	and.w	r3, r3, #15
 800238e:	4a0d      	ldr	r2, [pc, #52]	; (80023c4 <HAL_RCC_ClockConfig+0x35c>)
 8002390:	5cd3      	ldrb	r3, [r2, r3]
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	693a      	ldr	r2, [r7, #16]
 8002398:	fa22 f303 	lsr.w	r3, r2, r3
 800239c:	4a0a      	ldr	r2, [pc, #40]	; (80023c8 <HAL_RCC_ClockConfig+0x360>)
 800239e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <HAL_RCC_ClockConfig+0x364>)
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80023a6:	4b0a      	ldr	r3, [pc, #40]	; (80023d0 <HAL_RCC_ClockConfig+0x368>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4618      	mov	r0, r3
 80023ac:	f7fe fd1a 	bl	8000de4 <HAL_InitTick>
 80023b0:	4603      	mov	r3, r0
 80023b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80023b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3718      	adds	r7, #24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}
 80023be:	bf00      	nop
 80023c0:	58024400 	.word	0x58024400
 80023c4:	080055b4 	.word	0x080055b4
 80023c8:	24000004 	.word	0x24000004
 80023cc:	24000000 	.word	0x24000000
 80023d0:	24000008 	.word	0x24000008

080023d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b089      	sub	sp, #36	; 0x24
 80023d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023da:	4bb3      	ldr	r3, [pc, #716]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80023e2:	2b18      	cmp	r3, #24
 80023e4:	f200 8155 	bhi.w	8002692 <HAL_RCC_GetSysClockFreq+0x2be>
 80023e8:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80023ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ee:	bf00      	nop
 80023f0:	08002455 	.word	0x08002455
 80023f4:	08002693 	.word	0x08002693
 80023f8:	08002693 	.word	0x08002693
 80023fc:	08002693 	.word	0x08002693
 8002400:	08002693 	.word	0x08002693
 8002404:	08002693 	.word	0x08002693
 8002408:	08002693 	.word	0x08002693
 800240c:	08002693 	.word	0x08002693
 8002410:	0800247b 	.word	0x0800247b
 8002414:	08002693 	.word	0x08002693
 8002418:	08002693 	.word	0x08002693
 800241c:	08002693 	.word	0x08002693
 8002420:	08002693 	.word	0x08002693
 8002424:	08002693 	.word	0x08002693
 8002428:	08002693 	.word	0x08002693
 800242c:	08002693 	.word	0x08002693
 8002430:	08002481 	.word	0x08002481
 8002434:	08002693 	.word	0x08002693
 8002438:	08002693 	.word	0x08002693
 800243c:	08002693 	.word	0x08002693
 8002440:	08002693 	.word	0x08002693
 8002444:	08002693 	.word	0x08002693
 8002448:	08002693 	.word	0x08002693
 800244c:	08002693 	.word	0x08002693
 8002450:	08002487 	.word	0x08002487
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002454:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0320 	and.w	r3, r3, #32
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8002460:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	08db      	lsrs	r3, r3, #3
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	4a90      	ldr	r2, [pc, #576]	; (80026ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800246c:	fa22 f303 	lsr.w	r3, r2, r3
 8002470:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8002472:	e111      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002474:	4b8d      	ldr	r3, [pc, #564]	; (80026ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002476:	61bb      	str	r3, [r7, #24]
    break;
 8002478:	e10e      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800247a:	4b8d      	ldr	r3, [pc, #564]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800247c:	61bb      	str	r3, [r7, #24]
    break;
 800247e:	e10b      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8002480:	4b8c      	ldr	r3, [pc, #560]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002482:	61bb      	str	r3, [r7, #24]
    break;
 8002484:	e108      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002486:	4b88      	ldr	r3, [pc, #544]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800248a:	f003 0303 	and.w	r3, r3, #3
 800248e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8002490:	4b85      	ldr	r3, [pc, #532]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	091b      	lsrs	r3, r3, #4
 8002496:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800249a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800249c:	4b82      	ldr	r3, [pc, #520]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80024a6:	4b80      	ldr	r3, [pc, #512]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	08db      	lsrs	r3, r3, #3
 80024ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	fb02 f303 	mul.w	r3, r2, r3
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024be:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	f000 80e1 	beq.w	800268c <HAL_RCC_GetSysClockFreq+0x2b8>
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	f000 8083 	beq.w	80025d8 <HAL_RCC_GetSysClockFreq+0x204>
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2b02      	cmp	r3, #2
 80024d6:	f200 80a1 	bhi.w	800261c <HAL_RCC_GetSysClockFreq+0x248>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d003      	beq.n	80024e8 <HAL_RCC_GetSysClockFreq+0x114>
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d056      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x1c0>
 80024e6:	e099      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80024e8:	4b6f      	ldr	r3, [pc, #444]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d02d      	beq.n	8002550 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80024f4:	4b6c      	ldr	r3, [pc, #432]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	08db      	lsrs	r3, r3, #3
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	4a6b      	ldr	r2, [pc, #428]	; (80026ac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
 8002504:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	ee07 3a90 	vmov	s15, r3
 800250c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800251a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800251e:	4b62      	ldr	r3, [pc, #392]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002526:	ee07 3a90 	vmov	s15, r3
 800252a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800252e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002532:	eddf 5a61 	vldr	s11, [pc, #388]	; 80026b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002536:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800253a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800253e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002542:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002546:	ee67 7a27 	vmul.f32	s15, s14, s15
 800254a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800254e:	e087      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002550:	693b      	ldr	r3, [r7, #16]
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800255a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80026bc <HAL_RCC_GetSysClockFreq+0x2e8>
 800255e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002562:	4b51      	ldr	r3, [pc, #324]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800256a:	ee07 3a90 	vmov	s15, r3
 800256e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002572:	ed97 6a02 	vldr	s12, [r7, #8]
 8002576:	eddf 5a50 	vldr	s11, [pc, #320]	; 80026b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800257a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800257e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002582:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002586:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800258a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800258e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002592:	e065      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800259e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025a6:	4b40      	ldr	r3, [pc, #256]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025ae:	ee07 3a90 	vmov	s15, r3
 80025b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80025ba:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80026b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80025be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80025d6:	e043      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80026c4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80025e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025ea:	4b2f      	ldr	r3, [pc, #188]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025f2:	ee07 3a90 	vmov	s15, r3
 80025f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80025fe:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80026b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800260a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800260e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002616:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800261a:	e021      	b.n	8002660 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	ee07 3a90 	vmov	s15, r3
 8002622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002626:	eddf 6a26 	vldr	s13, [pc, #152]	; 80026c0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800262a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800262e:	4b1e      	ldr	r3, [pc, #120]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002636:	ee07 3a90 	vmov	s15, r3
 800263a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800263e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002642:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80026b8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800264a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800264e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800265a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800265e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8002660:	4b11      	ldr	r3, [pc, #68]	; (80026a8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002662:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002664:	0a5b      	lsrs	r3, r3, #9
 8002666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800266a:	3301      	adds	r3, #1
 800266c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	ee07 3a90 	vmov	s15, r3
 8002674:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002678:	edd7 6a07 	vldr	s13, [r7, #28]
 800267c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002684:	ee17 3a90 	vmov	r3, s15
 8002688:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800268a:	e005      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
    break;
 8002690:	e002      	b.n	8002698 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002694:	61bb      	str	r3, [r7, #24]
    break;
 8002696:	bf00      	nop
  }

  return sysclockfreq;
 8002698:	69bb      	ldr	r3, [r7, #24]
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	58024400 	.word	0x58024400
 80026ac:	03d09000 	.word	0x03d09000
 80026b0:	003d0900 	.word	0x003d0900
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	46000000 	.word	0x46000000
 80026bc:	4c742400 	.word	0x4c742400
 80026c0:	4a742400 	.word	0x4a742400
 80026c4:	4af42400 	.word	0x4af42400

080026c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80026ce:	f7ff fe81 	bl	80023d4 <HAL_RCC_GetSysClockFreq>
 80026d2:	4602      	mov	r2, r0
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCC_GetHCLKFreq+0x50>)
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	0a1b      	lsrs	r3, r3, #8
 80026da:	f003 030f 	and.w	r3, r3, #15
 80026de:	490f      	ldr	r1, [pc, #60]	; (800271c <HAL_RCC_GetHCLKFreq+0x54>)
 80026e0:	5ccb      	ldrb	r3, [r1, r3]
 80026e2:	f003 031f 	and.w	r3, r3, #31
 80026e6:	fa22 f303 	lsr.w	r3, r2, r3
 80026ea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026ec:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_RCC_GetHCLKFreq+0x50>)
 80026ee:	699b      	ldr	r3, [r3, #24]
 80026f0:	f003 030f 	and.w	r3, r3, #15
 80026f4:	4a09      	ldr	r2, [pc, #36]	; (800271c <HAL_RCC_GetHCLKFreq+0x54>)
 80026f6:	5cd3      	ldrb	r3, [r2, r3]
 80026f8:	f003 031f 	and.w	r3, r3, #31
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	fa22 f303 	lsr.w	r3, r2, r3
 8002702:	4a07      	ldr	r2, [pc, #28]	; (8002720 <HAL_RCC_GetHCLKFreq+0x58>)
 8002704:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002706:	4a07      	ldr	r2, [pc, #28]	; (8002724 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800270c:	4b04      	ldr	r3, [pc, #16]	; (8002720 <HAL_RCC_GetHCLKFreq+0x58>)
 800270e:	681b      	ldr	r3, [r3, #0]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	58024400 	.word	0x58024400
 800271c:	080055b4 	.word	0x080055b4
 8002720:	24000004 	.word	0x24000004
 8002724:	24000000 	.word	0x24000000

08002728 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800272c:	f7ff ffcc 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	091b      	lsrs	r3, r3, #4
 8002738:	f003 0307 	and.w	r3, r3, #7
 800273c:	4904      	ldr	r1, [pc, #16]	; (8002750 <HAL_RCC_GetPCLK1Freq+0x28>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002748:	4618      	mov	r0, r3
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400
 8002750:	080055b4 	.word	0x080055b4

08002754 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002758:	f7ff ffb6 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 800275c:	4602      	mov	r2, r0
 800275e:	4b06      	ldr	r3, [pc, #24]	; (8002778 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	0a1b      	lsrs	r3, r3, #8
 8002764:	f003 0307 	and.w	r3, r3, #7
 8002768:	4904      	ldr	r1, [pc, #16]	; (800277c <HAL_RCC_GetPCLK2Freq+0x28>)
 800276a:	5ccb      	ldrb	r3, [r1, r3]
 800276c:	f003 031f 	and.w	r3, r3, #31
 8002770:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002774:	4618      	mov	r0, r3
 8002776:	bd80      	pop	{r7, pc}
 8002778:	58024400 	.word	0x58024400
 800277c:	080055b4 	.word	0x080055b4

08002780 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b086      	sub	sp, #24
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002788:	2300      	movs	r3, #0
 800278a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800278c:	2300      	movs	r3, #0
 800278e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d03f      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027a4:	d02a      	beq.n	80027fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027a6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80027aa:	d824      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b0:	d018      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80027b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80027b6:	d81e      	bhi.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027c0:	d007      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80027c2:	e018      	b.n	80027f6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80027c4:	4ba3      	ldr	r3, [pc, #652]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	4aa2      	ldr	r2, [pc, #648]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80027ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027d0:	e015      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3304      	adds	r3, #4
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f001 f9d5 	bl	8003b88 <RCCEx_PLL2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027e2:	e00c      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	3324      	adds	r3, #36	; 0x24
 80027e8:	2102      	movs	r1, #2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f001 fa7e 	bl	8003cec <RCCEx_PLL3_Config>
 80027f0:	4603      	mov	r3, r0
 80027f2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80027f4:	e003      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	75fb      	strb	r3, [r7, #23]
      break;
 80027fa:	e000      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80027fc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027fe:	7dfb      	ldrb	r3, [r7, #23]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d109      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002804:	4b93      	ldr	r3, [pc, #588]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002806:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002808:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002810:	4990      	ldr	r1, [pc, #576]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002812:	4313      	orrs	r3, r2
 8002814:	650b      	str	r3, [r1, #80]	; 0x50
 8002816:	e001      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002818:	7dfb      	ldrb	r3, [r7, #23]
 800281a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d03d      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282c:	2b04      	cmp	r3, #4
 800282e:	d826      	bhi.n	800287e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002830:	a201      	add	r2, pc, #4	; (adr r2, 8002838 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8002832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002836:	bf00      	nop
 8002838:	0800284d 	.word	0x0800284d
 800283c:	0800285b 	.word	0x0800285b
 8002840:	0800286d 	.word	0x0800286d
 8002844:	08002885 	.word	0x08002885
 8002848:	08002885 	.word	0x08002885
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800284c:	4b81      	ldr	r3, [pc, #516]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	4a80      	ldr	r2, [pc, #512]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002852:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002856:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002858:	e015      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3304      	adds	r3, #4
 800285e:	2100      	movs	r1, #0
 8002860:	4618      	mov	r0, r3
 8002862:	f001 f991 	bl	8003b88 <RCCEx_PLL2_Config>
 8002866:	4603      	mov	r3, r0
 8002868:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800286a:	e00c      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3324      	adds	r3, #36	; 0x24
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fa3a 	bl	8003cec <RCCEx_PLL3_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800287c:	e003      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
      break;
 8002882:	e000      	b.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002884:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002886:	7dfb      	ldrb	r3, [r7, #23]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d109      	bne.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800288c:	4b71      	ldr	r3, [pc, #452]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002890:	f023 0207 	bic.w	r2, r3, #7
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002898:	496e      	ldr	r1, [pc, #440]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	650b      	str	r3, [r1, #80]	; 0x50
 800289e:	e001      	b.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028a0:	7dfb      	ldrb	r3, [r7, #23]
 80028a2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d042      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b8:	d02b      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x192>
 80028ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028be:	d825      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028c0:	2bc0      	cmp	r3, #192	; 0xc0
 80028c2:	d028      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80028c4:	2bc0      	cmp	r3, #192	; 0xc0
 80028c6:	d821      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028c8:	2b80      	cmp	r3, #128	; 0x80
 80028ca:	d016      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x17a>
 80028cc:	2b80      	cmp	r3, #128	; 0x80
 80028ce:	d81d      	bhi.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d002      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80028d4:	2b40      	cmp	r3, #64	; 0x40
 80028d6:	d007      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 80028d8:	e018      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028da:	4b5e      	ldr	r3, [pc, #376]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028de:	4a5d      	ldr	r2, [pc, #372]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80028e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028e4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028e6:	e017      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	3304      	adds	r3, #4
 80028ec:	2100      	movs	r1, #0
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f94a 	bl	8003b88 <RCCEx_PLL2_Config>
 80028f4:	4603      	mov	r3, r0
 80028f6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80028f8:	e00e      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	3324      	adds	r3, #36	; 0x24
 80028fe:	2100      	movs	r1, #0
 8002900:	4618      	mov	r0, r3
 8002902:	f001 f9f3 	bl	8003cec <RCCEx_PLL3_Config>
 8002906:	4603      	mov	r3, r0
 8002908:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800290a:	e005      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	75fb      	strb	r3, [r7, #23]
      break;
 8002910:	e002      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002912:	bf00      	nop
 8002914:	e000      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8002916:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002918:	7dfb      	ldrb	r3, [r7, #23]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d109      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800291e:	4b4d      	ldr	r3, [pc, #308]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002920:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002922:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292a:	494a      	ldr	r1, [pc, #296]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800292c:	4313      	orrs	r3, r2
 800292e:	650b      	str	r3, [r1, #80]	; 0x50
 8002930:	e001      	b.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800293e:	2b00      	cmp	r3, #0
 8002940:	d049      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8002948:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800294c:	d030      	beq.n	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800294e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002952:	d82a      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002954:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002958:	d02c      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800295a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800295e:	d824      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8002960:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002964:	d018      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8002966:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800296a:	d81e      	bhi.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800296c:	2b00      	cmp	r3, #0
 800296e:	d003      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002970:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002974:	d007      	beq.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8002976:	e018      	b.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002978:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	4a35      	ldr	r2, [pc, #212]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800297e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002984:	e017      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	3304      	adds	r3, #4
 800298a:	2100      	movs	r1, #0
 800298c:	4618      	mov	r0, r3
 800298e:	f001 f8fb 	bl	8003b88 <RCCEx_PLL2_Config>
 8002992:	4603      	mov	r3, r0
 8002994:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002996:	e00e      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3324      	adds	r3, #36	; 0x24
 800299c:	2100      	movs	r1, #0
 800299e:	4618      	mov	r0, r3
 80029a0:	f001 f9a4 	bl	8003cec <RCCEx_PLL3_Config>
 80029a4:	4603      	mov	r3, r0
 80029a6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80029a8:	e005      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	75fb      	strb	r3, [r7, #23]
      break;
 80029ae:	e002      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80029b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d10a      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029bc:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80029ca:	4922      	ldr	r1, [pc, #136]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	658b      	str	r3, [r1, #88]	; 0x58
 80029d0:	e001      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029d2:	7dfb      	ldrb	r3, [r7, #23]
 80029d4:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d04b      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ec:	d030      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 80029ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029f2:	d82a      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80029f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029f8:	d02e      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80029fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80029fe:	d824      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a00:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a04:	d018      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8002a06:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a0a:	d81e      	bhi.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d003      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8002a10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a14:	d007      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8002a16:	e018      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a18:	4b0e      	ldr	r3, [pc, #56]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1c:	4a0d      	ldr	r2, [pc, #52]	; (8002a54 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8002a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a24:	e019      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	3304      	adds	r3, #4
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 f8ab 	bl	8003b88 <RCCEx_PLL2_Config>
 8002a32:	4603      	mov	r3, r0
 8002a34:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8002a36:	e010      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	3324      	adds	r3, #36	; 0x24
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f001 f954 	bl	8003cec <RCCEx_PLL3_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8002a48:	e007      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a4e:	e004      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8002a50:	bf00      	nop
 8002a52:	e002      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8002a54:	58024400 	.word	0x58024400
      break;
 8002a58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a5a:	7dfb      	ldrb	r3, [r7, #23]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d10a      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002a60:	4b99      	ldr	r3, [pc, #612]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a64:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002a6e:	4996      	ldr	r1, [pc, #600]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	658b      	str	r3, [r1, #88]	; 0x58
 8002a74:	e001      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a76:	7dfb      	ldrb	r3, [r7, #23]
 8002a78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d032      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8a:	2b30      	cmp	r3, #48	; 0x30
 8002a8c:	d01c      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8002a8e:	2b30      	cmp	r3, #48	; 0x30
 8002a90:	d817      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	d00c      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8002a96:	2b20      	cmp	r3, #32
 8002a98:	d813      	bhi.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8002a9e:	2b10      	cmp	r3, #16
 8002aa0:	d10f      	bne.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002aa2:	4b89      	ldr	r3, [pc, #548]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa6:	4a88      	ldr	r2, [pc, #544]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002aac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002aae:	e00e      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3304      	adds	r3, #4
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	f001 f866 	bl	8003b88 <RCCEx_PLL2_Config>
 8002abc:	4603      	mov	r3, r0
 8002abe:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8002ac0:	e005      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8002ac6:	e002      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002ac8:	bf00      	nop
 8002aca:	e000      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8002acc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ace:	7dfb      	ldrb	r3, [r7, #23]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d109      	bne.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ad4:	4b7c      	ldr	r3, [pc, #496]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ae0:	4979      	ldr	r1, [pc, #484]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002ae6:	e001      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ae8:	7dfb      	ldrb	r3, [r7, #23]
 8002aea:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d047      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b00:	d030      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002b02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b06:	d82a      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b0c:	d02c      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b12:	d824      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b18:	d018      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8002b1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b1e:	d81e      	bhi.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d003      	beq.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8002b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b28:	d007      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002b2a:	e018      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b2c:	4b66      	ldr	r3, [pc, #408]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b30:	4a65      	ldr	r2, [pc, #404]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b38:	e017      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	3304      	adds	r3, #4
 8002b3e:	2100      	movs	r1, #0
 8002b40:	4618      	mov	r0, r3
 8002b42:	f001 f821 	bl	8003b88 <RCCEx_PLL2_Config>
 8002b46:	4603      	mov	r3, r0
 8002b48:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b4a:	e00e      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3324      	adds	r3, #36	; 0x24
 8002b50:	2100      	movs	r1, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	f001 f8ca 	bl	8003cec <RCCEx_PLL3_Config>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8002b5c:	e005      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	75fb      	strb	r3, [r7, #23]
      break;
 8002b62:	e002      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b64:	bf00      	nop
 8002b66:	e000      	b.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8002b68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002b6a:	7dfb      	ldrb	r3, [r7, #23]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002b70:	4b55      	ldr	r3, [pc, #340]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	4952      	ldr	r1, [pc, #328]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	650b      	str	r3, [r1, #80]	; 0x50
 8002b82:	e001      	b.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b84:	7dfb      	ldrb	r3, [r7, #23]
 8002b86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d049      	beq.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b9c:	d02e      	beq.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002b9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba2:	d828      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002ba4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002ba8:	d02a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002baa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002bae:	d822      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bb0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bb4:	d026      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8002bb6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002bba:	d81c      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc0:	d010      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8002bc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002bc6:	d816      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d01d      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8002bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bd0:	d111      	bne.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f000 ffd5 	bl	8003b88 <RCCEx_PLL2_Config>
 8002bde:	4603      	mov	r3, r0
 8002be0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002be2:	e012      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	3324      	adds	r3, #36	; 0x24
 8002be8:	2101      	movs	r1, #1
 8002bea:	4618      	mov	r0, r3
 8002bec:	f001 f87e 	bl	8003cec <RCCEx_PLL3_Config>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8002bf4:	e009      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	75fb      	strb	r3, [r7, #23]
      break;
 8002bfa:	e006      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002bfc:	bf00      	nop
 8002bfe:	e004      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c00:	bf00      	nop
 8002c02:	e002      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c04:	bf00      	nop
 8002c06:	e000      	b.n	8002c0a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8002c08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002c0a:	7dfb      	ldrb	r3, [r7, #23]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d109      	bne.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002c10:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1c:	492a      	ldr	r1, [pc, #168]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	650b      	str	r3, [r1, #80]	; 0x50
 8002c22:	e001      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c24:	7dfb      	ldrb	r3, [r7, #23]
 8002c26:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d04d      	beq.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002c3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c3e:	d02e      	beq.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8002c40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c44:	d828      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c4a:	d02a      	beq.n	8002ca2 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8002c4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c50:	d822      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c56:	d026      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8002c58:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002c5c:	d81c      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c5e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c62:	d010      	beq.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8002c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c68:	d816      	bhi.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d01d      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8002c6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c72:	d111      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	3304      	adds	r3, #4
 8002c78:	2101      	movs	r1, #1
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f000 ff84 	bl	8003b88 <RCCEx_PLL2_Config>
 8002c80:	4603      	mov	r3, r0
 8002c82:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c84:	e012      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3324      	adds	r3, #36	; 0x24
 8002c8a:	2101      	movs	r1, #1
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f001 f82d 	bl	8003cec <RCCEx_PLL3_Config>
 8002c92:	4603      	mov	r3, r0
 8002c94:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8002c96:	e009      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c9c:	e006      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e004      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8002caa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cac:	7dfb      	ldrb	r3, [r7, #23]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10c      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002cb2:	4b05      	ldr	r3, [pc, #20]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cb6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002cc0:	4901      	ldr	r1, [pc, #4]	; (8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	658b      	str	r3, [r1, #88]	; 0x58
 8002cc6:	e003      	b.n	8002cd0 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8002cc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ccc:	7dfb      	ldrb	r3, [r7, #23]
 8002cce:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d02f      	beq.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ce0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce4:	d00e      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8002ce6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002cea:	d814      	bhi.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d015      	beq.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8002cf0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cf4:	d10f      	bne.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cf6:	4baf      	ldr	r3, [pc, #700]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfa:	4aae      	ldr	r2, [pc, #696]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002cfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d00:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d02:	e00c      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	2101      	movs	r1, #1
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f000 ff3c 	bl	8003b88 <RCCEx_PLL2_Config>
 8002d10:	4603      	mov	r3, r0
 8002d12:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8002d14:	e003      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	75fb      	strb	r3, [r7, #23]
      break;
 8002d1a:	e000      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8002d1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d1e:	7dfb      	ldrb	r3, [r7, #23]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d24:	4ba3      	ldr	r3, [pc, #652]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d28:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d30:	49a0      	ldr	r1, [pc, #640]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	650b      	str	r3, [r1, #80]	; 0x50
 8002d36:	e001      	b.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d38:	7dfb      	ldrb	r3, [r7, #23]
 8002d3a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d032      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d81b      	bhi.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8002d50:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8002d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d56:	bf00      	nop
 8002d58:	08002d8f 	.word	0x08002d8f
 8002d5c:	08002d69 	.word	0x08002d69
 8002d60:	08002d77 	.word	0x08002d77
 8002d64:	08002d8f 	.word	0x08002d8f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d68:	4b92      	ldr	r3, [pc, #584]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	4a91      	ldr	r2, [pc, #580]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d74:	e00c      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 ff03 	bl	8003b88 <RCCEx_PLL2_Config>
 8002d82:	4603      	mov	r3, r0
 8002d84:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8002d86:	e003      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8002d8c:	e000      	b.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8002d8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d90:	7dfb      	ldrb	r3, [r7, #23]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d109      	bne.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002d96:	4b87      	ldr	r3, [pc, #540]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002d98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d9a:	f023 0203 	bic.w	r2, r3, #3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da2:	4984      	ldr	r1, [pc, #528]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	64cb      	str	r3, [r1, #76]	; 0x4c
 8002da8:	e001      	b.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002daa:	7dfb      	ldrb	r3, [r7, #23]
 8002dac:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8086 	beq.w	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dbc:	4b7e      	ldr	r3, [pc, #504]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a7d      	ldr	r2, [pc, #500]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc8:	f7fe f856 	bl	8000e78 <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002dce:	e009      	b.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dd0:	f7fe f852 	bl	8000e78 <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b64      	cmp	r3, #100	; 0x64
 8002ddc:	d902      	bls.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	75fb      	strb	r3, [r7, #23]
        break;
 8002de2:	e005      	b.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002de4:	4b74      	ldr	r3, [pc, #464]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d0ef      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d166      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002df6:	4b6f      	ldr	r3, [pc, #444]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002df8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e00:	4053      	eors	r3, r2
 8002e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d013      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e0a:	4b6a      	ldr	r3, [pc, #424]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e12:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e14:	4b67      	ldr	r3, [pc, #412]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e18:	4a66      	ldr	r2, [pc, #408]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e1a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e1e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e20:	4b64      	ldr	r3, [pc, #400]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a63      	ldr	r2, [pc, #396]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002e2c:	4a61      	ldr	r2, [pc, #388]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3c:	d115      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e3e:	f7fe f81b 	bl	8000e78 <HAL_GetTick>
 8002e42:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e44:	e00b      	b.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e46:	f7fe f817 	bl	8000e78 <HAL_GetTick>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	1ad3      	subs	r3, r2, r3
 8002e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d902      	bls.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8002e58:	2303      	movs	r3, #3
 8002e5a:	75fb      	strb	r3, [r7, #23]
            break;
 8002e5c:	e005      	b.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e5e:	4b55      	ldr	r3, [pc, #340]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0ed      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d126      	bne.n	8002ebe <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e7e:	d10d      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8002e80:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e8e:	0919      	lsrs	r1, r3, #4
 8002e90:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8002e92:	400b      	ands	r3, r1
 8002e94:	4947      	ldr	r1, [pc, #284]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	610b      	str	r3, [r1, #16]
 8002e9a:	e005      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8002e9c:	4b45      	ldr	r3, [pc, #276]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	4a44      	ldr	r2, [pc, #272]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002ea2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ea6:	6113      	str	r3, [r2, #16]
 8002ea8:	4b42      	ldr	r3, [pc, #264]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eaa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002eb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eb6:	493f      	ldr	r1, [pc, #252]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	670b      	str	r3, [r1, #112]	; 0x70
 8002ebc:	e004      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ebe:	7dfb      	ldrb	r3, [r7, #23]
 8002ec0:	75bb      	strb	r3, [r7, #22]
 8002ec2:	e001      	b.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ec4:	7dfb      	ldrb	r3, [r7, #23]
 8002ec6:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f003 0301 	and.w	r3, r3, #1
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	f000 8085 	beq.w	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002eda:	2b28      	cmp	r3, #40	; 0x28
 8002edc:	d866      	bhi.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8002ede:	a201      	add	r2, pc, #4	; (adr r2, 8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8002ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ee4:	08002fc1 	.word	0x08002fc1
 8002ee8:	08002fad 	.word	0x08002fad
 8002eec:	08002fad 	.word	0x08002fad
 8002ef0:	08002fad 	.word	0x08002fad
 8002ef4:	08002fad 	.word	0x08002fad
 8002ef8:	08002fad 	.word	0x08002fad
 8002efc:	08002fad 	.word	0x08002fad
 8002f00:	08002fad 	.word	0x08002fad
 8002f04:	08002f89 	.word	0x08002f89
 8002f08:	08002fad 	.word	0x08002fad
 8002f0c:	08002fad 	.word	0x08002fad
 8002f10:	08002fad 	.word	0x08002fad
 8002f14:	08002fad 	.word	0x08002fad
 8002f18:	08002fad 	.word	0x08002fad
 8002f1c:	08002fad 	.word	0x08002fad
 8002f20:	08002fad 	.word	0x08002fad
 8002f24:	08002f9b 	.word	0x08002f9b
 8002f28:	08002fad 	.word	0x08002fad
 8002f2c:	08002fad 	.word	0x08002fad
 8002f30:	08002fad 	.word	0x08002fad
 8002f34:	08002fad 	.word	0x08002fad
 8002f38:	08002fad 	.word	0x08002fad
 8002f3c:	08002fad 	.word	0x08002fad
 8002f40:	08002fad 	.word	0x08002fad
 8002f44:	08002fc1 	.word	0x08002fc1
 8002f48:	08002fad 	.word	0x08002fad
 8002f4c:	08002fad 	.word	0x08002fad
 8002f50:	08002fad 	.word	0x08002fad
 8002f54:	08002fad 	.word	0x08002fad
 8002f58:	08002fad 	.word	0x08002fad
 8002f5c:	08002fad 	.word	0x08002fad
 8002f60:	08002fad 	.word	0x08002fad
 8002f64:	08002fc1 	.word	0x08002fc1
 8002f68:	08002fad 	.word	0x08002fad
 8002f6c:	08002fad 	.word	0x08002fad
 8002f70:	08002fad 	.word	0x08002fad
 8002f74:	08002fad 	.word	0x08002fad
 8002f78:	08002fad 	.word	0x08002fad
 8002f7c:	08002fad 	.word	0x08002fad
 8002f80:	08002fad 	.word	0x08002fad
 8002f84:	08002fc1 	.word	0x08002fc1
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	3304      	adds	r3, #4
 8002f8c:	2101      	movs	r1, #1
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fdfa 	bl	8003b88 <RCCEx_PLL2_Config>
 8002f94:	4603      	mov	r3, r0
 8002f96:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002f98:	e013      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	3324      	adds	r3, #36	; 0x24
 8002f9e:	2101      	movs	r1, #1
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f000 fea3 	bl	8003cec <RCCEx_PLL3_Config>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8002faa:	e00a      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	75fb      	strb	r3, [r7, #23]
      break;
 8002fb0:	e007      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002fb2:	bf00      	nop
 8002fb4:	58024400 	.word	0x58024400
 8002fb8:	58024800 	.word	0x58024800
 8002fbc:	00ffffcf 	.word	0x00ffffcf
      break;
 8002fc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002fc2:	7dfb      	ldrb	r3, [r7, #23]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002fc8:	4b96      	ldr	r3, [pc, #600]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fcc:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fd4:	4993      	ldr	r1, [pc, #588]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	654b      	str	r3, [r1, #84]	; 0x54
 8002fda:	e001      	b.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fdc:	7dfb      	ldrb	r3, [r7, #23]
 8002fde:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d038      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff0:	2b05      	cmp	r3, #5
 8002ff2:	d821      	bhi.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8002ff4:	a201      	add	r2, pc, #4	; (adr r2, 8002ffc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8002ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ffa:	bf00      	nop
 8002ffc:	0800303f 	.word	0x0800303f
 8003000:	08003015 	.word	0x08003015
 8003004:	08003027 	.word	0x08003027
 8003008:	0800303f 	.word	0x0800303f
 800300c:	0800303f 	.word	0x0800303f
 8003010:	0800303f 	.word	0x0800303f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	3304      	adds	r3, #4
 8003018:	2101      	movs	r1, #1
 800301a:	4618      	mov	r0, r3
 800301c:	f000 fdb4 	bl	8003b88 <RCCEx_PLL2_Config>
 8003020:	4603      	mov	r3, r0
 8003022:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003024:	e00c      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	3324      	adds	r3, #36	; 0x24
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 fe5d 	bl	8003cec <RCCEx_PLL3_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8003036:	e003      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	75fb      	strb	r3, [r7, #23]
      break;
 800303c:	e000      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800303e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003040:	7dfb      	ldrb	r3, [r7, #23]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d109      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003046:	4b77      	ldr	r3, [pc, #476]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	f023 0207 	bic.w	r2, r3, #7
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003052:	4974      	ldr	r1, [pc, #464]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003054:	4313      	orrs	r3, r2
 8003056:	654b      	str	r3, [r1, #84]	; 0x54
 8003058:	e001      	b.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800305a:	7dfb      	ldrb	r3, [r7, #23]
 800305c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d03a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003070:	2b05      	cmp	r3, #5
 8003072:	d821      	bhi.n	80030b8 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	080030bf 	.word	0x080030bf
 8003080:	08003095 	.word	0x08003095
 8003084:	080030a7 	.word	0x080030a7
 8003088:	080030bf 	.word	0x080030bf
 800308c:	080030bf 	.word	0x080030bf
 8003090:	080030bf 	.word	0x080030bf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	3304      	adds	r3, #4
 8003098:	2101      	movs	r1, #1
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fd74 	bl	8003b88 <RCCEx_PLL2_Config>
 80030a0:	4603      	mov	r3, r0
 80030a2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030a4:	e00c      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	3324      	adds	r3, #36	; 0x24
 80030aa:	2101      	movs	r1, #1
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 fe1d 	bl	8003cec <RCCEx_PLL3_Config>
 80030b2:	4603      	mov	r3, r0
 80030b4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80030b6:	e003      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	75fb      	strb	r3, [r7, #23]
      break;
 80030bc:	e000      	b.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 80030be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10a      	bne.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c6:	4b57      	ldr	r3, [pc, #348]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ca:	f023 0207 	bic.w	r2, r3, #7
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d4:	4953      	ldr	r1, [pc, #332]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	658b      	str	r3, [r1, #88]	; 0x58
 80030da:	e001      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030dc:	7dfb      	ldrb	r3, [r7, #23]
 80030de:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0320 	and.w	r3, r3, #32
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d04b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030f6:	d02e      	beq.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80030f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fc:	d828      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80030fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003102:	d02a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8003104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003108:	d822      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800310a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800310e:	d026      	beq.n	800315e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8003110:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003114:	d81c      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003116:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800311a:	d010      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800311c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003120:	d816      	bhi.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8003122:	2b00      	cmp	r3, #0
 8003124:	d01d      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8003126:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800312a:	d111      	bne.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3304      	adds	r3, #4
 8003130:	2100      	movs	r1, #0
 8003132:	4618      	mov	r0, r3
 8003134:	f000 fd28 	bl	8003b88 <RCCEx_PLL2_Config>
 8003138:	4603      	mov	r3, r0
 800313a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800313c:	e012      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3324      	adds	r3, #36	; 0x24
 8003142:	2102      	movs	r1, #2
 8003144:	4618      	mov	r0, r3
 8003146:	f000 fdd1 	bl	8003cec <RCCEx_PLL3_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800314e:	e009      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003150:	2301      	movs	r3, #1
 8003152:	75fb      	strb	r3, [r7, #23]
      break;
 8003154:	e006      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003156:	bf00      	nop
 8003158:	e004      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800315a:	bf00      	nop
 800315c:	e002      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800315e:	bf00      	nop
 8003160:	e000      	b.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8003162:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003164:	7dfb      	ldrb	r3, [r7, #23]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d10a      	bne.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800316a:	4b2e      	ldr	r3, [pc, #184]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800316c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800316e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	492a      	ldr	r1, [pc, #168]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800317a:	4313      	orrs	r3, r2
 800317c:	654b      	str	r3, [r1, #84]	; 0x54
 800317e:	e001      	b.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003180:	7dfb      	ldrb	r3, [r7, #23]
 8003182:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800318c:	2b00      	cmp	r3, #0
 800318e:	d04d      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003196:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800319a:	d02e      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800319c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80031a0:	d828      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d02a      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80031a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031ac:	d822      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b2:	d026      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80031b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80031b8:	d81c      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031be:	d010      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80031c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031c4:	d816      	bhi.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d01d      	beq.n	8003206 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 80031ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ce:	d111      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	3304      	adds	r3, #4
 80031d4:	2100      	movs	r1, #0
 80031d6:	4618      	mov	r0, r3
 80031d8:	f000 fcd6 	bl	8003b88 <RCCEx_PLL2_Config>
 80031dc:	4603      	mov	r3, r0
 80031de:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031e0:	e012      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	3324      	adds	r3, #36	; 0x24
 80031e6:	2102      	movs	r1, #2
 80031e8:	4618      	mov	r0, r3
 80031ea:	f000 fd7f 	bl	8003cec <RCCEx_PLL3_Config>
 80031ee:	4603      	mov	r3, r0
 80031f0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80031f2:	e009      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	75fb      	strb	r3, [r7, #23]
      break;
 80031f8:	e006      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031fa:	bf00      	nop
 80031fc:	e004      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80031fe:	bf00      	nop
 8003200:	e002      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003202:	bf00      	nop
 8003204:	e000      	b.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8003206:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003208:	7dfb      	ldrb	r3, [r7, #23]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10c      	bne.n	8003228 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800320e:	4b05      	ldr	r3, [pc, #20]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8003210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003212:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321c:	4901      	ldr	r1, [pc, #4]	; (8003224 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800321e:	4313      	orrs	r3, r2
 8003220:	658b      	str	r3, [r1, #88]	; 0x58
 8003222:	e003      	b.n	800322c <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8003224:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003228:	7dfb      	ldrb	r3, [r7, #23]
 800322a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003234:	2b00      	cmp	r3, #0
 8003236:	d04b      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800323e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003242:	d02e      	beq.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8003244:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003248:	d828      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800324a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800324e:	d02a      	beq.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8003250:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003254:	d822      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003256:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800325a:	d026      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800325c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003260:	d81c      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8003262:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003266:	d010      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8003268:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800326c:	d816      	bhi.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d01d      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8003272:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003276:	d111      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	3304      	adds	r3, #4
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f000 fc82 	bl	8003b88 <RCCEx_PLL2_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8003288:	e012      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	3324      	adds	r3, #36	; 0x24
 800328e:	2102      	movs	r1, #2
 8003290:	4618      	mov	r0, r3
 8003292:	f000 fd2b 	bl	8003cec <RCCEx_PLL3_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	75fb      	strb	r3, [r7, #23]
      break;
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032a2:	bf00      	nop
 80032a4:	e004      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032a6:	bf00      	nop
 80032a8:	e002      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032aa:	bf00      	nop
 80032ac:	e000      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80032ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80032b0:	7dfb      	ldrb	r3, [r7, #23]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d10a      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032b6:	4b9d      	ldr	r3, [pc, #628]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80032c4:	4999      	ldr	r1, [pc, #612]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	658b      	str	r3, [r1, #88]	; 0x58
 80032ca:	e001      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032cc:	7dfb      	ldrb	r3, [r7, #23]
 80032ce:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 0308 	and.w	r3, r3, #8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d01a      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032e6:	d10a      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3324      	adds	r3, #36	; 0x24
 80032ec:	2102      	movs	r1, #2
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 fcfc 	bl	8003cec <RCCEx_PLL3_Config>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80032fe:	4b8b      	ldr	r3, [pc, #556]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003302:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800330c:	4987      	ldr	r1, [pc, #540]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800330e:	4313      	orrs	r3, r2
 8003310:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0310 	and.w	r3, r3, #16
 800331a:	2b00      	cmp	r3, #0
 800331c:	d01a      	beq.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003328:	d10a      	bne.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3324      	adds	r3, #36	; 0x24
 800332e:	2102      	movs	r1, #2
 8003330:	4618      	mov	r0, r3
 8003332:	f000 fcdb 	bl	8003cec <RCCEx_PLL3_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003340:	4b7a      	ldr	r3, [pc, #488]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003344:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800334e:	4977      	ldr	r1, [pc, #476]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003350:	4313      	orrs	r3, r2
 8003352:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d034      	beq.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003366:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800336a:	d01d      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800336c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003370:	d817      	bhi.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8003376:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800337a:	d009      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800337c:	e011      	b.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	3304      	adds	r3, #4
 8003382:	2100      	movs	r1, #0
 8003384:	4618      	mov	r0, r3
 8003386:	f000 fbff 	bl	8003b88 <RCCEx_PLL2_Config>
 800338a:	4603      	mov	r3, r0
 800338c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800338e:	e00c      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3324      	adds	r3, #36	; 0x24
 8003394:	2102      	movs	r1, #2
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fca8 	bl	8003cec <RCCEx_PLL3_Config>
 800339c:	4603      	mov	r3, r0
 800339e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80033a0:	e003      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	75fb      	strb	r3, [r7, #23]
      break;
 80033a6:	e000      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80033a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10a      	bne.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033b0:	4b5e      	ldr	r3, [pc, #376]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80033be:	495b      	ldr	r1, [pc, #364]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033c0:	4313      	orrs	r3, r2
 80033c2:	658b      	str	r3, [r1, #88]	; 0x58
 80033c4:	e001      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
 80033c8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d033      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e0:	d01c      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80033e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80033e6:	d816      	bhi.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80033e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ec:	d003      	beq.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80033ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80033f2:	d007      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80033f4:	e00f      	b.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f6:	4b4d      	ldr	r3, [pc, #308]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a4c      	ldr	r2, [pc, #304]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8003402:	e00c      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3324      	adds	r3, #36	; 0x24
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fc6e 	bl	8003cec <RCCEx_PLL3_Config>
 8003410:	4603      	mov	r3, r0
 8003412:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8003414:	e003      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	75fb      	strb	r3, [r7, #23]
      break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800341c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800341e:	7dfb      	ldrb	r3, [r7, #23]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10a      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003424:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003432:	493e      	ldr	r1, [pc, #248]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003434:	4313      	orrs	r3, r2
 8003436:	654b      	str	r3, [r1, #84]	; 0x54
 8003438:	e001      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343a:	7dfb      	ldrb	r3, [r7, #23]
 800343c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d029      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800344e:	2b00      	cmp	r3, #0
 8003450:	d003      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8003452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003456:	d007      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8003458:	e00f      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800345a:	4b34      	ldr	r3, [pc, #208]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	4a33      	ldr	r2, [pc, #204]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003464:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003466:	e00b      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	3304      	adds	r3, #4
 800346c:	2102      	movs	r1, #2
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fb8a 	bl	8003b88 <RCCEx_PLL2_Config>
 8003474:	4603      	mov	r3, r0
 8003476:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8003478:	e002      	b.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800347a:	2301      	movs	r3, #1
 800347c:	75fb      	strb	r3, [r7, #23]
      break;
 800347e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003480:	7dfb      	ldrb	r3, [r7, #23]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d109      	bne.n	800349a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003486:	4b29      	ldr	r3, [pc, #164]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800348a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003492:	4926      	ldr	r1, [pc, #152]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003494:	4313      	orrs	r3, r2
 8003496:	64cb      	str	r3, [r1, #76]	; 0x4c
 8003498:	e001      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3324      	adds	r3, #36	; 0x24
 80034ae:	2102      	movs	r1, #2
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 fc1b 	bl	8003cec <RCCEx_PLL3_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d001      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d033      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034d4:	d017      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 80034d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034da:	d811      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80034dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e0:	d013      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80034e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80034e6:	d80b      	bhi.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d010      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034f0:	d106      	bne.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034f2:	4b0e      	ldr	r3, [pc, #56]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f6:	4a0d      	ldr	r2, [pc, #52]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80034f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80034fe:	e007      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	75fb      	strb	r3, [r7, #23]
      break;
 8003504:	e004      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8003506:	bf00      	nop
 8003508:	e002      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800350a:	bf00      	nop
 800350c:	e000      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800350e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003510:	7dfb      	ldrb	r3, [r7, #23]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d10c      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003516:	4b05      	ldr	r3, [pc, #20]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003522:	4902      	ldr	r1, [pc, #8]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8003524:	4313      	orrs	r3, r2
 8003526:	654b      	str	r3, [r1, #84]	; 0x54
 8003528:	e004      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800352a:	bf00      	nop
 800352c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7dfb      	ldrb	r3, [r7, #23]
 8003532:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003540:	4b31      	ldr	r3, [pc, #196]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003544:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354c:	492e      	ldr	r1, [pc, #184]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800354e:	4313      	orrs	r3, r2
 8003550:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800355e:	4b2a      	ldr	r3, [pc, #168]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800356c:	4926      	ldr	r1, [pc, #152]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800356e:	4313      	orrs	r3, r2
 8003570:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d008      	beq.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800357e:	4b22      	ldr	r3, [pc, #136]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8003580:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003582:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800358c:	4313      	orrs	r3, r2
 800358e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800359c:	4b1a      	ldr	r3, [pc, #104]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800359e:	691b      	ldr	r3, [r3, #16]
 80035a0:	4a19      	ldr	r2, [pc, #100]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80035a6:	6113      	str	r3, [r2, #16]
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80035b2:	4915      	ldr	r1, [pc, #84]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035b4:	4313      	orrs	r3, r2
 80035b6:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	da08      	bge.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80035c0:	4b11      	ldr	r3, [pc, #68]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035c4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035cc:	490e      	ldr	r1, [pc, #56]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035ce:	4313      	orrs	r3, r2
 80035d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d009      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ec:	4906      	ldr	r1, [pc, #24]	; (8003608 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80035f2:	7dbb      	ldrb	r3, [r7, #22]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e000      	b.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	58024400 	.word	0x58024400

0800360c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003610:	f7ff f85a 	bl	80026c8 <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b06      	ldr	r3, [pc, #24]	; (8003630 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003618:	6a1b      	ldr	r3, [r3, #32]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4904      	ldr	r1, [pc, #16]	; (8003634 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	f003 031f 	and.w	r3, r3, #31
 8003628:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800362c:	4618      	mov	r0, r3
 800362e:	bd80      	pop	{r7, pc}
 8003630:	58024400 	.word	0x58024400
 8003634:	080055b4 	.word	0x080055b4

08003638 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8003638:	b480      	push	{r7}
 800363a:	b089      	sub	sp, #36	; 0x24
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003640:	4ba1      	ldr	r3, [pc, #644]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800364a:	4b9f      	ldr	r3, [pc, #636]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	0b1b      	lsrs	r3, r3, #12
 8003650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003654:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003656:	4b9c      	ldr	r3, [pc, #624]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	091b      	lsrs	r3, r3, #4
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8003662:	4b99      	ldr	r3, [pc, #612]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003666:	08db      	lsrs	r3, r3, #3
 8003668:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	fb02 f303 	mul.w	r3, r2, r3
 8003672:	ee07 3a90 	vmov	s15, r3
 8003676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800367a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8111 	beq.w	80038a8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b02      	cmp	r3, #2
 800368a:	f000 8083 	beq.w	8003794 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	2b02      	cmp	r3, #2
 8003692:	f200 80a1 	bhi.w	80037d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d056      	beq.n	8003750 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80036a2:	e099      	b.n	80037d8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80036a4:	4b88      	ldr	r3, [pc, #544]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0320 	and.w	r3, r3, #32
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d02d      	beq.n	800370c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80036b0:	4b85      	ldr	r3, [pc, #532]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	08db      	lsrs	r3, r3, #3
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	4a84      	ldr	r2, [pc, #528]	; (80038cc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80036bc:	fa22 f303 	lsr.w	r3, r2, r3
 80036c0:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	ee07 3a90 	vmov	s15, r3
 80036c8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	ee07 3a90 	vmov	s15, r3
 80036d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80036da:	4b7b      	ldr	r3, [pc, #492]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80036dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036e2:	ee07 3a90 	vmov	s15, r3
 80036e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80036ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80036ee:	eddf 5a78 	vldr	s11, [pc, #480]	; 80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80036f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80036f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80036fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80036fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003706:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800370a:	e087      	b.n	800381c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	ee07 3a90 	vmov	s15, r3
 8003712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003716:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80038d4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800371a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800371e:	4b6a      	ldr	r3, [pc, #424]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003726:	ee07 3a90 	vmov	s15, r3
 800372a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800372e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003732:	eddf 5a67 	vldr	s11, [pc, #412]	; 80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800373a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800373e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800374a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800374e:	e065      	b.n	800381c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	ee07 3a90 	vmov	s15, r3
 8003756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800375a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800375e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003762:	4b59      	ldr	r3, [pc, #356]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800376a:	ee07 3a90 	vmov	s15, r3
 800376e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003772:	ed97 6a03 	vldr	s12, [r7, #12]
 8003776:	eddf 5a56 	vldr	s11, [pc, #344]	; 80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800377a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800377e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800378a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800378e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003792:	e043      	b.n	800381c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	ee07 3a90 	vmov	s15, r3
 800379a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800379e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80038dc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80037a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037a6:	4b48      	ldr	r3, [pc, #288]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037ae:	ee07 3a90 	vmov	s15, r3
 80037b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80037ba:	eddf 5a45 	vldr	s11, [pc, #276]	; 80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80037be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80037c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80037c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80037ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80037d6:	e021      	b.n	800381c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037e2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80038d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80037e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80037ea:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80037ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80037f2:	ee07 3a90 	vmov	s15, r3
 80037f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80037fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80037fe:	eddf 5a34 	vldr	s11, [pc, #208]	; 80038d0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800380a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800380e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003816:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800381a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800381c:	4b2a      	ldr	r3, [pc, #168]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	0a5b      	lsrs	r3, r3, #9
 8003822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003826:	ee07 3a90 	vmov	s15, r3
 800382a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800382e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003832:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003836:	edd7 6a07 	vldr	s13, [r7, #28]
 800383a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800383e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003842:	ee17 2a90 	vmov	r2, s15
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	0c1b      	lsrs	r3, r3, #16
 8003850:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003854:	ee07 3a90 	vmov	s15, r3
 8003858:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800385c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003860:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003864:	edd7 6a07 	vldr	s13, [r7, #28]
 8003868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800386c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003870:	ee17 2a90 	vmov	r2, s15
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800387a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800387c:	0e1b      	lsrs	r3, r3, #24
 800387e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003882:	ee07 3a90 	vmov	s15, r3
 8003886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800388a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800388e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003892:	edd7 6a07 	vldr	s13, [r7, #28]
 8003896:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800389a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800389e:	ee17 2a90 	vmov	r2, s15
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80038a6:	e008      	b.n	80038ba <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	609a      	str	r2, [r3, #8]
}
 80038ba:	bf00      	nop
 80038bc:	3724      	adds	r7, #36	; 0x24
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	58024400 	.word	0x58024400
 80038cc:	03d09000 	.word	0x03d09000
 80038d0:	46000000 	.word	0x46000000
 80038d4:	4c742400 	.word	0x4c742400
 80038d8:	4a742400 	.word	0x4a742400
 80038dc:	4af42400 	.word	0x4af42400

080038e0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80038e8:	4ba1      	ldr	r3, [pc, #644]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038ec:	f003 0303 	and.w	r3, r3, #3
 80038f0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80038f2:	4b9f      	ldr	r3, [pc, #636]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80038f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f6:	0d1b      	lsrs	r3, r3, #20
 80038f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038fc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80038fe:	4b9c      	ldr	r3, [pc, #624]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003902:	0a1b      	lsrs	r3, r3, #8
 8003904:	f003 0301 	and.w	r3, r3, #1
 8003908:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800390a:	4b99      	ldr	r3, [pc, #612]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800390c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800390e:	08db      	lsrs	r3, r3, #3
 8003910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003914:	693a      	ldr	r2, [r7, #16]
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	ee07 3a90 	vmov	s15, r3
 800391e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003922:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 8111 	beq.w	8003b50 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b02      	cmp	r3, #2
 8003932:	f000 8083 	beq.w	8003a3c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	2b02      	cmp	r3, #2
 800393a:	f200 80a1 	bhi.w	8003a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003944:	69bb      	ldr	r3, [r7, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d056      	beq.n	80039f8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800394a:	e099      	b.n	8003a80 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800394c:	4b88      	ldr	r3, [pc, #544]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0320 	and.w	r3, r3, #32
 8003954:	2b00      	cmp	r3, #0
 8003956:	d02d      	beq.n	80039b4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003958:	4b85      	ldr	r3, [pc, #532]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	08db      	lsrs	r3, r3, #3
 800395e:	f003 0303 	and.w	r3, r3, #3
 8003962:	4a84      	ldr	r2, [pc, #528]	; (8003b74 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003964:	fa22 f303 	lsr.w	r3, r2, r3
 8003968:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	ee07 3a90 	vmov	s15, r3
 8003970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	ee07 3a90 	vmov	s15, r3
 800397a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800397e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003982:	4b7b      	ldr	r3, [pc, #492]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800398a:	ee07 3a90 	vmov	s15, r3
 800398e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003992:	ed97 6a03 	vldr	s12, [r7, #12]
 8003996:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800399a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800399e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80039b2:	e087      	b.n	8003ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	ee07 3a90 	vmov	s15, r3
 80039ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003b7c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80039c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039c6:	4b6a      	ldr	r3, [pc, #424]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ce:	ee07 3a90 	vmov	s15, r3
 80039d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80039da:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80039de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80039ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80039f6:	e065      	b.n	8003ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a0a:	4b59      	ldr	r3, [pc, #356]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a12:	ee07 3a90 	vmov	s15, r3
 8003a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a3a:	e043      	b.n	8003ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	ee07 3a90 	vmov	s15, r3
 8003a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003b84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a4e:	4b48      	ldr	r3, [pc, #288]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a56:	ee07 3a90 	vmov	s15, r3
 8003a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003a7e:	e021      	b.n	8003ac4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	ee07 3a90 	vmov	s15, r3
 8003a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003b80 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a92:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a9a:	ee07 3a90 	vmov	s15, r3
 8003a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003aa6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003b78 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003abe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8003ac2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8003ac4:	4b2a      	ldr	r3, [pc, #168]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac8:	0a5b      	lsrs	r3, r3, #9
 8003aca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ace:	ee07 3a90 	vmov	s15, r3
 8003ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ad6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8003ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aea:	ee17 2a90 	vmov	r2, s15
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8003af2:	4b1f      	ldr	r3, [pc, #124]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	0c1b      	lsrs	r3, r3, #16
 8003af8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003afc:	ee07 3a90 	vmov	s15, r3
 8003b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b18:	ee17 2a90 	vmov	r2, s15
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8003b20:	4b13      	ldr	r3, [pc, #76]	; (8003b70 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	0e1b      	lsrs	r3, r3, #24
 8003b26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b2a:	ee07 3a90 	vmov	s15, r3
 8003b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b46:	ee17 2a90 	vmov	r2, s15
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003b4e:	e008      	b.n	8003b62 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	609a      	str	r2, [r3, #8]
}
 8003b62:	bf00      	nop
 8003b64:	3724      	adds	r7, #36	; 0x24
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	58024400 	.word	0x58024400
 8003b74:	03d09000 	.word	0x03d09000
 8003b78:	46000000 	.word	0x46000000
 8003b7c:	4c742400 	.word	0x4c742400
 8003b80:	4a742400 	.word	0x4a742400
 8003b84:	4af42400 	.word	0x4af42400

08003b88 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b084      	sub	sp, #16
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b92:	2300      	movs	r3, #0
 8003b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003b96:	4b53      	ldr	r3, [pc, #332]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b9a:	f003 0303 	and.w	r3, r3, #3
 8003b9e:	2b03      	cmp	r3, #3
 8003ba0:	d101      	bne.n	8003ba6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e099      	b.n	8003cda <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003ba6:	4b4f      	ldr	r3, [pc, #316]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a4e      	ldr	r2, [pc, #312]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003bac:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003bb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bb2:	f7fd f961 	bl	8000e78 <HAL_GetTick>
 8003bb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bb8:	e008      	b.n	8003bcc <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003bba:	f7fd f95d 	bl	8000e78 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68bb      	ldr	r3, [r7, #8]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d901      	bls.n	8003bcc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003bc8:	2303      	movs	r3, #3
 8003bca:	e086      	b.n	8003cda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003bcc:	4b45      	ldr	r3, [pc, #276]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d1f0      	bne.n	8003bba <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003bd8:	4b42      	ldr	r3, [pc, #264]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bdc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	031b      	lsls	r3, r3, #12
 8003be6:	493f      	ldr	r1, [pc, #252]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	628b      	str	r3, [r1, #40]	; 0x28
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	3b01      	subs	r3, #1
 8003bf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	025b      	lsls	r3, r3, #9
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	431a      	orrs	r2, r3
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	041b      	lsls	r3, r3, #16
 8003c0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003c0e:	431a      	orrs	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	061b      	lsls	r3, r3, #24
 8003c18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003c1c:	4931      	ldr	r1, [pc, #196]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003c22:	4b30      	ldr	r3, [pc, #192]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c26:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	492d      	ldr	r1, [pc, #180]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003c34:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c38:	f023 0220 	bic.w	r2, r3, #32
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	4928      	ldr	r1, [pc, #160]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003c46:	4b27      	ldr	r3, [pc, #156]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	4a26      	ldr	r2, [pc, #152]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c4c:	f023 0310 	bic.w	r3, r3, #16
 8003c50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c56:	4b24      	ldr	r3, [pc, #144]	; (8003ce8 <RCCEx_PLL2_Config+0x160>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	69d2      	ldr	r2, [r2, #28]
 8003c5e:	00d2      	lsls	r2, r2, #3
 8003c60:	4920      	ldr	r1, [pc, #128]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003c66:	4b1f      	ldr	r3, [pc, #124]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c6c:	f043 0310 	orr.w	r3, r3, #16
 8003c70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d106      	bne.n	8003c86 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003c78:	4b1a      	ldr	r3, [pc, #104]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003c82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c84:	e00f      	b.n	8003ca6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d106      	bne.n	8003c9a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003c8c:	4b15      	ldr	r3, [pc, #84]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a14      	ldr	r2, [pc, #80]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003c98:	e005      	b.n	8003ca6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003c9a:	4b12      	ldr	r3, [pc, #72]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	4a11      	ldr	r2, [pc, #68]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003ca0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003ca4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003ca6:	4b0f      	ldr	r3, [pc, #60]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a0e      	ldr	r2, [pc, #56]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003cac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cb2:	f7fd f8e1 	bl	8000e78 <HAL_GetTick>
 8003cb6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003cb8:	e008      	b.n	8003ccc <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8003cba:	f7fd f8dd 	bl	8000e78 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e006      	b.n	8003cda <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003ccc:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <RCCEx_PLL2_Config+0x15c>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3710      	adds	r7, #16
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	bf00      	nop
 8003ce4:	58024400 	.word	0x58024400
 8003ce8:	ffff0007 	.word	0xffff0007

08003cec <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003cfa:	4b53      	ldr	r3, [pc, #332]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cfe:	f003 0303 	and.w	r3, r3, #3
 8003d02:	2b03      	cmp	r3, #3
 8003d04:	d101      	bne.n	8003d0a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e099      	b.n	8003e3e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003d0a:	4b4f      	ldr	r3, [pc, #316]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a4e      	ldr	r2, [pc, #312]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d16:	f7fd f8af 	bl	8000e78 <HAL_GetTick>
 8003d1a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d1c:	e008      	b.n	8003d30 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003d1e:	f7fd f8ab 	bl	8000e78 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e086      	b.n	8003e3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8003d30:	4b45      	ldr	r3, [pc, #276]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8003d3c:	4b42      	ldr	r3, [pc, #264]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d40:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	051b      	lsls	r3, r3, #20
 8003d4a:	493f      	ldr	r1, [pc, #252]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	628b      	str	r3, [r1, #40]	; 0x28
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	3b01      	subs	r3, #1
 8003d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	3b01      	subs	r3, #1
 8003d60:	025b      	lsls	r3, r3, #9
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	431a      	orrs	r2, r3
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	3b01      	subs	r3, #1
 8003d6c:	041b      	lsls	r3, r3, #16
 8003d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	061b      	lsls	r3, r3, #24
 8003d7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003d80:	4931      	ldr	r1, [pc, #196]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d82:	4313      	orrs	r3, r2
 8003d84:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8003d86:	4b30      	ldr	r3, [pc, #192]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	492d      	ldr	r1, [pc, #180]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d94:	4313      	orrs	r3, r2
 8003d96:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8003d98:	4b2b      	ldr	r3, [pc, #172]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	4928      	ldr	r1, [pc, #160]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8003daa:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	4a26      	ldr	r2, [pc, #152]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003db0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003db4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8003db6:	4b24      	ldr	r3, [pc, #144]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003db8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dba:	4b24      	ldr	r3, [pc, #144]	; (8003e4c <RCCEx_PLL3_Config+0x160>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	69d2      	ldr	r2, [r2, #28]
 8003dc2:	00d2      	lsls	r2, r2, #3
 8003dc4:	4920      	ldr	r1, [pc, #128]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8003dca:	4b1f      	ldr	r3, [pc, #124]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dce:	4a1e      	ldr	r2, [pc, #120]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d106      	bne.n	8003dea <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8003ddc:	4b1a      	ldr	r3, [pc, #104]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	4a19      	ldr	r2, [pc, #100]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003de2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003de6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003de8:	e00f      	b.n	8003e0a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d106      	bne.n	8003dfe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8003df0:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003df6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003dfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003dfc:	e005      	b.n	8003e0a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8003dfe:	4b12      	ldr	r3, [pc, #72]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	4a11      	ldr	r2, [pc, #68]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003e04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e08:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8003e0a:	4b0f      	ldr	r3, [pc, #60]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a0e      	ldr	r2, [pc, #56]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e16:	f7fd f82f 	bl	8000e78 <HAL_GetTick>
 8003e1a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e1c:	e008      	b.n	8003e30 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8003e1e:	f7fd f82b 	bl	8000e78 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d901      	bls.n	8003e30 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e006      	b.n	8003e3e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8003e30:	4b05      	ldr	r3, [pc, #20]	; (8003e48 <RCCEx_PLL3_Config+0x15c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d0f0      	beq.n	8003e1e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8003e3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	58024400 	.word	0x58024400
 8003e4c:	ffff0007 	.word	0xffff0007

08003e50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b082      	sub	sp, #8
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e042      	b.n	8003ee8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d106      	bne.n	8003e7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7fc fe37 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2224      	movs	r2, #36	; 0x24
 8003e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 0201 	bic.w	r2, r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f000 f82c 	bl	8003ef0 <UART_SetConfig>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e022      	b.n	8003ee8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d002      	beq.n	8003eb0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fd88 	bl	80049c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	685a      	ldr	r2, [r3, #4]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ebe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	689a      	ldr	r2, [r3, #8]
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ece:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f042 0201 	orr.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	f000 fe0f 	bl	8004b04 <UART_CheckIdleState>
 8003ee6:	4603      	mov	r3, r0
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3708      	adds	r7, #8
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b092      	sub	sp, #72	; 0x48
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	689a      	ldr	r2, [r3, #8]
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	69db      	ldr	r3, [r3, #28]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	4bbe      	ldr	r3, [pc, #760]	; (8004218 <UART_SetConfig+0x328>)
 8003f20:	4013      	ands	r3, r2
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	6812      	ldr	r2, [r2, #0]
 8003f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f28:	430b      	orrs	r3, r1
 8003f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4ab3      	ldr	r2, [pc, #716]	; (800421c <UART_SetConfig+0x32c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d004      	beq.n	8003f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	6a1b      	ldr	r3, [r3, #32]
 8003f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	689a      	ldr	r2, [r3, #8]
 8003f62:	4baf      	ldr	r3, [pc, #700]	; (8004220 <UART_SetConfig+0x330>)
 8003f64:	4013      	ands	r3, r2
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f76:	f023 010f 	bic.w	r1, r3, #15
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4aa6      	ldr	r2, [pc, #664]	; (8004224 <UART_SetConfig+0x334>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d177      	bne.n	8004080 <UART_SetConfig+0x190>
 8003f90:	4ba5      	ldr	r3, [pc, #660]	; (8004228 <UART_SetConfig+0x338>)
 8003f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f98:	2b28      	cmp	r3, #40	; 0x28
 8003f9a:	d86d      	bhi.n	8004078 <UART_SetConfig+0x188>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0xb4>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08004049 	.word	0x08004049
 8003fa8:	08004079 	.word	0x08004079
 8003fac:	08004079 	.word	0x08004079
 8003fb0:	08004079 	.word	0x08004079
 8003fb4:	08004079 	.word	0x08004079
 8003fb8:	08004079 	.word	0x08004079
 8003fbc:	08004079 	.word	0x08004079
 8003fc0:	08004079 	.word	0x08004079
 8003fc4:	08004051 	.word	0x08004051
 8003fc8:	08004079 	.word	0x08004079
 8003fcc:	08004079 	.word	0x08004079
 8003fd0:	08004079 	.word	0x08004079
 8003fd4:	08004079 	.word	0x08004079
 8003fd8:	08004079 	.word	0x08004079
 8003fdc:	08004079 	.word	0x08004079
 8003fe0:	08004079 	.word	0x08004079
 8003fe4:	08004059 	.word	0x08004059
 8003fe8:	08004079 	.word	0x08004079
 8003fec:	08004079 	.word	0x08004079
 8003ff0:	08004079 	.word	0x08004079
 8003ff4:	08004079 	.word	0x08004079
 8003ff8:	08004079 	.word	0x08004079
 8003ffc:	08004079 	.word	0x08004079
 8004000:	08004079 	.word	0x08004079
 8004004:	08004061 	.word	0x08004061
 8004008:	08004079 	.word	0x08004079
 800400c:	08004079 	.word	0x08004079
 8004010:	08004079 	.word	0x08004079
 8004014:	08004079 	.word	0x08004079
 8004018:	08004079 	.word	0x08004079
 800401c:	08004079 	.word	0x08004079
 8004020:	08004079 	.word	0x08004079
 8004024:	08004069 	.word	0x08004069
 8004028:	08004079 	.word	0x08004079
 800402c:	08004079 	.word	0x08004079
 8004030:	08004079 	.word	0x08004079
 8004034:	08004079 	.word	0x08004079
 8004038:	08004079 	.word	0x08004079
 800403c:	08004079 	.word	0x08004079
 8004040:	08004079 	.word	0x08004079
 8004044:	08004071 	.word	0x08004071
 8004048:	2301      	movs	r3, #1
 800404a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800404e:	e222      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004050:	2304      	movs	r3, #4
 8004052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004056:	e21e      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004058:	2308      	movs	r3, #8
 800405a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800405e:	e21a      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004060:	2310      	movs	r3, #16
 8004062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004066:	e216      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004068:	2320      	movs	r3, #32
 800406a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800406e:	e212      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004070:	2340      	movs	r3, #64	; 0x40
 8004072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004076:	e20e      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004078:	2380      	movs	r3, #128	; 0x80
 800407a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800407e:	e20a      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a69      	ldr	r2, [pc, #420]	; (800422c <UART_SetConfig+0x33c>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d130      	bne.n	80040ec <UART_SetConfig+0x1fc>
 800408a:	4b67      	ldr	r3, [pc, #412]	; (8004228 <UART_SetConfig+0x338>)
 800408c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800408e:	f003 0307 	and.w	r3, r3, #7
 8004092:	2b05      	cmp	r3, #5
 8004094:	d826      	bhi.n	80040e4 <UART_SetConfig+0x1f4>
 8004096:	a201      	add	r2, pc, #4	; (adr r2, 800409c <UART_SetConfig+0x1ac>)
 8004098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800409c:	080040b5 	.word	0x080040b5
 80040a0:	080040bd 	.word	0x080040bd
 80040a4:	080040c5 	.word	0x080040c5
 80040a8:	080040cd 	.word	0x080040cd
 80040ac:	080040d5 	.word	0x080040d5
 80040b0:	080040dd 	.word	0x080040dd
 80040b4:	2300      	movs	r3, #0
 80040b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ba:	e1ec      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040bc:	2304      	movs	r3, #4
 80040be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040c2:	e1e8      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040c4:	2308      	movs	r3, #8
 80040c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ca:	e1e4      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040cc:	2310      	movs	r3, #16
 80040ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040d2:	e1e0      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040d4:	2320      	movs	r3, #32
 80040d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040da:	e1dc      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040dc:	2340      	movs	r3, #64	; 0x40
 80040de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040e2:	e1d8      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80040ea:	e1d4      	b.n	8004496 <UART_SetConfig+0x5a6>
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a4f      	ldr	r2, [pc, #316]	; (8004230 <UART_SetConfig+0x340>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d130      	bne.n	8004158 <UART_SetConfig+0x268>
 80040f6:	4b4c      	ldr	r3, [pc, #304]	; (8004228 <UART_SetConfig+0x338>)
 80040f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	2b05      	cmp	r3, #5
 8004100:	d826      	bhi.n	8004150 <UART_SetConfig+0x260>
 8004102:	a201      	add	r2, pc, #4	; (adr r2, 8004108 <UART_SetConfig+0x218>)
 8004104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004108:	08004121 	.word	0x08004121
 800410c:	08004129 	.word	0x08004129
 8004110:	08004131 	.word	0x08004131
 8004114:	08004139 	.word	0x08004139
 8004118:	08004141 	.word	0x08004141
 800411c:	08004149 	.word	0x08004149
 8004120:	2300      	movs	r3, #0
 8004122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004126:	e1b6      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004128:	2304      	movs	r3, #4
 800412a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800412e:	e1b2      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004130:	2308      	movs	r3, #8
 8004132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004136:	e1ae      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004138:	2310      	movs	r3, #16
 800413a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800413e:	e1aa      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004140:	2320      	movs	r3, #32
 8004142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004146:	e1a6      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004148:	2340      	movs	r3, #64	; 0x40
 800414a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800414e:	e1a2      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004150:	2380      	movs	r3, #128	; 0x80
 8004152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004156:	e19e      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a35      	ldr	r2, [pc, #212]	; (8004234 <UART_SetConfig+0x344>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d130      	bne.n	80041c4 <UART_SetConfig+0x2d4>
 8004162:	4b31      	ldr	r3, [pc, #196]	; (8004228 <UART_SetConfig+0x338>)
 8004164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004166:	f003 0307 	and.w	r3, r3, #7
 800416a:	2b05      	cmp	r3, #5
 800416c:	d826      	bhi.n	80041bc <UART_SetConfig+0x2cc>
 800416e:	a201      	add	r2, pc, #4	; (adr r2, 8004174 <UART_SetConfig+0x284>)
 8004170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004174:	0800418d 	.word	0x0800418d
 8004178:	08004195 	.word	0x08004195
 800417c:	0800419d 	.word	0x0800419d
 8004180:	080041a5 	.word	0x080041a5
 8004184:	080041ad 	.word	0x080041ad
 8004188:	080041b5 	.word	0x080041b5
 800418c:	2300      	movs	r3, #0
 800418e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004192:	e180      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004194:	2304      	movs	r3, #4
 8004196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800419a:	e17c      	b.n	8004496 <UART_SetConfig+0x5a6>
 800419c:	2308      	movs	r3, #8
 800419e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041a2:	e178      	b.n	8004496 <UART_SetConfig+0x5a6>
 80041a4:	2310      	movs	r3, #16
 80041a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041aa:	e174      	b.n	8004496 <UART_SetConfig+0x5a6>
 80041ac:	2320      	movs	r3, #32
 80041ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041b2:	e170      	b.n	8004496 <UART_SetConfig+0x5a6>
 80041b4:	2340      	movs	r3, #64	; 0x40
 80041b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041ba:	e16c      	b.n	8004496 <UART_SetConfig+0x5a6>
 80041bc:	2380      	movs	r3, #128	; 0x80
 80041be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041c2:	e168      	b.n	8004496 <UART_SetConfig+0x5a6>
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <UART_SetConfig+0x348>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d142      	bne.n	8004254 <UART_SetConfig+0x364>
 80041ce:	4b16      	ldr	r3, [pc, #88]	; (8004228 <UART_SetConfig+0x338>)
 80041d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d838      	bhi.n	800424c <UART_SetConfig+0x35c>
 80041da:	a201      	add	r2, pc, #4	; (adr r2, 80041e0 <UART_SetConfig+0x2f0>)
 80041dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e0:	080041f9 	.word	0x080041f9
 80041e4:	08004201 	.word	0x08004201
 80041e8:	08004209 	.word	0x08004209
 80041ec:	08004211 	.word	0x08004211
 80041f0:	0800423d 	.word	0x0800423d
 80041f4:	08004245 	.word	0x08004245
 80041f8:	2300      	movs	r3, #0
 80041fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80041fe:	e14a      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004206:	e146      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800420e:	e142      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004216:	e13e      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004218:	cfff69f3 	.word	0xcfff69f3
 800421c:	58000c00 	.word	0x58000c00
 8004220:	11fff4ff 	.word	0x11fff4ff
 8004224:	40011000 	.word	0x40011000
 8004228:	58024400 	.word	0x58024400
 800422c:	40004400 	.word	0x40004400
 8004230:	40004800 	.word	0x40004800
 8004234:	40004c00 	.word	0x40004c00
 8004238:	40005000 	.word	0x40005000
 800423c:	2320      	movs	r3, #32
 800423e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004242:	e128      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004244:	2340      	movs	r3, #64	; 0x40
 8004246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800424a:	e124      	b.n	8004496 <UART_SetConfig+0x5a6>
 800424c:	2380      	movs	r3, #128	; 0x80
 800424e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004252:	e120      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4acb      	ldr	r2, [pc, #812]	; (8004588 <UART_SetConfig+0x698>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d176      	bne.n	800434c <UART_SetConfig+0x45c>
 800425e:	4bcb      	ldr	r3, [pc, #812]	; (800458c <UART_SetConfig+0x69c>)
 8004260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004266:	2b28      	cmp	r3, #40	; 0x28
 8004268:	d86c      	bhi.n	8004344 <UART_SetConfig+0x454>
 800426a:	a201      	add	r2, pc, #4	; (adr r2, 8004270 <UART_SetConfig+0x380>)
 800426c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004270:	08004315 	.word	0x08004315
 8004274:	08004345 	.word	0x08004345
 8004278:	08004345 	.word	0x08004345
 800427c:	08004345 	.word	0x08004345
 8004280:	08004345 	.word	0x08004345
 8004284:	08004345 	.word	0x08004345
 8004288:	08004345 	.word	0x08004345
 800428c:	08004345 	.word	0x08004345
 8004290:	0800431d 	.word	0x0800431d
 8004294:	08004345 	.word	0x08004345
 8004298:	08004345 	.word	0x08004345
 800429c:	08004345 	.word	0x08004345
 80042a0:	08004345 	.word	0x08004345
 80042a4:	08004345 	.word	0x08004345
 80042a8:	08004345 	.word	0x08004345
 80042ac:	08004345 	.word	0x08004345
 80042b0:	08004325 	.word	0x08004325
 80042b4:	08004345 	.word	0x08004345
 80042b8:	08004345 	.word	0x08004345
 80042bc:	08004345 	.word	0x08004345
 80042c0:	08004345 	.word	0x08004345
 80042c4:	08004345 	.word	0x08004345
 80042c8:	08004345 	.word	0x08004345
 80042cc:	08004345 	.word	0x08004345
 80042d0:	0800432d 	.word	0x0800432d
 80042d4:	08004345 	.word	0x08004345
 80042d8:	08004345 	.word	0x08004345
 80042dc:	08004345 	.word	0x08004345
 80042e0:	08004345 	.word	0x08004345
 80042e4:	08004345 	.word	0x08004345
 80042e8:	08004345 	.word	0x08004345
 80042ec:	08004345 	.word	0x08004345
 80042f0:	08004335 	.word	0x08004335
 80042f4:	08004345 	.word	0x08004345
 80042f8:	08004345 	.word	0x08004345
 80042fc:	08004345 	.word	0x08004345
 8004300:	08004345 	.word	0x08004345
 8004304:	08004345 	.word	0x08004345
 8004308:	08004345 	.word	0x08004345
 800430c:	08004345 	.word	0x08004345
 8004310:	0800433d 	.word	0x0800433d
 8004314:	2301      	movs	r3, #1
 8004316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800431a:	e0bc      	b.n	8004496 <UART_SetConfig+0x5a6>
 800431c:	2304      	movs	r3, #4
 800431e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004322:	e0b8      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004324:	2308      	movs	r3, #8
 8004326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800432a:	e0b4      	b.n	8004496 <UART_SetConfig+0x5a6>
 800432c:	2310      	movs	r3, #16
 800432e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004332:	e0b0      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004334:	2320      	movs	r3, #32
 8004336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800433a:	e0ac      	b.n	8004496 <UART_SetConfig+0x5a6>
 800433c:	2340      	movs	r3, #64	; 0x40
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004342:	e0a8      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004344:	2380      	movs	r3, #128	; 0x80
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800434a:	e0a4      	b.n	8004496 <UART_SetConfig+0x5a6>
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a8f      	ldr	r2, [pc, #572]	; (8004590 <UART_SetConfig+0x6a0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d130      	bne.n	80043b8 <UART_SetConfig+0x4c8>
 8004356:	4b8d      	ldr	r3, [pc, #564]	; (800458c <UART_SetConfig+0x69c>)
 8004358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	2b05      	cmp	r3, #5
 8004360:	d826      	bhi.n	80043b0 <UART_SetConfig+0x4c0>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x478>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	08004381 	.word	0x08004381
 800436c:	08004389 	.word	0x08004389
 8004370:	08004391 	.word	0x08004391
 8004374:	08004399 	.word	0x08004399
 8004378:	080043a1 	.word	0x080043a1
 800437c:	080043a9 	.word	0x080043a9
 8004380:	2300      	movs	r3, #0
 8004382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004386:	e086      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004388:	2304      	movs	r3, #4
 800438a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800438e:	e082      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004390:	2308      	movs	r3, #8
 8004392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004396:	e07e      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004398:	2310      	movs	r3, #16
 800439a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800439e:	e07a      	b.n	8004496 <UART_SetConfig+0x5a6>
 80043a0:	2320      	movs	r3, #32
 80043a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043a6:	e076      	b.n	8004496 <UART_SetConfig+0x5a6>
 80043a8:	2340      	movs	r3, #64	; 0x40
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043ae:	e072      	b.n	8004496 <UART_SetConfig+0x5a6>
 80043b0:	2380      	movs	r3, #128	; 0x80
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043b6:	e06e      	b.n	8004496 <UART_SetConfig+0x5a6>
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a75      	ldr	r2, [pc, #468]	; (8004594 <UART_SetConfig+0x6a4>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d130      	bne.n	8004424 <UART_SetConfig+0x534>
 80043c2:	4b72      	ldr	r3, [pc, #456]	; (800458c <UART_SetConfig+0x69c>)
 80043c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b05      	cmp	r3, #5
 80043cc:	d826      	bhi.n	800441c <UART_SetConfig+0x52c>
 80043ce:	a201      	add	r2, pc, #4	; (adr r2, 80043d4 <UART_SetConfig+0x4e4>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	080043ed 	.word	0x080043ed
 80043d8:	080043f5 	.word	0x080043f5
 80043dc:	080043fd 	.word	0x080043fd
 80043e0:	08004405 	.word	0x08004405
 80043e4:	0800440d 	.word	0x0800440d
 80043e8:	08004415 	.word	0x08004415
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043f2:	e050      	b.n	8004496 <UART_SetConfig+0x5a6>
 80043f4:	2304      	movs	r3, #4
 80043f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80043fa:	e04c      	b.n	8004496 <UART_SetConfig+0x5a6>
 80043fc:	2308      	movs	r3, #8
 80043fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004402:	e048      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004404:	2310      	movs	r3, #16
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800440a:	e044      	b.n	8004496 <UART_SetConfig+0x5a6>
 800440c:	2320      	movs	r3, #32
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004412:	e040      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004414:	2340      	movs	r3, #64	; 0x40
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800441a:	e03c      	b.n	8004496 <UART_SetConfig+0x5a6>
 800441c:	2380      	movs	r3, #128	; 0x80
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004422:	e038      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a5b      	ldr	r2, [pc, #364]	; (8004598 <UART_SetConfig+0x6a8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d130      	bne.n	8004490 <UART_SetConfig+0x5a0>
 800442e:	4b57      	ldr	r3, [pc, #348]	; (800458c <UART_SetConfig+0x69c>)
 8004430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b05      	cmp	r3, #5
 8004438:	d826      	bhi.n	8004488 <UART_SetConfig+0x598>
 800443a:	a201      	add	r2, pc, #4	; (adr r2, 8004440 <UART_SetConfig+0x550>)
 800443c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004440:	08004459 	.word	0x08004459
 8004444:	08004461 	.word	0x08004461
 8004448:	08004469 	.word	0x08004469
 800444c:	08004471 	.word	0x08004471
 8004450:	08004479 	.word	0x08004479
 8004454:	08004481 	.word	0x08004481
 8004458:	2302      	movs	r3, #2
 800445a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800445e:	e01a      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004460:	2304      	movs	r3, #4
 8004462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004466:	e016      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004468:	2308      	movs	r3, #8
 800446a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800446e:	e012      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004470:	2310      	movs	r3, #16
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004476:	e00e      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004478:	2320      	movs	r3, #32
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800447e:	e00a      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004480:	2340      	movs	r3, #64	; 0x40
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004486:	e006      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004488:	2380      	movs	r3, #128	; 0x80
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800448e:	e002      	b.n	8004496 <UART_SetConfig+0x5a6>
 8004490:	2380      	movs	r3, #128	; 0x80
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a3f      	ldr	r2, [pc, #252]	; (8004598 <UART_SetConfig+0x6a8>)
 800449c:	4293      	cmp	r3, r2
 800449e:	f040 80f8 	bne.w	8004692 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80044a6:	2b20      	cmp	r3, #32
 80044a8:	dc46      	bgt.n	8004538 <UART_SetConfig+0x648>
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	f2c0 8082 	blt.w	80045b4 <UART_SetConfig+0x6c4>
 80044b0:	3b02      	subs	r3, #2
 80044b2:	2b1e      	cmp	r3, #30
 80044b4:	d87e      	bhi.n	80045b4 <UART_SetConfig+0x6c4>
 80044b6:	a201      	add	r2, pc, #4	; (adr r2, 80044bc <UART_SetConfig+0x5cc>)
 80044b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044bc:	0800453f 	.word	0x0800453f
 80044c0:	080045b5 	.word	0x080045b5
 80044c4:	08004547 	.word	0x08004547
 80044c8:	080045b5 	.word	0x080045b5
 80044cc:	080045b5 	.word	0x080045b5
 80044d0:	080045b5 	.word	0x080045b5
 80044d4:	08004557 	.word	0x08004557
 80044d8:	080045b5 	.word	0x080045b5
 80044dc:	080045b5 	.word	0x080045b5
 80044e0:	080045b5 	.word	0x080045b5
 80044e4:	080045b5 	.word	0x080045b5
 80044e8:	080045b5 	.word	0x080045b5
 80044ec:	080045b5 	.word	0x080045b5
 80044f0:	080045b5 	.word	0x080045b5
 80044f4:	08004567 	.word	0x08004567
 80044f8:	080045b5 	.word	0x080045b5
 80044fc:	080045b5 	.word	0x080045b5
 8004500:	080045b5 	.word	0x080045b5
 8004504:	080045b5 	.word	0x080045b5
 8004508:	080045b5 	.word	0x080045b5
 800450c:	080045b5 	.word	0x080045b5
 8004510:	080045b5 	.word	0x080045b5
 8004514:	080045b5 	.word	0x080045b5
 8004518:	080045b5 	.word	0x080045b5
 800451c:	080045b5 	.word	0x080045b5
 8004520:	080045b5 	.word	0x080045b5
 8004524:	080045b5 	.word	0x080045b5
 8004528:	080045b5 	.word	0x080045b5
 800452c:	080045b5 	.word	0x080045b5
 8004530:	080045b5 	.word	0x080045b5
 8004534:	080045a7 	.word	0x080045a7
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d037      	beq.n	80045ac <UART_SetConfig+0x6bc>
 800453c:	e03a      	b.n	80045b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800453e:	f7ff f865 	bl	800360c <HAL_RCCEx_GetD3PCLK1Freq>
 8004542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004544:	e03c      	b.n	80045c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800454a:	4618      	mov	r0, r3
 800454c:	f7ff f874 	bl	8003638 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004554:	e034      	b.n	80045c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004556:	f107 0318 	add.w	r3, r7, #24
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff f9c0 	bl	80038e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004564:	e02c      	b.n	80045c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004566:	4b09      	ldr	r3, [pc, #36]	; (800458c <UART_SetConfig+0x69c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d016      	beq.n	80045a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004572:	4b06      	ldr	r3, [pc, #24]	; (800458c <UART_SetConfig+0x69c>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	08db      	lsrs	r3, r3, #3
 8004578:	f003 0303 	and.w	r3, r3, #3
 800457c:	4a07      	ldr	r2, [pc, #28]	; (800459c <UART_SetConfig+0x6ac>)
 800457e:	fa22 f303 	lsr.w	r3, r2, r3
 8004582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004584:	e01c      	b.n	80045c0 <UART_SetConfig+0x6d0>
 8004586:	bf00      	nop
 8004588:	40011400 	.word	0x40011400
 800458c:	58024400 	.word	0x58024400
 8004590:	40007800 	.word	0x40007800
 8004594:	40007c00 	.word	0x40007c00
 8004598:	58000c00 	.word	0x58000c00
 800459c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80045a0:	4b9d      	ldr	r3, [pc, #628]	; (8004818 <UART_SetConfig+0x928>)
 80045a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045a4:	e00c      	b.n	80045c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80045a6:	4b9d      	ldr	r3, [pc, #628]	; (800481c <UART_SetConfig+0x92c>)
 80045a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045aa:	e009      	b.n	80045c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80045b2:	e005      	b.n	80045c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80045b4:	2300      	movs	r3, #0
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80045be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 81de 	beq.w	8004984 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	4a94      	ldr	r2, [pc, #592]	; (8004820 <UART_SetConfig+0x930>)
 80045ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045d2:	461a      	mov	r2, r3
 80045d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80045da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	685a      	ldr	r2, [r3, #4]
 80045e0:	4613      	mov	r3, r2
 80045e2:	005b      	lsls	r3, r3, #1
 80045e4:	4413      	add	r3, r2
 80045e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d305      	bcc.n	80045f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	685b      	ldr	r3, [r3, #4]
 80045f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80045f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d903      	bls.n	8004600 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80045fe:	e1c1      	b.n	8004984 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004602:	2200      	movs	r2, #0
 8004604:	60bb      	str	r3, [r7, #8]
 8004606:	60fa      	str	r2, [r7, #12]
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460c:	4a84      	ldr	r2, [pc, #528]	; (8004820 <UART_SetConfig+0x930>)
 800460e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004612:	b29b      	uxth	r3, r3
 8004614:	2200      	movs	r2, #0
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800461e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004622:	f7fb fe59 	bl	80002d8 <__aeabi_uldivmod>
 8004626:	4602      	mov	r2, r0
 8004628:	460b      	mov	r3, r1
 800462a:	4610      	mov	r0, r2
 800462c:	4619      	mov	r1, r3
 800462e:	f04f 0200 	mov.w	r2, #0
 8004632:	f04f 0300 	mov.w	r3, #0
 8004636:	020b      	lsls	r3, r1, #8
 8004638:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800463c:	0202      	lsls	r2, r0, #8
 800463e:	6979      	ldr	r1, [r7, #20]
 8004640:	6849      	ldr	r1, [r1, #4]
 8004642:	0849      	lsrs	r1, r1, #1
 8004644:	2000      	movs	r0, #0
 8004646:	460c      	mov	r4, r1
 8004648:	4605      	mov	r5, r0
 800464a:	eb12 0804 	adds.w	r8, r2, r4
 800464e:	eb43 0905 	adc.w	r9, r3, r5
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	469a      	mov	sl, r3
 800465a:	4693      	mov	fp, r2
 800465c:	4652      	mov	r2, sl
 800465e:	465b      	mov	r3, fp
 8004660:	4640      	mov	r0, r8
 8004662:	4649      	mov	r1, r9
 8004664:	f7fb fe38 	bl	80002d8 <__aeabi_uldivmod>
 8004668:	4602      	mov	r2, r0
 800466a:	460b      	mov	r3, r1
 800466c:	4613      	mov	r3, r2
 800466e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004676:	d308      	bcc.n	800468a <UART_SetConfig+0x79a>
 8004678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800467a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800467e:	d204      	bcs.n	800468a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004686:	60da      	str	r2, [r3, #12]
 8004688:	e17c      	b.n	8004984 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004690:	e178      	b.n	8004984 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800469a:	f040 80c5 	bne.w	8004828 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800469e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80046a2:	2b20      	cmp	r3, #32
 80046a4:	dc48      	bgt.n	8004738 <UART_SetConfig+0x848>
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	db7b      	blt.n	80047a2 <UART_SetConfig+0x8b2>
 80046aa:	2b20      	cmp	r3, #32
 80046ac:	d879      	bhi.n	80047a2 <UART_SetConfig+0x8b2>
 80046ae:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <UART_SetConfig+0x7c4>)
 80046b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b4:	0800473f 	.word	0x0800473f
 80046b8:	08004747 	.word	0x08004747
 80046bc:	080047a3 	.word	0x080047a3
 80046c0:	080047a3 	.word	0x080047a3
 80046c4:	0800474f 	.word	0x0800474f
 80046c8:	080047a3 	.word	0x080047a3
 80046cc:	080047a3 	.word	0x080047a3
 80046d0:	080047a3 	.word	0x080047a3
 80046d4:	0800475f 	.word	0x0800475f
 80046d8:	080047a3 	.word	0x080047a3
 80046dc:	080047a3 	.word	0x080047a3
 80046e0:	080047a3 	.word	0x080047a3
 80046e4:	080047a3 	.word	0x080047a3
 80046e8:	080047a3 	.word	0x080047a3
 80046ec:	080047a3 	.word	0x080047a3
 80046f0:	080047a3 	.word	0x080047a3
 80046f4:	0800476f 	.word	0x0800476f
 80046f8:	080047a3 	.word	0x080047a3
 80046fc:	080047a3 	.word	0x080047a3
 8004700:	080047a3 	.word	0x080047a3
 8004704:	080047a3 	.word	0x080047a3
 8004708:	080047a3 	.word	0x080047a3
 800470c:	080047a3 	.word	0x080047a3
 8004710:	080047a3 	.word	0x080047a3
 8004714:	080047a3 	.word	0x080047a3
 8004718:	080047a3 	.word	0x080047a3
 800471c:	080047a3 	.word	0x080047a3
 8004720:	080047a3 	.word	0x080047a3
 8004724:	080047a3 	.word	0x080047a3
 8004728:	080047a3 	.word	0x080047a3
 800472c:	080047a3 	.word	0x080047a3
 8004730:	080047a3 	.word	0x080047a3
 8004734:	08004795 	.word	0x08004795
 8004738:	2b40      	cmp	r3, #64	; 0x40
 800473a:	d02e      	beq.n	800479a <UART_SetConfig+0x8aa>
 800473c:	e031      	b.n	80047a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473e:	f7fd fff3 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 8004742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004744:	e033      	b.n	80047ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004746:	f7fe f805 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 800474a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800474c:	e02f      	b.n	80047ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800474e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004752:	4618      	mov	r0, r3
 8004754:	f7fe ff70 	bl	8003638 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800475a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800475c:	e027      	b.n	80047ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800475e:	f107 0318 	add.w	r3, r7, #24
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff f8bc 	bl	80038e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004768:	69fb      	ldr	r3, [r7, #28]
 800476a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800476c:	e01f      	b.n	80047ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800476e:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <UART_SetConfig+0x934>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f003 0320 	and.w	r3, r3, #32
 8004776:	2b00      	cmp	r3, #0
 8004778:	d009      	beq.n	800478e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800477a:	4b2a      	ldr	r3, [pc, #168]	; (8004824 <UART_SetConfig+0x934>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	08db      	lsrs	r3, r3, #3
 8004780:	f003 0303 	and.w	r3, r3, #3
 8004784:	4a24      	ldr	r2, [pc, #144]	; (8004818 <UART_SetConfig+0x928>)
 8004786:	fa22 f303 	lsr.w	r3, r2, r3
 800478a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800478c:	e00f      	b.n	80047ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <UART_SetConfig+0x928>)
 8004790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004792:	e00c      	b.n	80047ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004794:	4b21      	ldr	r3, [pc, #132]	; (800481c <UART_SetConfig+0x92c>)
 8004796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004798:	e009      	b.n	80047ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800479a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80047a0:	e005      	b.n	80047ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80047a2:	2300      	movs	r3, #0
 80047a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80047ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 80e7 	beq.w	8004984 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ba:	4a19      	ldr	r2, [pc, #100]	; (8004820 <UART_SetConfig+0x930>)
 80047bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80047c0:	461a      	mov	r2, r3
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80047c8:	005a      	lsls	r2, r3, #1
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	085b      	lsrs	r3, r3, #1
 80047d0:	441a      	add	r2, r3
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047de:	2b0f      	cmp	r3, #15
 80047e0:	d916      	bls.n	8004810 <UART_SetConfig+0x920>
 80047e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047e8:	d212      	bcs.n	8004810 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	f023 030f 	bic.w	r3, r3, #15
 80047f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047f6:	085b      	lsrs	r3, r3, #1
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	f003 0307 	and.w	r3, r3, #7
 80047fe:	b29a      	uxth	r2, r3
 8004800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004802:	4313      	orrs	r3, r2
 8004804:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	e0b9      	b.n	8004984 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004816:	e0b5      	b.n	8004984 <UART_SetConfig+0xa94>
 8004818:	03d09000 	.word	0x03d09000
 800481c:	003d0900 	.word	0x003d0900
 8004820:	080055c4 	.word	0x080055c4
 8004824:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004828:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800482c:	2b20      	cmp	r3, #32
 800482e:	dc49      	bgt.n	80048c4 <UART_SetConfig+0x9d4>
 8004830:	2b00      	cmp	r3, #0
 8004832:	db7c      	blt.n	800492e <UART_SetConfig+0xa3e>
 8004834:	2b20      	cmp	r3, #32
 8004836:	d87a      	bhi.n	800492e <UART_SetConfig+0xa3e>
 8004838:	a201      	add	r2, pc, #4	; (adr r2, 8004840 <UART_SetConfig+0x950>)
 800483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800483e:	bf00      	nop
 8004840:	080048cb 	.word	0x080048cb
 8004844:	080048d3 	.word	0x080048d3
 8004848:	0800492f 	.word	0x0800492f
 800484c:	0800492f 	.word	0x0800492f
 8004850:	080048db 	.word	0x080048db
 8004854:	0800492f 	.word	0x0800492f
 8004858:	0800492f 	.word	0x0800492f
 800485c:	0800492f 	.word	0x0800492f
 8004860:	080048eb 	.word	0x080048eb
 8004864:	0800492f 	.word	0x0800492f
 8004868:	0800492f 	.word	0x0800492f
 800486c:	0800492f 	.word	0x0800492f
 8004870:	0800492f 	.word	0x0800492f
 8004874:	0800492f 	.word	0x0800492f
 8004878:	0800492f 	.word	0x0800492f
 800487c:	0800492f 	.word	0x0800492f
 8004880:	080048fb 	.word	0x080048fb
 8004884:	0800492f 	.word	0x0800492f
 8004888:	0800492f 	.word	0x0800492f
 800488c:	0800492f 	.word	0x0800492f
 8004890:	0800492f 	.word	0x0800492f
 8004894:	0800492f 	.word	0x0800492f
 8004898:	0800492f 	.word	0x0800492f
 800489c:	0800492f 	.word	0x0800492f
 80048a0:	0800492f 	.word	0x0800492f
 80048a4:	0800492f 	.word	0x0800492f
 80048a8:	0800492f 	.word	0x0800492f
 80048ac:	0800492f 	.word	0x0800492f
 80048b0:	0800492f 	.word	0x0800492f
 80048b4:	0800492f 	.word	0x0800492f
 80048b8:	0800492f 	.word	0x0800492f
 80048bc:	0800492f 	.word	0x0800492f
 80048c0:	08004921 	.word	0x08004921
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d02e      	beq.n	8004926 <UART_SetConfig+0xa36>
 80048c8:	e031      	b.n	800492e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048ca:	f7fd ff2d 	bl	8002728 <HAL_RCC_GetPCLK1Freq>
 80048ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80048d0:	e033      	b.n	800493a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80048d2:	f7fd ff3f 	bl	8002754 <HAL_RCC_GetPCLK2Freq>
 80048d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80048d8:	e02f      	b.n	800493a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80048da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fe feaa 	bl	8003638 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80048e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048e8:	e027      	b.n	800493a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80048ea:	f107 0318 	add.w	r3, r7, #24
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe fff6 	bl	80038e0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80048f8:	e01f      	b.n	800493a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80048fa:	4b2d      	ldr	r3, [pc, #180]	; (80049b0 <UART_SetConfig+0xac0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0320 	and.w	r3, r3, #32
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004906:	4b2a      	ldr	r3, [pc, #168]	; (80049b0 <UART_SetConfig+0xac0>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	08db      	lsrs	r3, r3, #3
 800490c:	f003 0303 	and.w	r3, r3, #3
 8004910:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <UART_SetConfig+0xac4>)
 8004912:	fa22 f303 	lsr.w	r3, r2, r3
 8004916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004918:	e00f      	b.n	800493a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800491a:	4b26      	ldr	r3, [pc, #152]	; (80049b4 <UART_SetConfig+0xac4>)
 800491c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800491e:	e00c      	b.n	800493a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004920:	4b25      	ldr	r3, [pc, #148]	; (80049b8 <UART_SetConfig+0xac8>)
 8004922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004924:	e009      	b.n	800493a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800492a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800492c:	e005      	b.n	800493a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800492e:	2300      	movs	r3, #0
 8004930:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004938:	bf00      	nop
    }

    if (pclk != 0U)
 800493a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493c:	2b00      	cmp	r3, #0
 800493e:	d021      	beq.n	8004984 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004944:	4a1d      	ldr	r2, [pc, #116]	; (80049bc <UART_SetConfig+0xacc>)
 8004946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800494a:	461a      	mov	r2, r3
 800494c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800494e:	fbb3 f2f2 	udiv	r2, r3, r2
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	085b      	lsrs	r3, r3, #1
 8004958:	441a      	add	r2, r3
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004962:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004966:	2b0f      	cmp	r3, #15
 8004968:	d909      	bls.n	800497e <UART_SetConfig+0xa8e>
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004970:	d205      	bcs.n	800497e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	b29a      	uxth	r2, r3
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60da      	str	r2, [r3, #12]
 800497c:	e002      	b.n	8004984 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	2201      	movs	r2, #1
 8004988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800498c:	697b      	ldr	r3, [r7, #20]
 800498e:	2201      	movs	r2, #1
 8004990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	2200      	movs	r2, #0
 8004998:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	2200      	movs	r2, #0
 800499e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80049a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3748      	adds	r7, #72	; 0x48
 80049a8:	46bd      	mov	sp, r7
 80049aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049ae:	bf00      	nop
 80049b0:	58024400 	.word	0x58024400
 80049b4:	03d09000 	.word	0x03d09000
 80049b8:	003d0900 	.word	0x003d0900
 80049bc:	080055c4 	.word	0x080055c4

080049c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d00a      	beq.n	80049ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d00a      	beq.n	8004a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	430a      	orrs	r2, r1
 8004a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a10:	f003 0304 	and.w	r3, r3, #4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d00a      	beq.n	8004a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	430a      	orrs	r2, r1
 8004a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00a      	beq.n	8004a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	430a      	orrs	r2, r1
 8004a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a76:	f003 0320 	and.w	r3, r3, #32
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d00a      	beq.n	8004a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	430a      	orrs	r2, r1
 8004a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d01a      	beq.n	8004ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004abe:	d10a      	bne.n	8004ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
  }
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr

08004b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af02      	add	r7, sp, #8
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b14:	f7fc f9b0 	bl	8000e78 <HAL_GetTick>
 8004b18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f003 0308 	and.w	r3, r3, #8
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d10e      	bne.n	8004b46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f82f 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d001      	beq.n	8004b46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e025      	b.n	8004b92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b04      	cmp	r3, #4
 8004b52:	d10e      	bne.n	8004b72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 f819 	bl	8004b9a <UART_WaitOnFlagUntilTimeout>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d001      	beq.n	8004b72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e00f      	b.n	8004b92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2220      	movs	r2, #32
 8004b76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3710      	adds	r7, #16
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b09c      	sub	sp, #112	; 0x70
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004baa:	e0a9      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bb2:	f000 80a5 	beq.w	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bb6:	f7fc f95f 	bl	8000e78 <HAL_GetTick>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	d302      	bcc.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x32>
 8004bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d140      	bne.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd4:	e853 3f00 	ldrex	r3, [r3]
 8004bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004be0:	667b      	str	r3, [r7, #100]	; 0x64
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	461a      	mov	r2, r3
 8004be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bec:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004bf2:	e841 2300 	strex	r3, r2, [r1]
 8004bf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d1e6      	bne.n	8004bcc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3308      	adds	r3, #8
 8004c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c08:	e853 3f00 	ldrex	r3, [r3]
 8004c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c10:	f023 0301 	bic.w	r3, r3, #1
 8004c14:	663b      	str	r3, [r7, #96]	; 0x60
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	3308      	adds	r3, #8
 8004c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c26:	e841 2300 	strex	r3, r2, [r1]
 8004c2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1e5      	bne.n	8004bfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2220      	movs	r2, #32
 8004c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e069      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 0304 	and.w	r3, r3, #4
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d051      	beq.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c6a:	d149      	bne.n	8004d00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7e:	e853 3f00 	ldrex	r3, [r3]
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	461a      	mov	r2, r3
 8004c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c94:	637b      	str	r3, [r7, #52]	; 0x34
 8004c96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c9c:	e841 2300 	strex	r3, r2, [r1]
 8004ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d1e6      	bne.n	8004c76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	3308      	adds	r3, #8
 8004cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	e853 3f00 	ldrex	r3, [r3]
 8004cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	f023 0301 	bic.w	r3, r3, #1
 8004cbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	3308      	adds	r3, #8
 8004cc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004cc8:	623a      	str	r2, [r7, #32]
 8004cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ccc:	69f9      	ldr	r1, [r7, #28]
 8004cce:	6a3a      	ldr	r2, [r7, #32]
 8004cd0:	e841 2300 	strex	r3, r2, [r1]
 8004cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd6:	69bb      	ldr	r3, [r7, #24]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1e5      	bne.n	8004ca8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2220      	movs	r2, #32
 8004ce0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2220      	movs	r2, #32
 8004ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	2220      	movs	r2, #32
 8004cf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004cfc:	2303      	movs	r3, #3
 8004cfe:	e010      	b.n	8004d22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	4013      	ands	r3, r2
 8004d0a:	68ba      	ldr	r2, [r7, #8]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	bf0c      	ite	eq
 8004d10:	2301      	moveq	r3, #1
 8004d12:	2300      	movne	r3, #0
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	461a      	mov	r2, r3
 8004d18:	79fb      	ldrb	r3, [r7, #7]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	f43f af46 	beq.w	8004bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3770      	adds	r7, #112	; 0x70
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UARTEx_DisableFifoMode+0x16>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e027      	b.n	8004d90 <HAL_UARTEx_DisableFifoMode+0x66>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2224      	movs	r2, #36	; 0x24
 8004d4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0201 	bic.w	r2, r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004d6e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2200      	movs	r2, #0
 8004d74:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2220      	movs	r2, #32
 8004d82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2200      	movs	r2, #0
 8004d8a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3714      	adds	r7, #20
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d101      	bne.n	8004db4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004db0:	2302      	movs	r3, #2
 8004db2:	e02d      	b.n	8004e10 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2224      	movs	r2, #36	; 0x24
 8004dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f022 0201 	bic.w	r2, r2, #1
 8004dda:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	430a      	orrs	r2, r1
 8004dee:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f84f 	bl	8004e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2220      	movs	r2, #32
 8004e02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e0e:	2300      	movs	r3, #0
}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3710      	adds	r7, #16
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b084      	sub	sp, #16
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d101      	bne.n	8004e30 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e02d      	b.n	8004e8c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2224      	movs	r2, #36	; 0x24
 8004e3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 0201 	bic.w	r2, r2, #1
 8004e56:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	683a      	ldr	r2, [r7, #0]
 8004e68:	430a      	orrs	r2, r1
 8004e6a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 f811 	bl	8004e94 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2220      	movs	r2, #32
 8004e7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004e94:	b480      	push	{r7}
 8004e96:	b085      	sub	sp, #20
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d108      	bne.n	8004eb6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004eb4:	e031      	b.n	8004f1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004eb6:	2310      	movs	r3, #16
 8004eb8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004eba:	2310      	movs	r3, #16
 8004ebc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	0e5b      	lsrs	r3, r3, #25
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	f003 0307 	and.w	r3, r3, #7
 8004ecc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	0f5b      	lsrs	r3, r3, #29
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ede:	7bbb      	ldrb	r3, [r7, #14]
 8004ee0:	7b3a      	ldrb	r2, [r7, #12]
 8004ee2:	4911      	ldr	r1, [pc, #68]	; (8004f28 <UARTEx_SetNbDataToProcess+0x94>)
 8004ee4:	5c8a      	ldrb	r2, [r1, r2]
 8004ee6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004eea:	7b3a      	ldrb	r2, [r7, #12]
 8004eec:	490f      	ldr	r1, [pc, #60]	; (8004f2c <UARTEx_SetNbDataToProcess+0x98>)
 8004eee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ef0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
 8004efe:	7b7a      	ldrb	r2, [r7, #13]
 8004f00:	4909      	ldr	r1, [pc, #36]	; (8004f28 <UARTEx_SetNbDataToProcess+0x94>)
 8004f02:	5c8a      	ldrb	r2, [r1, r2]
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004f08:	7b7a      	ldrb	r2, [r7, #13]
 8004f0a:	4908      	ldr	r1, [pc, #32]	; (8004f2c <UARTEx_SetNbDataToProcess+0x98>)
 8004f0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004f0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8004f12:	b29a      	uxth	r2, r3
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004f1a:	bf00      	nop
 8004f1c:	3714      	adds	r7, #20
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	080055dc 	.word	0x080055dc
 8004f2c:	080055e4 	.word	0x080055e4

08004f30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004f30:	b084      	sub	sp, #16
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b084      	sub	sp, #16
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	6078      	str	r0, [r7, #4]
 8004f3a:	f107 001c 	add.w	r0, r7, #28
 8004f3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d120      	bne.n	8004f8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	68da      	ldr	r2, [r3, #12]
 8004f58:	4b2a      	ldr	r3, [pc, #168]	; (8005004 <USB_CoreInit+0xd4>)
 8004f5a:	4013      	ands	r3, r2
 8004f5c:	687a      	ldr	r2, [r7, #4]
 8004f5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f6e:	2b01      	cmp	r3, #1
 8004f70:	d105      	bne.n	8004f7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f000 faac 	bl	80054dc <USB_CoreReset>
 8004f84:	4603      	mov	r3, r0
 8004f86:	73fb      	strb	r3, [r7, #15]
 8004f88:	e01a      	b.n	8004fc0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f000 faa0 	bl	80054dc <USB_CoreReset>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	639a      	str	r2, [r3, #56]	; 0x38
 8004fb2:	e005      	b.n	8004fc0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d116      	bne.n	8004ff4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004fd4:	4b0c      	ldr	r3, [pc, #48]	; (8005008 <USB_CoreInit+0xd8>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f043 0206 	orr.w	r2, r3, #6
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	f043 0220 	orr.w	r2, r3, #32
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005000:	b004      	add	sp, #16
 8005002:	4770      	bx	lr
 8005004:	ffbdffbf 	.word	0xffbdffbf
 8005008:	03ee0000 	.word	0x03ee0000

0800500c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800500c:	b480      	push	{r7}
 800500e:	b083      	sub	sp, #12
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	689b      	ldr	r3, [r3, #8]
 8005018:	f023 0201 	bic.w	r2, r3, #1
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	370c      	adds	r7, #12
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800502e:	b580      	push	{r7, lr}
 8005030:	b084      	sub	sp, #16
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800503a:	2300      	movs	r3, #0
 800503c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800504a:	78fb      	ldrb	r3, [r7, #3]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d115      	bne.n	800507c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800505c:	2001      	movs	r0, #1
 800505e:	f7fb ff17 	bl	8000e90 <HAL_Delay>
      ms++;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	3301      	adds	r3, #1
 8005066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 fa29 	bl	80054c0 <USB_GetMode>
 800506e:	4603      	mov	r3, r0
 8005070:	2b01      	cmp	r3, #1
 8005072:	d01e      	beq.n	80050b2 <USB_SetCurrentMode+0x84>
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2b31      	cmp	r3, #49	; 0x31
 8005078:	d9f0      	bls.n	800505c <USB_SetCurrentMode+0x2e>
 800507a:	e01a      	b.n	80050b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800507c:	78fb      	ldrb	r3, [r7, #3]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d115      	bne.n	80050ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800508e:	2001      	movs	r0, #1
 8005090:	f7fb fefe 	bl	8000e90 <HAL_Delay>
      ms++;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	3301      	adds	r3, #1
 8005098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa10 	bl	80054c0 <USB_GetMode>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d005      	beq.n	80050b2 <USB_SetCurrentMode+0x84>
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	2b31      	cmp	r3, #49	; 0x31
 80050aa:	d9f0      	bls.n	800508e <USB_SetCurrentMode+0x60>
 80050ac:	e001      	b.n	80050b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e005      	b.n	80050be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b32      	cmp	r3, #50	; 0x32
 80050b6:	d101      	bne.n	80050bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
	...

080050c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80050c8:	b084      	sub	sp, #16
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b086      	sub	sp, #24
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
 80050d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80050d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80050e2:	2300      	movs	r3, #0
 80050e4:	613b      	str	r3, [r7, #16]
 80050e6:	e009      	b.n	80050fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	3340      	adds	r3, #64	; 0x40
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	4413      	add	r3, r2
 80050f2:	2200      	movs	r2, #0
 80050f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	3301      	adds	r3, #1
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	2b0e      	cmp	r3, #14
 8005100:	d9f2      	bls.n	80050e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005102:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d11c      	bne.n	8005142 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	68fa      	ldr	r2, [r7, #12]
 8005112:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005116:	f043 0302 	orr.w	r3, r3, #2
 800511a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	601a      	str	r2, [r3, #0]
 8005140:	e005      	b.n	800514e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005154:	461a      	mov	r2, r3
 8005156:	2300      	movs	r3, #0
 8005158:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005160:	4619      	mov	r1, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005168:	461a      	mov	r2, r3
 800516a:	680b      	ldr	r3, [r1, #0]
 800516c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800516e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005170:	2b01      	cmp	r3, #1
 8005172:	d10c      	bne.n	800518e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005176:	2b00      	cmp	r3, #0
 8005178:	d104      	bne.n	8005184 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800517a:	2100      	movs	r1, #0
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 f965 	bl	800544c <USB_SetDevSpeed>
 8005182:	e008      	b.n	8005196 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005184:	2101      	movs	r1, #1
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f960 	bl	800544c <USB_SetDevSpeed>
 800518c:	e003      	b.n	8005196 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800518e:	2103      	movs	r1, #3
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 f95b 	bl	800544c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005196:	2110      	movs	r1, #16
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f000 f8f3 	bl	8005384 <USB_FlushTxFifo>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d001      	beq.n	80051a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f91f 	bl	80053ec <USB_FlushRxFifo>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051be:	461a      	mov	r2, r3
 80051c0:	2300      	movs	r3, #0
 80051c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051ca:	461a      	mov	r2, r3
 80051cc:	2300      	movs	r3, #0
 80051ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d6:	461a      	mov	r2, r3
 80051d8:	2300      	movs	r3, #0
 80051da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80051dc:	2300      	movs	r3, #0
 80051de:	613b      	str	r3, [r7, #16]
 80051e0:	e043      	b.n	800526a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	015a      	lsls	r2, r3, #5
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	4413      	add	r3, r2
 80051ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80051f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051f8:	d118      	bne.n	800522c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10a      	bne.n	8005216 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	015a      	lsls	r2, r3, #5
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4413      	add	r3, r2
 8005208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005212:	6013      	str	r3, [r2, #0]
 8005214:	e013      	b.n	800523e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	015a      	lsls	r2, r3, #5
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4413      	add	r3, r2
 800521e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005222:	461a      	mov	r2, r3
 8005224:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005228:	6013      	str	r3, [r2, #0]
 800522a:	e008      	b.n	800523e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005238:	461a      	mov	r2, r3
 800523a:	2300      	movs	r3, #0
 800523c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005250:	693b      	ldr	r3, [r7, #16]
 8005252:	015a      	lsls	r2, r3, #5
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4413      	add	r3, r2
 8005258:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525c:	461a      	mov	r2, r3
 800525e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005262:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	3301      	adds	r3, #1
 8005268:	613b      	str	r3, [r7, #16]
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	429a      	cmp	r2, r3
 8005270:	d3b7      	bcc.n	80051e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005272:	2300      	movs	r3, #0
 8005274:	613b      	str	r3, [r7, #16]
 8005276:	e043      	b.n	8005300 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528e:	d118      	bne.n	80052c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d10a      	bne.n	80052ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	461a      	mov	r2, r3
 80052a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80052a8:	6013      	str	r3, [r2, #0]
 80052aa:	e013      	b.n	80052d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	015a      	lsls	r2, r3, #5
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b8:	461a      	mov	r2, r3
 80052ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e008      	b.n	80052d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	461a      	mov	r2, r3
 80052d0:	2300      	movs	r3, #0
 80052d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80052d4:	693b      	ldr	r3, [r7, #16]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e0:	461a      	mov	r2, r3
 80052e2:	2300      	movs	r3, #0
 80052e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	015a      	lsls	r2, r3, #5
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	4413      	add	r3, r2
 80052ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f2:	461a      	mov	r2, r3
 80052f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	3301      	adds	r3, #1
 80052fe:	613b      	str	r3, [r7, #16]
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	693a      	ldr	r2, [r7, #16]
 8005304:	429a      	cmp	r2, r3
 8005306:	d3b7      	bcc.n	8005278 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005316:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800531a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005328:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	2b00      	cmp	r3, #0
 800532e:	d105      	bne.n	800533c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699b      	ldr	r3, [r3, #24]
 8005334:	f043 0210 	orr.w	r2, r3, #16
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699a      	ldr	r2, [r3, #24]
 8005340:	4b0e      	ldr	r3, [pc, #56]	; (800537c <USB_DevInit+0x2b4>)
 8005342:	4313      	orrs	r3, r2
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800534a:	2b00      	cmp	r3, #0
 800534c:	d005      	beq.n	800535a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	f043 0208 	orr.w	r2, r3, #8
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800535a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d105      	bne.n	800536c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	699a      	ldr	r2, [r3, #24]
 8005364:	4b06      	ldr	r3, [pc, #24]	; (8005380 <USB_DevInit+0x2b8>)
 8005366:	4313      	orrs	r3, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800536c:	7dfb      	ldrb	r3, [r7, #23]
}
 800536e:	4618      	mov	r0, r3
 8005370:	3718      	adds	r7, #24
 8005372:	46bd      	mov	sp, r7
 8005374:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005378:	b004      	add	sp, #16
 800537a:	4770      	bx	lr
 800537c:	803c3800 	.word	0x803c3800
 8005380:	40000004 	.word	0x40000004

08005384 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	3301      	adds	r3, #1
 8005396:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	4a13      	ldr	r2, [pc, #76]	; (80053e8 <USB_FlushTxFifo+0x64>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d901      	bls.n	80053a4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e01b      	b.n	80053dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	daf2      	bge.n	8005392 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	019b      	lsls	r3, r3, #6
 80053b4:	f043 0220 	orr.w	r2, r3, #32
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	3301      	adds	r3, #1
 80053c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	4a08      	ldr	r2, [pc, #32]	; (80053e8 <USB_FlushTxFifo+0x64>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d901      	bls.n	80053ce <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80053ca:	2303      	movs	r3, #3
 80053cc:	e006      	b.n	80053dc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d0f0      	beq.n	80053bc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80053da:	2300      	movs	r3, #0
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	00030d40 	.word	0x00030d40

080053ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	3301      	adds	r3, #1
 80053fc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	4a11      	ldr	r2, [pc, #68]	; (8005448 <USB_FlushRxFifo+0x5c>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d901      	bls.n	800540a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005406:	2303      	movs	r3, #3
 8005408:	e018      	b.n	800543c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	daf2      	bge.n	80053f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2210      	movs	r2, #16
 800541a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	3301      	adds	r3, #1
 8005420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a08      	ldr	r2, [pc, #32]	; (8005448 <USB_FlushRxFifo+0x5c>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d901      	bls.n	800542e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e006      	b.n	800543c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	f003 0310 	and.w	r3, r3, #16
 8005436:	2b10      	cmp	r3, #16
 8005438:	d0f0      	beq.n	800541c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr
 8005448:	00030d40 	.word	0x00030d40

0800544c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	78fb      	ldrb	r3, [r7, #3]
 8005466:	68f9      	ldr	r1, [r7, #12]
 8005468:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800546c:	4313      	orrs	r3, r2
 800546e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005498:	f023 0303 	bic.w	r3, r3, #3
 800549c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054ac:	f043 0302 	orr.w	r3, r3, #2
 80054b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b083      	sub	sp, #12
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	f003 0301 	and.w	r3, r3, #1
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80054dc:	b480      	push	{r7}
 80054de:	b085      	sub	sp, #20
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	3301      	adds	r3, #1
 80054ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a13      	ldr	r2, [pc, #76]	; (8005540 <USB_CoreReset+0x64>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d901      	bls.n	80054fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e01b      	b.n	8005532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	daf2      	bge.n	80054e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005502:	2300      	movs	r3, #0
 8005504:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	f043 0201 	orr.w	r2, r3, #1
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	3301      	adds	r3, #1
 8005516:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	4a09      	ldr	r2, [pc, #36]	; (8005540 <USB_CoreReset+0x64>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d901      	bls.n	8005524 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e006      	b.n	8005532 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f003 0301 	and.w	r3, r3, #1
 800552c:	2b01      	cmp	r3, #1
 800552e:	d0f0      	beq.n	8005512 <USB_CoreReset+0x36>

  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	00030d40 	.word	0x00030d40

08005544 <__libc_init_array>:
 8005544:	b570      	push	{r4, r5, r6, lr}
 8005546:	4d0d      	ldr	r5, [pc, #52]	; (800557c <__libc_init_array+0x38>)
 8005548:	4c0d      	ldr	r4, [pc, #52]	; (8005580 <__libc_init_array+0x3c>)
 800554a:	1b64      	subs	r4, r4, r5
 800554c:	10a4      	asrs	r4, r4, #2
 800554e:	2600      	movs	r6, #0
 8005550:	42a6      	cmp	r6, r4
 8005552:	d109      	bne.n	8005568 <__libc_init_array+0x24>
 8005554:	4d0b      	ldr	r5, [pc, #44]	; (8005584 <__libc_init_array+0x40>)
 8005556:	4c0c      	ldr	r4, [pc, #48]	; (8005588 <__libc_init_array+0x44>)
 8005558:	f000 f820 	bl	800559c <_init>
 800555c:	1b64      	subs	r4, r4, r5
 800555e:	10a4      	asrs	r4, r4, #2
 8005560:	2600      	movs	r6, #0
 8005562:	42a6      	cmp	r6, r4
 8005564:	d105      	bne.n	8005572 <__libc_init_array+0x2e>
 8005566:	bd70      	pop	{r4, r5, r6, pc}
 8005568:	f855 3b04 	ldr.w	r3, [r5], #4
 800556c:	4798      	blx	r3
 800556e:	3601      	adds	r6, #1
 8005570:	e7ee      	b.n	8005550 <__libc_init_array+0xc>
 8005572:	f855 3b04 	ldr.w	r3, [r5], #4
 8005576:	4798      	blx	r3
 8005578:	3601      	adds	r6, #1
 800557a:	e7f2      	b.n	8005562 <__libc_init_array+0x1e>
 800557c:	080055f4 	.word	0x080055f4
 8005580:	080055f4 	.word	0x080055f4
 8005584:	080055f4 	.word	0x080055f4
 8005588:	080055f8 	.word	0x080055f8

0800558c <memset>:
 800558c:	4402      	add	r2, r0
 800558e:	4603      	mov	r3, r0
 8005590:	4293      	cmp	r3, r2
 8005592:	d100      	bne.n	8005596 <memset+0xa>
 8005594:	4770      	bx	lr
 8005596:	f803 1b01 	strb.w	r1, [r3], #1
 800559a:	e7f9      	b.n	8005590 <memset+0x4>

0800559c <_init>:
 800559c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800559e:	bf00      	nop
 80055a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a2:	bc08      	pop	{r3}
 80055a4:	469e      	mov	lr, r3
 80055a6:	4770      	bx	lr

080055a8 <_fini>:
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055aa:	bf00      	nop
 80055ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ae:	bc08      	pop	{r3}
 80055b0:	469e      	mov	lr, r3
 80055b2:	4770      	bx	lr
